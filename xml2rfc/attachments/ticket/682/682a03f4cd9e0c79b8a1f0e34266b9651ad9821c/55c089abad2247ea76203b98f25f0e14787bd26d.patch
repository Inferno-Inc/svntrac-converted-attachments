Binary files xml2rfc/.DS_Store and xml2rfc-original/.DS_Store differ
diff -rupN xml2rfc/__init__.py xml2rfc-original/__init__.py
--- xml2rfc/__init__.py	2014-06-28 22:29:40.000000000 -0700
+++ xml2rfc-original/__init__.py	2014-06-05 13:46:16.000000000 -0700
@@ -1,7 +1,7 @@
 
 
 # Static values
-__version__  = '2.4.8v'
+__version__  = '2.4.8'
 NAME         = 'xml2rfc'
 VERSION      = [ int(i) if i.isdigit() else i for i in __version__.split('.') ]
 CACHES       = ['/var/cache/xml2rfc', '~/.cache/xml2rfc']  # Ordered by priority
diff -rupN xml2rfc/templates/rfc2629.dtd xml2rfc-original/templates/rfc2629.dtd
--- xml2rfc/templates/rfc2629.dtd	2014-07-02 03:05:31.000000000 -0700
+++ xml2rfc-original/templates/rfc2629.dtd	2013-07-01 09:49:06.000000000 -0700
@@ -1,5 +1,5 @@
 <!--
-  revised DTD for the RFC document series, draft of 2009-10-06, modified 2014-06-28 by SeanTek to add list and vspace to c
+  revised DTD for the RFC document series, draft of 2009-10-06
   -->
 
 
@@ -257,7 +257,7 @@
           width       %ATEXT;            ""
           height      %ATEXT;            "">
 
-<!ELEMENT preamble    (%TEXT;|xref|eref|iref|cref|spanx|vspace)*>
+<!ELEMENT preamble    (%TEXT;|xref|eref|iref|cref|spanx)*>
 <!ELEMENT artwork     (%TEXT;)*>
 <!ATTLIST artwork
           xml:space   (default|preserve) "preserve"
@@ -269,7 +269,7 @@
           width       %ATEXT;            ""
           height      %ATEXT;            "">
 
-<!ELEMENT postamble   (%TEXT;|xref|eref|iref|cref|spanx|vspace)*>
+<!ELEMENT postamble   (%TEXT;|xref|eref|iref|cref|spanx)*>
     
 <!ELEMENT texttable   (preamble?,ttcol+,c*,postamble?)>
 <!ATTLIST texttable
@@ -282,7 +282,7 @@
 <!ATTLIST ttcol
           width       %ATEXT;            #IMPLIED
           align       (left|center|right) "left">
-<!ELEMENT c           (%TEXT;|xref|eref|iref|cref|spanx|vspace)*>
+<!ELEMENT c           (%TEXT;|xref|eref|iref|cref|spanx)*>
 
 
 <!--
diff -rupN xml2rfc/utils.py xml2rfc-original/utils.py
--- xml2rfc/utils.py	2014-07-02 14:45:46.000000000 -0700
+++ xml2rfc-original/utils.py	2014-05-30 00:03:41.000000000 -0700
@@ -146,7 +146,7 @@ class MyTextWrapper(textwrap.TextWrapper
                         chunks += [ chunk3 ]
             else:
                 chunks += [ chunk2 ]
-    
+        
         # Original implementation
         if self.fix_sentence_endings:
             self._fix_sentence_endings(chunks)
@@ -192,11 +192,8 @@ def formatXmlWhitespace(tree):
         period then we replace the newline with two spaces.
     """
     for element in tree.iter():
-        # Preserve formatting on artwork and spanx iff xml:space == 'preserve' (default)
-        # Beware that the etree expands xml: to the actual namespace
-        if (element.tag != 'artwork' and element.tag != 'spanx') or \
-           element.attrib.get('{http://www.w3.org/XML/1998/namespace}space') == 'default':
-
+        # Preserve formatting on artwork
+        if element.tag != 'artwork':
             if element.text is not None:
                 element.text = re.sub('\s*\n\s*', ' ', \
                                re.sub('\.\s*\n\s*', '.  ', \
diff -rupN xml2rfc/writers/html.py xml2rfc-original/writers/html.py
--- xml2rfc/writers/html.py	2014-07-02 12:51:41.000000000 -0700
+++ xml2rfc-original/writers/html.py	2014-06-05 07:27:07.000000000 -0700
@@ -271,49 +271,13 @@ class HtmlRfcWriter(BaseRfcWriter):
             if element.text:
                 text = element.text
             elem = None
-            # xml:space
-            preserve_xmlspace = ('preserve' == element.attrib.get( \
-            '{http://www.w3.org/XML/1998/namespace}space', 'preserve'))
-            
-            if style == 'nobreak':
-                # preferable to nonstandard NOBR
-                # NB: The behavior here will collapse *consecutive spaces*
-                #     (when rendered) if xml:space is default. I.e.,
-                #     the purpose of nobreak is to turn off auto-wrapping.
-                elem = E.SPAN(text, style=('white-space: ' + \
-                       'pre' if preserve_xmlspace else 'white-space: nowrap'))
+            if style == 'strong':
+                elem = E.STRONG(text)
+            elif style == 'verb':
+                elem = E.SAMP(text)
             else:
-                if style == 'strong':
-                    elem = E.STRONG(text)
-                elif style == 'vstrong':
-                    elem = E.SAMP()
-                    elem2 = E.STRONG(text)
-                    elem.append(elem2)
-                elif style == 'emph':
-                    elem = E.EM(text)
-                elif style == 'vemph':
-                    elem = E.SAMP()
-                    elem2 = E.EM(text)
-                    elem.append(elem2)
-                elif style == 'verb':
-                    elem = E.SAMP(text)
-                elif style == 'vbare':
-                    elem = E.SAMP(text)
-                elif style == 'vdeluxe':
-                    elem = E.SAMP()
-                    elem2 = E.STRONG()
-                    elem3 = E.EM(text)
-                    elem2.append(elem3)
-                    elem.append(elem2)
-                else:
-                    xml2rfc.log.warn('spanx style="' + style + \
-                    '" attribute not recognized; defaulting to <span> in HTML')
-                    # Default to plain old SPAN
-                    elem = E.SPAN(text)
-                
-                if preserve_xmlspace:
-                    elem.attrib['style'] = 'white-space: pre-wrap'
-
+                # Default to style=emph
+                elem = E.EM(text)
             if element.tail:
                 elem.tail = element.tail
             return [elem]
@@ -687,20 +651,8 @@ class HtmlRfcWriter(BaseRfcWriter):
                 td.text = cell.text
             for child in cell:
                 # Add any inline elements (references)
-                # Handle vspace just like write_t_rec
-                if child.tag == 'vspace':
-                    br = E.BR()
-                    td.append(br)
-                    blankLines = int(child.attrib.get('blankLines',
-                                     self.defaults['vspace_blanklines']))
-                    for i in range(blankLines):
-                        br = E.BR()
-                        current.append(br)
-                    if child.tail:
-                        br.tail = child.tail
-                else:
-                    for element in self._expand_ref(child):
-                        td.append(element)
+                for element in self._expand_ref(child):
+                    td.append(element)
             # Get alignment from header
             td.attrib['class'] = col_aligns[col_num]
             tr.append(td)
diff -rupN xml2rfc/writers/raw_txt.py xml2rfc-original/writers/raw_txt.py
--- xml2rfc/writers/raw_txt.py	2014-07-02 14:54:52.000000000 -0700
+++ xml2rfc-original/writers/raw_txt.py	2014-06-05 07:21:55.000000000 -0700
@@ -66,17 +66,6 @@ class RawTextRfcWriter(BaseRfcWriter):
         """ <vspace> line break wrapper to allow for overrides """
         return self._lb(num=num)
 
-    def _text_wrap_with_newline(self, text, width):
-        """ Wrap some text like textwrap.wrap,
-            treating newlines as actual line breaks.
-        """
-        initial_lines = text.split('\n')
-        final_lines = []
-        for l in initial_lines:
-            final_lines += textwrap.wrap(l, width)
-        
-        return final_lines
-
     def write_text(self, string, indent=0, sub_indent=0, bullet='',
                   align='left', leading_blankline=False, buf=None,
                   strip=True, edit=False, wrap_urls=True,
@@ -475,40 +464,16 @@ class RawTextRfcWriter(BaseRfcWriter):
             elif element.tag == 'spanx':
                 style = element.attrib.get('style', 'emph')
                 edgechar = '?'
-                if style == 'emph' or style == 'vemph':
+                if style == 'emph':
                     edgechar = '_'
-                elif style == 'strong' or style == 'vstrong':
+                elif style == 'strong':
                     edgechar = '*'
                 elif style == 'verb':
                     edgechar = '"'
-                elif style == 'vbare':
-                    edgechar = ''
-                # vdeluxe (~bold-italic) and nobreak handled separately below
-                elif style != 'nobreak' and style != 'vdeluxe':
-                    xml2rfc.log.warn('spanx style="' + style + \
-                    '" attribute not recognized; defaulting to ? ? delimiters in text')
-                
                 text = ''
-                # xml:space
-                preserve_xmlspace = ('preserve' == element.attrib.get( \
-                '{http://www.w3.org/XML/1998/namespace}space', 'preserve'))
-                
                 if element.text:
                     text = element.text
-                if style == 'nobreak':
-                    # For whitespace collapse, just use \s, which includes [ \t\n\r\f\v].
-                    # But only " " and \t matter.
-                    text = re.sub("-", u"\u2011", text) # switch to non-breaking hyphens
-                    text = re.sub(" " if preserve_xmlspace else "\s+", u"\u00A0", text) # switch to non-breaking space
-                    line.append(text)
-                else:
-                    if not preserve_xmlspace:
-                        # default spacing = whitespace collapse: combine SP and HTAB sequences into one SP
-                        text = re.sub("\s+", " ", text)
-                    if style == 'vdeluxe':
-                        line.append('*_' + text + '_*')
-                    else:
-                        line.append(edgechar + text + edgechar)
+                line.append(edgechar + text + edgechar)
             
             # Add tail text before next element
             if element.tail:
@@ -889,27 +854,11 @@ class RawTextRfcWriter(BaseRfcWriter):
 
 
             text = cell.text or ''
-            
             if len(cell) > 0:
                 # <c> has children, render their text and add to line
-                remainder = cell.getchildren()
-                while len(remainder) > 0:
-                    inline_text, remainder = \
-                    self._combine_inline_elements(remainder)
-                    
-                    text += inline_text
-                    # Handle vspace only for now
-                    if len(remainder) > 0:
-                        c_element = remainder.pop(0)
-                        if c_element.tag == 'vspace':
-                            text += '\n'
-                            text += '\n' * int(c_element.attrib.get('blankLines',
-                                               self.defaults['vspace_blanklines']))
-                
-                        # aggregate the tail after c_element
-                        if c_element.tail:
-                            text += c_element.tail
-
+                inline_text, null = \
+                    self._combine_inline_elements(cell.getchildren())
+                text += inline_text
             text = self.wrapper.replace(text)
             matrix[row].append(text)
 
@@ -1195,7 +1144,7 @@ class RawTextRfcWriter(BaseRfcWriter):
 
         # Now construct the cells using textwrap against ttcol_widths
         cell_lines = [
-            [ self._text_wrap_with_newline(cell, ttcol_widths[j]) or [''] for j, cell in enumerate(matrix[i]) ]
+            [ textwrap.wrap(cell, ttcol_widths[j]) or [''] for j, cell in enumerate(matrix[i]) ]
             for i in range(0, len(matrix))
         ]
 
@@ -1222,7 +1171,7 @@ class RawTextRfcWriter(BaseRfcWriter):
                     # This is the header row, append the header decoration
                     output.append(''.join(borderstring))
                 continue
-            # produce as many output rows as the number of wrapped
+            # produce as many outpur rows as the number of wrapped
             # text lines in the cell with most lines, but at least 1
             for row in range(0, max(map(len, cell_line))):
                 if style == 'headers' or style == 'none':
