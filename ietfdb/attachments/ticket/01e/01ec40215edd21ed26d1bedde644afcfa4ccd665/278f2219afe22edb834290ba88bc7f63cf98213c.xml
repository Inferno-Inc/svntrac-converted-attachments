<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-quic-http-latest" category="std">

  <front>
    <title abbrev="HTTP over QUIC">Hypertext Transfer Protocol (HTTP) over QUIC</title>

    <author initials="M." surname="Bishop" fullname="Mike Bishop" role="editor">
      <organization>Akamai</organization>
      <address>
        <email>mbishop@evequefou.be</email>
      </address>
    </author>

    <date />

    <area>Transport</area>
    <workgroup>QUIC</workgroup>
    

    <abstract>


<t>The QUIC transport protocol has several features that are desirable in a
transport for HTTP, such as stream multiplexing, per-stream flow control, and
low-latency connection establishment.  This document describes a mapping of HTTP
semantics over QUIC.  This document also identifies HTTP/2 features that are
subsumed by QUIC, and describes how HTTP/2 extensions can be ported to QUIC.</t>



    </abstract>


    <note title="Note to Readers">


<t>Discussion of this draft takes place on the QUIC working group mailing list
(quic@ietf.org), which is archived at
<eref target="https://mailarchive.ietf.org/arch/search/?email_list=quic">https://mailarchive.ietf.org/arch/search/?email_list=quic</eref>.</t>

<t>Working Group information can be found at <eref target="https://github.com/quicwg">https://github.com/quicwg</eref>; source
code and issues list for this draft can be found at
<eref target="https://github.com/quicwg/base-drafts/labels/-http">https://github.com/quicwg/base-drafts/labels/-http</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The QUIC transport protocol has several features that are desirable in a
transport for HTTP, such as stream multiplexing, per-stream flow control, and
low-latency connection establishment. This document describes a mapping of HTTP
semantics over QUIC, drawing heavily on the existing TCP mapping, HTTP/2.
Specifically, this document identifies HTTP/2 features that are subsumed by
QUIC, and describes how the other features can be implemented atop QUIC.</t>

<t>QUIC is described in <xref target="QUIC-TRANSPORT"/>.  For a full description of HTTP/2, see
<xref target="RFC7540"/>.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>Field definitions are given in Augmented Backus-Naur Form (ABNF), as defined in
<xref target="RFC5234"/>.</t>

<t>This document uses the variable-length integer encoding from
<xref target="QUIC-TRANSPORT"/>.</t>

<t>Protocol elements called “frames” exist in both this document and
<xref target="QUIC-TRANSPORT"/>. Where frames from <xref target="QUIC-TRANSPORT"/> are referenced, the
frame name will be prefaced with “QUIC.”  For example, “QUIC APPLICATION_CLOSE
frames.”  References without this preface refer to frames defined in <xref target="frames"/>.</t>

</section>
</section>
<section anchor="quic-advertisement" title="QUIC Advertisement">

<t>An HTTP origin advertises the availability of an equivalent HTTP/QUIC endpoint
via the Alt-Svc HTTP response header or the HTTP/2 ALTSVC frame (<xref target="RFC7838"/>),
using the ALPN token defined in <xref target="connection-establishment"/>.</t>

<t>For example, an origin could indicate in an HTTP/1.1 or HTTP/2 response that
HTTP/QUIC was available on UDP port 50781 at the same hostname by including the
following header in any response:</t>

<figure><artwork type="example"><![CDATA[
Alt-Svc: hq=":50781"
]]></artwork></figure>

<t>On receipt of an Alt-Svc header indicating HTTP/QUIC support, a client MAY
attempt to establish a QUIC connection to the indicated host and port and, if
successful, send HTTP requests using the mapping described in this document.</t>

<t>Connectivity problems (e.g. firewall blocking UDP) can result in QUIC connection
establishment failure, in which case the client SHOULD continue using the
existing connection or try another alternative endpoint offered by the origin.</t>

<t>Servers MAY serve HTTP/QUIC on any UDP port.  Servers MUST use the same port
across all IP addresses that serve a single domain, and SHOULD NOT change this
port.</t>

<section anchor="alt-svc-version-hint" title="QUIC Version Hints">

<t>This document defines the “quic” parameter for Alt-Svc, which MAY be used to
provide version-negotiation hints to HTTP/QUIC clients. QUIC versions are
four-octet sequences with no additional constraints on format. Syntax:</t>

<figure><artwork type="abnf"><![CDATA[
quic = version-number
version-number = 1*8HEXDIG; hex-encoded QUIC version
]]></artwork></figure>

<t>Leading zeros SHOULD be omitted for brevity.  When multiple versions are
supported, the “quic” parameter MAY be repeated multiple times in a single
Alt-Svc entry.  For example, if a server supported both version 0x00000001 and
the version rendered in ASCII as “Q034”, it could specify the following header:</t>

<figure><artwork type="example"><![CDATA[
Alt-Svc: hq=":49288";quic=1;quic=51303334
]]></artwork></figure>

<t>Where multiple versions are listed, the order of the values reflects the
server’s preference (with the first value being the most preferred version).
Origins SHOULD list only versions which are supported by the alternative, but
MAY omit supported versions for any reason.</t>

</section>
</section>
<section anchor="connection-establishment" title="Connection Establishment">

<t>HTTP/QUIC connections are established as described in <xref target="QUIC-TRANSPORT"/>. During
connection establishment, HTTP/QUIC support is indicated by selecting the ALPN
token “hq” in the crypto handshake.</t>

<t>While connection-level options pertaining to the core QUIC protocol are set in
the initial crypto handshake, HTTP-specific settings are conveyed
in the SETTINGS frame. After the QUIC connection is established, a SETTINGS
frame (<xref target="frame-settings"/>) MUST be sent by each endpoint as the initial frame
of their respective HTTP control stream (Stream ID 2 or 3, see
<xref target="stream-mapping"/>). The server MUST NOT send data on any other stream until
the client’s SETTINGS frame has been received.</t>

<section anchor="draft-version-identification" title="Draft Version Identification">

<t><list style='empty'>
  <t><spanx style="strong">RFC Editor’s Note:</spanx>  Please remove this section prior to publication of a
final version of this document.</t>
</list></t>

<t>Only implementations of the final, published RFC can identify themselves as
“hq”. Until such an RFC exists, implementations MUST NOT identify themselves
using this string.</t>

<t>Implementations of draft versions of the protocol MUST add the string “-“ and
the corresponding draft number to the identifier. For example,
draft-ietf-quic-http-01 is identified using the string “hq-01”.</t>

<t>Non-compatible experiments that are based on these draft versions MUST append
the string “-“ and an experiment name to the identifier. For example, an
experimental implementation based on draft-ietf-quic-http-09 which reserves an
extra stream for unsolicited transmission of 1980s pop music might identify
itself as “hq-09-rickroll”. Note that any label MUST conform to the “token”
syntax defined in Section 3.2.6 of <xref target="RFC7230"></xref>. Experimenters are encouraged to
coordinate their experiments on the quic@ietf.org mailing list.</t>

</section>
</section>
<section anchor="stream-mapping" title="Stream Mapping and Usage">

<t>A QUIC stream provides reliable in-order delivery of bytes, but makes no
guarantees about order of delivery with regard to bytes on other streams. On the
wire, data is framed into QUIC STREAM frames, but this framing is invisible to
the HTTP framing layer. A QUIC receiver buffers and orders received STREAM
frames, exposing the data contained within as a reliable byte stream to the
application.</t>

<t>QUIC reserves the first client-initiated, bidirectional stream (Stream 0) for
cryptographic operations. HTTP over QUIC reserves the first unidirectional
stream sent by either peer (Streams 2 and 3) for sending and receiving HTTP
control frames.  This pair of unidirectional streams is analogous to HTTP/2’s
Stream 0.  The data sent on these streams is critical to the HTTP connection.
If either control stream is closed for any reason, this MUST be treated as a
connection error of type QUIC_CLOSED_CRITICAL_STREAM.</t>

<t>When HTTP headers and data are sent over QUIC, the QUIC layer handles most of
the stream management.</t>

<t>An HTTP request/response consumes a single client-initiated, bidirectional
stream.  A bidirectional stream ensures that the response can be readily
correlated with the request. This means that the client’s first request occurs
on QUIC stream 4, with subsequent requests on stream 8, 12, and so on.</t>

<t>Server push uses server-initiated, unidirectional streams.  Thus, the server’s
first push consumes stream 7 and subsequent pushes use stream 11, 15, and so on.</t>

<t>These streams carry frames related to the request/response (see <xref target="frames"/>).
When a stream terminates cleanly, if the last frame on the stream was truncated,
this MUST be treated as a connection error (see HTTP_MALFORMED_FRAME in
<xref target="http-error-codes"/>).  Streams which terminate abruptly may be reset at any
point in the frame.</t>

<t>Streams SHOULD be used sequentially, with no gaps.</t>

<t>HTTP does not need to do any separate multiplexing when using QUIC - data sent
over a QUIC stream always maps to a particular HTTP transaction. Requests and
responses are considered complete when the corresponding QUIC stream is closed
in the appropriate direction.</t>

<section anchor="control-streams" title="Control Streams">

<t>Since most connection-level concerns will be managed by QUIC, the primary use of
Streams 2 and 3 will be for the SETTINGS frame when the connection opens and for
PRIORITY frames subsequently.</t>

<t>A pair of unidirectional streams is used rather than a single bidirectional
stream.  This allows either peer to send data as soon they are able.  Depending
on whether 0-RTT is enabled on the connection, either client or server might be
able to send stream data first after the cryptographic handshake completes.</t>

</section>
<section anchor="request-response" title="HTTP Message Exchanges">

<t>A client sends an HTTP request on a client-initiated, bidirectional QUIC
stream. A server sends an HTTP response on the same stream as the request.</t>

<t>An HTTP message (request or response) consists of:</t>

<t><list style="numbers">
  <t>one header block (see <xref target="frame-headers"/>) containing the message headers (see
<xref target="RFC7230"/>, Section 3.2),</t>
  <t>the payload body (see <xref target="RFC7230"/>, Section 3.3), sent as a series of DATA
frames (see <xref target="frame-data"/>),</t>
  <t>optionally, one header block containing the trailer-part, if present (see
<xref target="RFC7230"/>, Section 4.1.2).</t>
</list></t>

<t>In addition, prior to sending the message header block indicated above, a
response may contain zero or more header blocks containing the message headers
of informational (1xx) HTTP responses (see <xref target="RFC7230"/>, Section 3.2 and
<xref target="RFC7231"/>, Section 6.2).</t>

<t>PUSH_PROMISE frames MAY be interleaved with the frames of a response message
indicating a pushed resource related to the response. These PUSH_PROMISE frames
are not part of the response, but carry the headers of a separate HTTP request
message.  See <xref target="server-push"/> for more details.</t>

<t>The “chunked” transfer encoding defined in Section 4.1 of <xref target="RFC7230"/> MUST NOT
be used.</t>

<t>Trailing header fields are carried in an additional header block following the
body. Such a header block is a sequence of HEADERS frames with End Header Block
set on the last frame. Senders MUST send only one header block in the trailers
section; receivers MUST discard any subsequent header blocks.</t>

<t>An HTTP request/response exchange fully consumes a QUIC stream. After sending a
request, a client closes the stream for sending; after sending a response, the
server closes the stream for sending and the QUIC stream is fully closed.</t>

<t>A server can send a complete response prior to the client sending an entire
request if the response does not depend on any portion of the request that has
not been sent and received. When this is true, a server MAY request that the
client abort transmission of a request without error by triggering a QUIC
STOP_SENDING with error code HTTP_EARLY_RESPONSE, sending a complete response,
and cleanly closing its streams. Clients MUST NOT discard complete responses as
a result of having their request terminated abruptly, though clients can always
discard responses at their discretion for other reasons.  Servers MUST NOT
abort a response in progress as a result of receiving a solicited RST_STREAM.</t>

<section anchor="header-compression" title="Header Compression">

<t>HTTP/QUIC uses HPACK header compression as described in <xref target="RFC7541"/>. HPACK was
designed for HTTP/2 with the assumption of in-order delivery such as that
provided by TCP. A sequence of encoded header blocks must arrive (and be
decoded) at an endpoint in the same order in which they were encoded. This
ensures that the dynamic state at the two endpoints remains in sync.</t>

<t>QUIC streams provide in-order delivery of data sent on those streams, but there
are no guarantees about order of delivery between streams. QUIC anticipates
moving to a modified version of HPACK without this assumption.  In the meantime,
by fixing the size of the dynamic table at zero, HPACK can be used in an
unordered environment.</t>

</section>
<section anchor="the-connect-method" title="The CONNECT Method">

<t>The pseudo-method CONNECT (<xref target="RFC7231"/>, Section 4.3.6) is primarily used with
HTTP proxies to establish a TLS session with an origin server for the purposes
of interacting with “https” resources. In HTTP/1.x, CONNECT is used to convert
an entire HTTP connection into a tunnel to a remote host. In HTTP/2, the CONNECT
method is used to establish a tunnel over a single HTTP/2 stream to a remote
host for similar purposes.</t>

<t>A CONNECT request in HTTP/QUIC functions in the same manner as in HTTP/2. The
request MUST be formatted as described in <xref target="RFC7540"/>, Section 8.3. A CONNECT
request that does not conform to these restrictions is malformed. The request
stream MUST NOT be half-closed at the end of the request.</t>

<t>A proxy that supports CONNECT establishes a TCP connection (<xref target="RFC0793"/>) to the
server identified in the “:authority” pseudo-header field. Once this connection
is successfully established, the proxy sends a HEADERS frame containing a 2xx
series status code to the client, as defined in <xref target="RFC7231"/>, Section 4.3.6.</t>

<t>All DATA frames on the request stream correspond to data sent on the TCP
connection. Any DATA frame sent by the client is transmitted by the proxy to the
TCP server; data received from the TCP server is packaged into DATA frames by
the proxy. Note that the size and number of TCP segments is not guaranteed to
map predictably to the size and number of HTTP DATA or QUIC STREAM frames.</t>

<t>The TCP connection can be closed by either peer. When the client ends the
request stream (that is, the receive stream at the proxy enters the “Data Recvd”
state), the proxy will set the FIN bit on its connection to the TCP server. When
the proxy receives a packet with the FIN bit set, it will terminate the send
stream that it sends to client. TCP connections which remain half-closed in a
single direction are not invalid, but are often handled poorly by servers, so
clients SHOULD NOT cause send a STREAM frame with a FIN bit for connections on
which they are still expecting data.</t>

<t>A TCP connection error is signaled with RST_STREAM. A proxy treats any error in
the TCP connection, which includes receiving a TCP segment with the RST bit set,
as a stream error of type HTTP_CONNECT_ERROR (<xref target="http-error-codes"/>).
Correspondingly, a proxy MUST send a TCP segment with the RST bit set if it
detects an error with the stream or the QUIC connection.</t>

</section>
</section>
<section anchor="priority" title="Request Prioritization">

<t>HTTP/QUIC uses the priority scheme described in <xref target="RFC7540"/>, Section 5.3. In
this priority scheme, a given request can be designated as dependent upon
another request, which expresses the preference that the latter stream (the
“parent” request) be allocated resources before the former stream (the
“dependent” request). Taken together, the dependencies across all requests in a
connection form a dependency tree. The structure of the dependency tree changes
as PRIORITY frames add, remove, or change the dependency links between requests.</t>

<t>The PRIORITY frame <xref target="frame-priority"/> identifies a request
either by identifying the stream that carries a request or by using a Push ID
(<xref target="frame-push-promise"/>).</t>

<t>Only a client can send PRIORITY frames.  A server MUST NOT send a PRIORITY
frame.</t>

</section>
<section anchor="server-push" title="Server Push">

<t>HTTP/QUIC supports server push as described in <xref target="RFC7540"/>. During connection
establishment, the client enables server push by sending a MAX_PUSH_ID frame
(see <xref target="frame-max-push-id"/>).  A server cannot use server push until it receives
a MAX_PUSH_ID frame.</t>

<t>As with server push for HTTP/2, the server initiates a server push by sending a
PUSH_PROMISE frame that includes request header fields attributed to the
request. The PUSH_PROMISE frame is sent on the client-initiated, bidirectional
stream that carried the request that generated the push.  This allows the server
push to be associated with a request.  Ordering of a PUSH_PROMISE in relation to
certain parts of the response is important (see Section 8.2.1 of <xref target="RFC7540"/>).</t>

<t>Unlike HTTP/2, the PUSH_PROMISE does not reference a stream; it contains a Push
ID. The Push ID uniquely identifies a server push (see <xref target="frame-push-promise"/>).
This allows a server to fulfill promises in the order that best suits its needs.</t>

<t>When a server later fulfills a promise, the server push response is conveyed on
a push stream.  A push stream is a server-initiated, unidirectional stream.  A
push stream always begins with a header (see <xref target="fig-push-stream-header"/>) that
identifies the Push ID of the promise that it fulfills, encoded as a
variable-length integer.</t>

<figure title="Push Stream Header" anchor="fig-push-stream-header"><artwork><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Push ID (i)                         ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>A server SHOULD use Push IDs sequentially, starting at 0.  A client uses the
MAX_PUSH_ID frame (<xref target="frame-max-push-id"/>) to limit the number of pushes that a
server can promise.  A client MUST treat receipt of a push stream with a Push ID
that is greater than the maximum Push ID as a connection error of type
HTTP_PUSH_LIMIT_EXCEEDED.</t>

<t>Each Push ID MUST only be used once in a push stream header.  If a push stream
header includes a Push ID that was used in another push stream header, the
client MUST treat this as a connection error of type HTTP_DUPLICATE_PUSH.  The
same Push ID can be used in multiple PUSH_PROMISE frames (see
<xref target="frame-push-promise"/>).</t>

<t>After the push stream header, a push contains a response (<xref target="request-response"/>),
with response headers, a response body (if any) carried by DATA frames, then
trailers (if any) carried by HEADERS frames.</t>

<t>If a promised server push is not needed by the client, the client SHOULD send a
CANCEL_PUSH frame; if the push stream is already open, a QUIC STOP_SENDING frame
with an appropriate error code can be used instead (e.g., HTTP_PUSH_REFUSED,
HTTP_PUSH_ALREADY_IN_CACHE; see <xref target="errors"/>).  This asks the server not to
transfer the data and indicates that it will be discarded upon receipt.</t>

</section>
</section>
<section anchor="http-framing-layer" title="HTTP Framing Layer">

<t>Frames are used on each stream.  This section describes HTTP framing in QUIC and
highlights some differences from HTTP/2 framing.  For more detail on differences
from HTTP/2, see <xref target="h2-frames"/>.</t>

<section anchor="frame-layout" title="Frame Layout">

<t>All frames have the following format:</t>

<figure title="HTTP/QUIC frame format" anchor="fig-frame"><artwork type="drawing"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           Length (i)                        ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Type (8)   |   Flags (8)   |       Frame Payload (*)     ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>A frame includes the following fields:</t>

<t><list style="hanging">
  <t hangText='Length:'>
  A variable-length integer that describes the length of the Frame Payload.
This length does not include the frame header.</t>
  <t hangText='Type:'>
  An 8-bit type for the frame.</t>
  <t hangText='Flags:'>
  An 8-bit field containing flags.  The Type field determines the semantics of
flags.</t>
  <t hangText='Frame Payload:'>
  A payload, the semantics of which are determined by the Type field.</t>
</list></t>

</section>
<section anchor="frames" title="Frame Definitions">

<section anchor="frame-data" title="DATA">

<t>DATA frames (type=0x0) convey arbitrary, variable-length sequences of octets
associated with an HTTP request or response payload.</t>

<t>The DATA frame defines no flags.</t>

<t>DATA frames MUST be associated with an HTTP request or response.  If a DATA
frame is received on either control stream, the recipient MUST respond with a
connection error (<xref target="errors"/>) of type HTTP_WRONG_STREAM.</t>

<t>DATA frames MUST contain a non-zero-length payload.  If a DATA frame is received
with a payload length of zero, the recipient MUST respond with a stream error
(<xref target="errors"/>) of type HTTP_MALFORMED_FRAME.</t>

</section>
<section anchor="frame-headers" title="HEADERS">

<t>The HEADERS frame (type=0x1) is used to carry a header block, compressed using
HPACK <xref target="header-compression"/>.</t>

<t>No flags are defined for the HEADERS frame.</t>

<t>A HEADERS frame with any flags set MUST be treated as a connection error of type
HTTP_MALFORMED_FRAME.</t>

</section>
<section anchor="frame-priority" title="PRIORITY">

<t>The PRIORITY (type=0x02) frame specifies the sender-advised priority of a stream
and is substantially different in format from <xref target="RFC7540"/>.  In order to ensure
that prioritization is processed in a consistent order, PRIORITY frames MUST be
sent on the control stream.  A PRIORITY frame sent on any other stream MUST be
treated as a HTTP_WRONG_STREAM error.</t>

<t>The format has been modified to accommodate not being sent on a request stream,
to allow for identification of server pushes, and the larger stream ID space of
QUIC.  The semantics of the Stream Dependency, Weight, and E flag are otherwise
the same as in HTTP/2.</t>

<t>The flags defined are:</t>

<t><list style="hanging">
  <t hangText='PUSH_PRIORITIZED (0x04):'>
  Indicates that the Prioritized Stream is a server push rather than a
request.</t>
  <t hangText='PUSH_DEPENDENT (0x02):'>
  Indicates a dependency on a server push.</t>
  <t hangText='E (0x01):'>
  Indicates that the stream dependency is exclusive (see <xref target="RFC7540"/>, Section
5.3).</t>
</list></t>

<figure title="PRIORITY frame payload" anchor="fig-priority"><artwork type="drawing"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                 Prioritized Request ID (i)                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  Stream Dependency ID (i)                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Weight (8)  |
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>The PRIORITY frame payload has the following fields:</t>

<t><list style="hanging">
  <t hangText='Prioritized Request ID:'>
  A variable-length integer that identifies a request.  This contains
the Stream ID of a request stream when the PUSH_PRIORITIZED flag is clear,
or a Push ID when the PUSH_PRIORITIZED flag is set.</t>
  <t hangText='Stream Dependency ID:'>
  A variable-length integer that identifies a dependent request.  This
contains the Stream ID of a request stream when the PUSH_DEPENDENT flag is
clear, or a Push ID when the PUSH_DEPENDENT flag is set.  A request Stream
ID of 0 indicates a dependency on the root stream. For details of
dependencies, see <xref target="priority"/> and <xref target="RFC7540"/>, Section 5.3.</t>
  <t hangText='Weight:'>
  An unsigned 8-bit integer representing a priority weight for the stream (see
<xref target="RFC7540"/>, Section 5.3). Add one to the value to obtain a weight between
1 and 256.</t>
</list></t>

<t>A PRIORITY frame identifies a request to prioritize, and a request upon which
that request is dependent.  A Prioritized Request ID or Stream Dependency ID
identifies a client-initiated request using the corresponding stream ID when the
corresponding PUSH_PRIORITIZED or PUSH_DEPENDENT flag is not set.  Setting the
PUSH_PRIORITIZED or PUSH_DEPENDENT flag causes the Prioritized Request ID or
Stream Dependency ID (respectively) to identify a server push using a Push ID
(see <xref target="frame-push-promise"/> for details).</t>

<t>A PRIORITY frame MAY identify a Stream Dependency ID using a Stream ID of 0; as
in <xref target="RFC7540"/>, this makes the request dependent on the root of the dependency
tree.</t>

<t>A PRIORITY frame MUST identify a client-initiated, bidirectional stream.  A
server MUST treat receipt of PRIORITY frame with a Stream ID of any other type
as a connection error of type HTTP_MALFORMED_FRAME.</t>

<t>Stream ID 0 cannot be reprioritized. A Prioritized Request ID that identifies
Stream 0 MUST be treated as a connection error of type HTTP_MALFORMED_FRAME.</t>

<t>A PRIORITY frame that does not reference a request MUST be treated as a
HTTP_MALFORMED_FRAME error, unless it references Stream ID 0.  A PRIORITY
that sets a PUSH_PRIORITIZED or PUSH_DEPENDENT flag, but then references a
non-existent Push ID MUST be treated as a HTTP_MALFORMED_FRAME error.</t>

<t>A PRIORITY frame MUST contain only the identified fields.  A PRIORITY frame that
contains more or fewer fields, or a PRIORITY frame that includes a truncated
integer encoding MUST be treated as a connection error of type
HTTP_MALFORMED_FRAME.</t>

</section>
<section anchor="frame-cancel-push" title="CANCEL_PUSH">

<t>The CANCEL_PUSH frame (type=0x3) is used to request cancellation of server push
prior to the push stream being created.  The CANCEL_PUSH frame identifies a
server push request by Push ID (see <xref target="frame-push-promise"/>) using a
variable-length integer.</t>

<t>When a server receives this frame, it aborts sending the response for the
identified server push.  If the server has not yet started to send the server
push, it can use the receipt of a CANCEL_PUSH frame to avoid opening a
stream.  If the push stream has been opened by the server, the server SHOULD
sent a QUIC RST_STREAM frame on those streams and cease transmission of the
response.</t>

<t>A server can send this frame to indicate that it won’t be sending a response
prior to creation of a push stream.  Once the push stream has been created,
sending CANCEL_PUSH has no effect on the state of the push stream.  A QUIC
RST_STREAM frame SHOULD be used instead to cancel transmission of the server
push response.</t>

<t>A CANCEL_PUSH frame is sent on the control stream.  Sending a CANCEL_PUSH frame
on a stream other than the control stream MUST be treated as a stream error of
type HTTP_WRONG_STREAM.</t>

<t>The CANCEL_PUSH frame has no defined flags.</t>

<t>The CANCEL_PUSH frame carries a Push ID encoded as a variable-length integer.
The Push ID identifies the server push that is being cancelled (see
<xref target="frame-push-promise"/>).</t>

<t>If the client receives a CANCEL_PUSH frame, that frame might identify a Push ID
that has not yet been mentioned by a PUSH_PROMISE frame.</t>

<t>An endpoint MUST treat a CANCEL_PUSH frame which does not contain exactly one
properly-formatted variable-length integer as a connection error of type
HTTP_MALFORMED_FRAME.</t>

</section>
<section anchor="frame-settings" title="SETTINGS">

<t>The SETTINGS frame (type=0x4) conveys configuration parameters that affect how
endpoints communicate, such as preferences and constraints on peer behavior, and
is different from <xref target="RFC7540"/>. Individually, a SETTINGS parameter can also be
referred to as a “setting”.</t>

<t>SETTINGS parameters are not negotiated; they describe characteristics of the
sending peer, which can be used by the receiving peer. However, a negotiation
can be implied by the use of SETTINGS – a peer uses SETTINGS to advertise a set
of supported values. The recipient can then choose which entries from this list
are also acceptable and proceed with the value it has chosen. (This choice could
be announced in a field of an extension frame, or in its own value in SETTINGS.)</t>

<t>Different values for the same parameter can be advertised by each peer. For
example, a client might be willing to consume very large response headers,
while servers are more cautious about request size.</t>

<t>Parameters MUST NOT occur more than once.  A receiver MAY treat the presence of
the same parameter more than once as a connection error of type
HTTP_MALFORMED_FRAME.</t>

<t>The SETTINGS frame defines no flags.</t>

<t>The payload of a SETTINGS frame consists of zero or more parameters, each
consisting of an unsigned 16-bit setting identifier and a length-prefixed binary
value.</t>

<figure title="SETTINGS value format" anchor="fig-ext-settings"><artwork type="drawing"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Identifier (16)       |            Length (i)       ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          Contents (?)                       ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>A zero-length content indicates that the setting value is a Boolean and true.
False is indicated by the absence of the setting.</t>

<t>Non-zero-length values MUST be compared against the remaining length of the
SETTINGS frame.  Any value which purports to cross the end of the frame MUST
cause the SETTINGS frame to be considered malformed and trigger a connection
error of type HTTP_MALFORMED_FRAME.</t>

<t>An implementation MUST ignore the contents for any SETTINGS identifier it does
not understand.</t>

<t>SETTINGS frames always apply to a connection, never a single stream.  A SETTINGS
frame MUST be sent as the first frame of either control stream (see
<xref target="stream-mapping"/>) by each peer, and MUST NOT be sent subsequently or on any
other stream. If an endpoint receives an SETTINGS frame on a different stream,
the endpoint MUST respond with a connection error of type HTTP_WRONG_STREAM.  If
an endpoint receives a second SETTINGS frame, the endpoint MUST respond with a
connection error of type HTTP_MALFORMED_FRAME.</t>

<t>The SETTINGS frame affects connection state. A badly formed or incomplete
SETTINGS frame MUST be treated as a connection error (<xref target="errors"/>) of type
HTTP_MALFORMED_FRAME.</t>

<section anchor="integer-encoding" title="Integer encoding">

<t>Settings which are integers use the QUIC variable-length integer encoding.</t>

</section>
<section anchor="settings-parameters" title="Defined SETTINGS Parameters">

<t>The following settings are defined in HTTP/QUIC:</t>

<t><list style="hanging">
  <t hangText='SETTINGS_HEADER_TABLE_SIZE (0x1):'>
  An integer with a maximum value of 2^30 - 1.  This value MUST be zero.</t>
  <t hangText='SETTINGS_MAX_HEADER_LIST_SIZE (0x6):'>
  An integer with a maximum value of 2^30 - 1</t>
</list></t>

</section>
<section anchor="usage-in-0-rtt" title="Usage in 0-RTT">

<t>When a 0-RTT QUIC connection is being used, the client’s initial requests will
be sent before the arrival of the server’s SETTINGS frame.  Clients SHOULD
cache at least the following settings about servers:</t>

<t><list style="symbols">
  <t>SETTINGS_HEADER_TABLE_SIZE</t>
  <t>SETTINGS_MAX_HEADER_LIST_SIZE</t>
</list></t>

<t>Clients MUST comply with cached settings until the server’s current settings are
received.  If a client does not have cached values, it SHOULD assume the
following values:</t>

<t><list style="symbols">
  <t>SETTINGS_HEADER_TABLE_SIZE:  0 octets</t>
  <t>SETTINGS_MAX_HEADER_LIST_SIZE:  16,384 octets</t>
</list></t>

<t>Servers MAY continue processing data from clients which exceed its current
configuration during the initial flight.  In this case, the client MUST apply
the new settings immediately upon receipt.</t>

<t>If the connection is closed because these or other constraints were violated
during the 0-RTT flight (e.g. with HTTP_HPACK_DECOMPRESSION_FAILED), clients MAY
establish a new connection and retry any 0-RTT requests using the settings sent
by the server on the closed connection. (This assumes that only requests that
are safe to retry are sent in 0-RTT.) If the connection was closed before the
SETTINGS frame was received, clients SHOULD discard any cached values and use
the defaults above on the next connection.</t>

</section>
</section>
<section anchor="frame-push-promise" title="PUSH_PROMISE">

<t>The PUSH_PROMISE frame (type=0x05) is used to carry a request header set from
server to client, as in HTTP/2.  The PUSH_PROMISE frame defines no flags.</t>

<figure title="PUSH_PROMISE frame payload" anchor="fig-push-promise"><artwork type="drawing"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          Push ID (i)                        ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       Header Block (*)                      ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>The payload consists of:</t>

<t><list style="hanging">
  <t hangText='Push ID:'>
  A variable-length integer that identifies the server push request.  A push ID
is used in push stream header (<xref target="server-push"/>), CANCEL_PUSH frames
(<xref target="frame-cancel-push"/>), and PRIORITY frames (<xref target="frame-priority"/>).</t>
  <t hangText='Header Block:'>
  HPACK-compressed request headers for the promised response.</t>
</list></t>

<t>A server MUST NOT use a Push ID that is larger than the client has provided in a
MAX_PUSH_ID frame (<xref target="frame-max-push-id"/>).  A client MUST treat receipt of a
PUSH_PROMISE that contains a larger Push ID than the client has advertised as a
connection error of type HTTP_MALFORMED_FRAME.</t>

<t>A server MAY use the same Push ID in multiple PUSH_PROMISE frames.  This allows
the server to use the same server push in response to multiple concurrent
requests.  Referencing the same server push ensures that a PUSH_PROMISE can be
made in relation to every response in which server push might be needed without
duplicating pushes.</t>

<t>A server that uses the same Push ID in multiple PUSH_PROMISE frames MUST include
the same header fields each time.  The octets of the header block MAY be
different due to differing encoding, but the header fields and their values MUST
be identical.  Note that ordering of header fields is significant.  A client
MUST treat receipt of a PUSH_PROMISE with conflicting header field values for
the same Push ID as a connection error of type HTTP_MALFORMED_FRAME.</t>

<t>Allowing duplicate references to the same Push ID is primarily to reduce
duplication caused by concurrent requests.  A server SHOULD avoid reusing a Push
ID over a long period.  Clients are likely to consume server push responses and
not retain them for reuse over time.  Clients that see a PUSH_PROMISE that uses
a Push ID that they have since consumed and discarded are forced to ignore the
PUSH_PROMISE.</t>

</section>
<section anchor="frame-goaway" title="GOAWAY">

<t>The GOAWAY frame (type=0x7) is used to initiate graceful shutdown of a
connection by a server.  GOAWAY allows a server to stop accepting new requests
while still finishing processing of previously received requests.  This enables
administrative actions, like server maintenance.  GOAWAY by itself does not
close a connection.</t>

<t>The GOAWAY frame does not define any flags, and the payload is a QUIC Stream ID
for a client-initiated, bidirectional stream encoded as a variable-length
integer.</t>

<t>Clients do not need to send GOAWAY to initiate a graceful shutdown; they simply
stop making new requests.  A server MUST treat receipt of a GOAWAY frame as a
connection error (<xref target="errors"/>) of type HTTP_UNEXPECTED_GOAWAY.</t>

<t>A client MUST treat receipt of a GOAWAY frame containing a Stream ID of any
other type as a connection error of type HTTP_MALFORMED_FRAME.</t>

<t>The GOAWAY frame applies to the connection, not a specific stream.  An endpoint
MUST treat a GOAWAY frame on a stream other than the control stream as a
connection error (<xref target="errors"/>) of type HTTP_WRONG_STREAM.</t>

<t>New client requests might already have been sent before the client receives the
server’s GOAWAY frame.  The GOAWAY frame contains the Stream ID of the last
client-initiated request that was or might be processed in this connection,
which enables client and server to agree on which requests were accepted prior
to the connection shutdown.  This identifier MAY be lower than the stream limit
identified by a QUIC MAX_STREAM_ID frame, and MAY be zero if no requests were
processed.  Servers SHOULD NOT increase the MAX_STREAM_ID limit after sending a
GOAWAY frame.</t>

<t><list style="hanging">
  <t hangText='Note:'>
  In this context, “processed” means that some data from the stream was
passed to some higher layer of software that might have taken some action as
a result.</t>
</list></t>

<t>Once sent, the server will refuse requests sent on streams with an identifier
higher than the included last Stream ID.  Clients MUST NOT send new requests on
the connection after receiving GOAWAY, although requests might already be in
transit. A new connection can be established for new requests.</t>

<t>If the client has sent requests on streams with a higher Stream ID than
indicated in the GOAWAY frame, those requests were not and will not be
processed.  Endpoints SHOULD reset any streams above this ID with the error code
HTTP_REQUEST_CANCELLED.  Servers MAY also reset streams below the indicated ID
with HTTP_REQUEST_CANCELLED if the associated requests were not processed.
Servers MUST NOT use the HTTP_REQUEST_CANCELLED status for requests which were
partially or fully processed.</t>

<t>The client can treat requests cancelled by the server as though they had never
been sent at all, thereby allowing them to be retried later on a new connection.
If a stream is cancelled after receiving a complete response, the client MAY
ignore the cancellation and use the response.  However, if a stream is cancelled
after receiving a partial response, the response SHOULD NOT be used.
Automatically retrying such requests is not possible, unless this is otherwise
permitted (e.g., idempotent actions like GET, PUT, or DELETE).  Requests on
Stream IDs less than or equal to the Stream ID in the GOAWAY frame might have
been processed; their status cannot be known until they are completed
successfully, reset individually, or the connection terminates.</t>

<t>Servers SHOULD send a GOAWAY frame when the closing of a connection is known
in advance, even if the advance notice is small, so that the remote peer can
know whether a stream has been partially processed or not.  For example, if an
HTTP client sends a POST at the same time that a server closes a QUIC
connection, the client cannot know if the server started to process that POST
request if the server does not send a GOAWAY frame to indicate what streams it
might have acted on.</t>

<t>For unexpected closures caused by error conditions, a QUIC CONNECTION_CLOSE or
APPLICATION_CLOSE frame MUST be used.  However, a GOAWAY MAY be sent first to
provide additional detail to clients and to allow the client to retry requests.
Including the GOAWAY frame in the same packet as the QUIC CONNECTION_CLOSE or
APPLICATION_CLOSE frame improves the chances of the frame being received by
clients.</t>

<t>If a connection terminates without a GOAWAY frame, the last Stream ID is
effectively the highest possible Stream ID (as determined by QUIC’s
MAX_STREAM_ID).</t>

<t>An endpoint MAY send multiple GOAWAY frames if circumstances change. For
instance, an endpoint that sends GOAWAY without an error code during graceful
shutdown could subsequently encounter an error condition.  The last stream
identifier from the last GOAWAY frame received indicates which streams could
have been acted upon.  A server MUST NOT increase the value they send in the
last Stream ID, since clients might already have retried unprocessed requests on
another connection.</t>

<t>A client that is unable to retry requests loses all requests that are in flight
when the server closes the connection.  A server that is attempting to
gracefully shut down a connection SHOULD send an initial GOAWAY frame with the
last Stream ID set to the current value of QUIC’s MAX_STREAM_ID and SHOULD NOT
increase the MAX_STREAM_ID thereafter.  This signals to the client that a
shutdown is imminent and that initiating further requests is prohibited.  After
allowing time for any in-flight requests (at least one round-trip time), the
server MAY send another GOAWAY frame with an updated last Stream ID.  This
ensures that a connection can be cleanly shut down without losing requests.</t>

<t>Once all requests on streams at or below the identified stream number have been
completed or cancelled, and all promised server push responses associated with
those requests have been completed or cancelled, the connection can be closed
using an Immediate Close (see <xref target="QUIC-TRANSPORT"/>).  An endpoint that completes a
graceful shutdown SHOULD use the QUIC APPLICATION_CLOSE frame with the
HTTP_NO_ERROR code.</t>

</section>
<section anchor="frame-max-push-id" title="MAX_PUSH_ID">

<t>The MAX_PUSH_ID frame (type=0xD) is used by clients to control the number of
server pushes that the server can initiate.  This sets the maximum value for a
Push ID that the server can use in a PUSH_PROMISE frame.  Consequently, this
also limits the number of push streams that the server can initiate in addition
to the limit set by the QUIC MAX_STREAM_ID frame.</t>

<t>The MAX_PUSH_ID frame is always sent on a control stream.  Receipt of a
MAX_PUSH_ID frame on any other stream MUST be treated as a connection error of
type HTTP_WRONG_STREAM.</t>

<t>A server MUST NOT send a MAX_PUSH_ID frame.  A client MUST treat the receipt of
a MAX_PUSH_ID frame as a connection error of type HTTP_MALFORMED_FRAME.</t>

<t>The maximum Push ID is unset when a connection is created, meaning that a server
cannot push until it receives a MAX_PUSH_ID frame.  A client that wishes to
manage the number of promised server pushes can increase the maximum Push ID by
sending a MAX_PUSH_ID frame as the server fulfills or cancels server pushes.</t>

<t>The MAX_PUSH_ID frame has no defined flags.</t>

<t>The MAX_PUSH_ID frame carries a single variable-length integer that identifies
the maximum value for a Push ID that the server can use (see
<xref target="frame-push-promise"/>).  A MAX_PUSH_ID frame cannot reduce the maximum Push ID;
receipt of a MAX_PUSH_ID that contains a smaller value than previously received
MUST be treated as a connection error of type HTTP_MALFORMED_FRAME.</t>

<t>A server MUST treat a MAX_PUSH_ID frame payload that does not contain a single
variable-length integer as a connection error of type
HTTP_MALFORMED_FRAME.</t>

</section>
</section>
</section>
<section anchor="connection-management" title="Connection Management">

<t>QUIC connections are persistent.  All of the considerations in Section 9.1 of
<xref target="RFC7540"/> apply to the management of QUIC connections.</t>

<t>HTTP clients are expected to use QUIC PING frames to keep connections open.
Servers SHOULD NOT use PING frames to keep a connection open.  A client SHOULD
NOT use PING frames for this purpose unless there are responses outstanding for
requests or server pushes.  If the client is not expecting a response from the
server, allowing an idle connection to time out (based on the idle_timeout
transport parameter) is preferred over expending effort maintaining a connection
that might not be needed.  A gateway MAY use PING to maintain connections in
anticipation of need rather than incur the latency cost of connection
establishment to servers.</t>

</section>
<section anchor="errors" title="Error Handling">

<t>QUIC allows the application to abruptly terminate (reset) individual streams or
the entire connection when an error is encountered.  These are referred to as
“stream errors” or “connection errors” and are described in more detail in
<xref target="QUIC-TRANSPORT"/>.</t>

<t>This section describes HTTP-specific error codes which can be used to express
the cause of a connection or stream error.</t>

<section anchor="http-error-codes" title="HTTP/QUIC Error Codes">

<t>The following error codes are defined for use in QUIC RST_STREAM, STOP_SENDING,
and CONNECTION_CLOSE frames when using HTTP/QUIC.</t>

<t><list style="hanging">
  <t hangText='STOPPING (0x00):'>
  This value is reserved by the transport to be used in response to QUIC
STOP_SENDING frames.</t>
  <t hangText='HTTP_NO_ERROR (0x01):'>
  No error.  This is used when the connection or stream needs to be closed, but
there is no error to signal.</t>
  <t hangText='HTTP_PUSH_REFUSED (0x02):'>
  The server has attempted to push content which the client will not accept
on this connection.</t>
  <t hangText='HTTP_INTERNAL_ERROR (0x03):'>
  An internal error has occurred in the HTTP stack.</t>
  <t hangText='HTTP_PUSH_ALREADY_IN_CACHE (0x04):'>
  The server has attempted to push content which the client has cached.</t>
  <t hangText='HTTP_REQUEST_CANCELLED (0x05):'>
  The client no longer needs the requested data.</t>
  <t hangText='HTTP_HPACK_DECOMPRESSION_FAILED (0x06):'>
  HPACK failed to decompress a frame and cannot continue.</t>
  <t hangText='HTTP_CONNECT_ERROR (0x07):'>
  The connection established in response to a CONNECT request was reset or
abnormally closed.</t>
  <t hangText='HTTP_EXCESSIVE_LOAD (0x08):'>
  The endpoint detected that its peer is exhibiting a behavior that might be
generating excessive load.</t>
  <t hangText='HTTP_VERSION_FALLBACK (0x09):'>
  The requested operation cannot be served over HTTP/QUIC.  The peer should
retry over HTTP/2.</t>
  <t hangText='HTTP_WRONG_STREAM (0x0A):'>
  A frame was received on stream where it is not permitted.</t>
  <t hangText='HTTP_PUSH_LIMIT_EXCEEDED (0x0B):'>
  A Push ID greater than the current maximum Push ID was referenced.</t>
  <t hangText='HTTP_DUPLICATE_PUSH (0x0C):'>
  A Push ID was referenced in two different stream headers.</t>
  <t hangText='HTTP_MALFORMED_FRAME (0x01XX):'>
  An error in a specific frame type.  The frame type is included as the last
octet of the error code.  For example, an error in a MAX_PUSH_ID frame would
be indicated with the code (0x10D).</t>
</list></t>

</section>
</section>
<section anchor="considerations-for-transitioning-from-http2" title="Considerations for Transitioning from HTTP/2">

<t>HTTP/QUIC is strongly informed by HTTP/2, and bears many similarities.  This
section describes the approach taken to design HTTP/QUIC, points out important
differences from HTTP/2, and describes how to map HTTP/2 extensions into
HTTP/QUIC.</t>

<t>HTTP/QUIC begins from the premise that HTTP/2 code reuse is a useful feature,
but not a hard requirement.  HTTP/QUIC departs from HTTP/2 primarily where
necessary to accommodate the differences in behavior between QUIC and TCP (lack
of ordering, support for streams).  We intend to avoid gratuitous changes which
make it difficult or impossible to build extensions with the same semantics
applicable to both protocols at once.</t>

<t>These departures are noted in this section.</t>

<section anchor="h2-streams" title="Streams">

<t>HTTP/QUIC permits use of a larger number of streams (2^62-1) than HTTP/2.  The
considerations about exhaustion of stream identifier space apply, though the
space is significantly larger such that it is likely that other limits in QUIC
are reached first, such as the limit on the connection flow control window.</t>

</section>
<section anchor="h2-frames" title="HTTP Frame Types">

<t>Many framing concepts from HTTP/2 can be elided away on QUIC, because the
transport deals with them. Because frames are already on a stream, they can omit
the stream number. Because frames do not block multiplexing (QUIC’s multiplexing
occurs below this layer), the support for variable-maximum-length packets can be
removed. Because stream termination is handled by QUIC, an END_STREAM flag is
not required.</t>

<t>Frame payloads are largely drawn from <xref target="RFC7540"/>. However, QUIC includes many
features (e.g. flow control) which are also present in HTTP/2. In these cases,
the HTTP mapping does not re-implement them. As a result, several HTTP/2 frame
types are not required in HTTP/QUIC. Where an HTTP/2-defined frame is no longer
used, the frame ID has been reserved in order to maximize portability between
HTTP/2 and HTTP/QUIC implementations. However, even equivalent frames between
the two mappings are not identical.</t>

<t>Many of the differences arise from the fact that HTTP/2 provides an absolute
ordering between frames across all streams, while QUIC provides this guarantee
on each stream only.  As a result, if a frame type makes assumptions that frames
from different streams will still be received in the order sent, HTTP/QUIC will
break them.</t>

<t>For example, implicit in the HTTP/2 prioritization scheme is the notion of
in-order delivery of priority changes (i.e., dependency tree mutations): since
operations on the dependency tree such as reparenting a subtree are not
commutative, both sender and receiver must apply them in the same order to
ensure that both sides have a consistent view of the stream dependency tree.
HTTP/2 specifies priority assignments in PRIORITY frames and (optionally) in
HEADERS frames. To achieve in-order delivery of priority changes in HTTP/QUIC,
PRIORITY frames are sent on the control stream and the PRIORITY section is
removed from the HEADERS frame.</t>

<t>Frame type definitions in HTTP/QUIC often use the QUIC variable-length integer
encoding.  In particular, Stream IDs use this encoding, which allow for a larger
range of possible values than the encoding used in HTTP/2.  Some frames in
HTTP/QUIC use an identifier rather than a Stream ID (e.g. Push IDs in PRIORITY
frames). Redefinition of the encoding of extension frame types might be
necessary if the encoding includes a Stream ID.</t>

<t>Other than this issue, frame type HTTP/2 extensions are typically portable to
QUIC simply by replacing Stream 0 in HTTP/2 with Stream 2 or 3 in HTTP/QUIC.
HTTP/QUIC extensions will not assume ordering, but would not be harmed by
ordering, and would be portable to HTTP/2 in the same manner.</t>

<t>Below is a listing of how each HTTP/2 frame type is mapped:</t>

<t><list style="hanging">
  <t hangText='DATA (0x0):'>
  Padding is not defined in HTTP/QUIC frames.  See <xref target="frame-data"/>.</t>
  <t hangText='HEADERS (0x1):'>
  As described above, the PRIORITY region of HEADERS is not supported. A
separate PRIORITY frame MUST be used. Padding is not defined in HTTP/QUIC
frames.  See <xref target="frame-headers"/>.</t>
  <t hangText='PRIORITY (0x2):'>
  As described above, the PRIORITY frame is sent on the control stream and can
reference either a Stream ID or a Push ID.  See <xref target="frame-priority"/>.</t>
  <t hangText='RST_STREAM (0x3):'>
  RST_STREAM frames do not exist, since QUIC provides stream lifecycle
management.  The same code point is used for the CANCEL_PUSH frame
(<xref target="frame-cancel-push"/>).</t>
  <t hangText='SETTINGS (0x4):'>
  SETTINGS frames are sent only at the beginning of the connection.  See
<xref target="frame-settings"/> and <xref target="h2-settings"/>.</t>
  <t hangText='PUSH_PROMISE (0x5):'>
  The PUSH_PROMISE does not reference a stream; instead the push stream
references the PUSH_PROMISE frame using a Push ID.  See
<xref target="frame-push-promise"/>.</t>
  <t hangText='PING (0x6):'>
  PING frames do not exist, since QUIC provides equivalent functionality.</t>
  <t hangText='GOAWAY (0x7):'>
  GOAWAY is sent only from server to client and does not contain an error code.
See <xref target="frame-goaway"/>.</t>
  <t hangText='WINDOW_UPDATE (0x8):'>
  WINDOW_UPDATE frames do not exist, since QUIC provides flow control.</t>
  <t hangText='CONTINUATION (0x9):'>
  CONTINUATION frames do not exist; instead, larger HEADERS/PUSH_PROMISE
frames than HTTP/2 are permitted, and HEADERS frames can be used in series.</t>
</list></t>

<t>Frame types defined by extensions to HTTP/2 need to be separately registered for
HTTP/QUIC if still applicable.  The IDs of frames defined in <xref target="RFC7540"/> have
been reserved for simplicity.  See <xref target="iana-frames"/>.</t>

</section>
<section anchor="h2-settings" title="HTTP/2 SETTINGS Parameters">

<t>An important difference from HTTP/2 is that settings are sent once, at the
beginning of the connection, and thereafter cannot change.  This eliminates
many corner cases around synchronization of changes.</t>

<t>Some transport-level options that HTTP/2 specifies via the SETTINGS frame are
superseded by QUIC transport parameters in HTTP/QUIC. The HTTP-level options
that are retained in HTTP/QUIC have the same value as in HTTP/2.</t>

<t>Below is a listing of how each HTTP/2 SETTINGS parameter is mapped:</t>

<t><list style="hanging">
  <t hangText='SETTINGS_HEADER_TABLE_SIZE:'>
  See <xref target="settings-parameters"/>.</t>
  <t hangText='SETTINGS_ENABLE_PUSH:'>
  This is removed in favor of the MAX_PUSH_ID which provides a more granular
control over server push.</t>
  <t hangText='SETTINGS_MAX_CONCURRENT_STREAMS:'>
  QUIC controls the largest open Stream ID as part of its flow control logic.
Specifying SETTINGS_MAX_CONCURRENT_STREAMS in the SETTINGS frame is an error.</t>
  <t hangText='SETTINGS_INITIAL_WINDOW_SIZE:'>
  QUIC requires both stream and connection flow control window sizes to be
specified in the initial transport handshake.  Specifying
SETTINGS_INITIAL_WINDOW_SIZE in the SETTINGS frame is an error.</t>
  <t hangText='SETTINGS_MAX_FRAME_SIZE:'>
  This setting has no equivalent in HTTP/QUIC.  Specifying it in the SETTINGS
frame is an error.</t>
  <t hangText='SETTINGS_MAX_HEADER_LIST_SIZE:'>
  See <xref target="settings-parameters"/>.</t>
</list></t>

<t>Settings need to be defined separately for HTTP/2 and HTTP/QUIC.  The IDs of
settings defined in <xref target="RFC7540"/> have been reserved for simplicity.  See
<xref target="iana-settings"/>.</t>

</section>
<section anchor="http2-error-codes" title="HTTP/2 Error Codes">

<t>QUIC has the same concepts of “stream” and “connection” errors that HTTP/2
provides. However, because the error code space is shared between multiple
components, there is no direct portability of HTTP/2 error codes.</t>

<t>The HTTP/2 error codes defined in Section 7 of <xref target="RFC7540"/> map to the HTTP over
QUIC error codes as follows:</t>

<t><list style="hanging">
  <t hangText='NO_ERROR (0x0):'>
  HTTP_NO_ERROR in <xref target="http-error-codes"/>.</t>
  <t hangText='PROTOCOL_ERROR (0x1):'>
  No single mapping.  See new HTTP_MALFORMED_FRAME error codes defined in
<xref target="http-error-codes"/>.</t>
  <t hangText='INTERNAL_ERROR (0x2):'>
  HTTP_INTERNAL_ERROR in <xref target="http-error-codes"/>.</t>
  <t hangText='FLOW_CONTROL_ERROR (0x3):'>
  Not applicable, since QUIC handles flow control.  Would provoke a
QUIC_FLOW_CONTROL_RECEIVED_TOO_MUCH_DATA from the QUIC layer.</t>
  <t hangText='SETTINGS_TIMEOUT (0x4):'>
  Not applicable, since no acknowledgement of SETTINGS is defined.</t>
  <t hangText='STREAM_CLOSED (0x5):'>
  Not applicable, since QUIC handles stream management.  Would provoke a
QUIC_STREAM_DATA_AFTER_TERMINATION from the QUIC layer.</t>
  <t hangText='FRAME_SIZE_ERROR (0x6)'>
  No single mapping.  See new error codes defined in <xref target="http-error-codes"/>.</t>
  <t hangText='REFUSED_STREAM (0x7):'>
  Not applicable, since QUIC handles stream management.  Would provoke a
QUIC_TOO_MANY_OPEN_STREAMS from the QUIC layer.</t>
  <t hangText='CANCEL (0x8):'>
  HTTP_REQUEST_CANCELLED in <xref target="http-error-codes"/>.</t>
  <t hangText='COMPRESSION_ERROR (0x9):'>
  HTTP_HPACK_DECOMPRESSION_FAILED in <xref target="http-error-codes"/>.</t>
  <t hangText='CONNECT_ERROR (0xa):'>
  HTTP_CONNECT_ERROR in <xref target="http-error-codes"/>.</t>
  <t hangText='ENHANCE_YOUR_CALM (0xb):'>
  HTTP_EXCESSIVE_LOAD in <xref target="http-error-codes"/>.</t>
  <t hangText='INADEQUATE_SECURITY (0xc):'>
  Not applicable, since QUIC is assumed to provide sufficient security on all
connections.</t>
  <t hangText='HTTP_1_1_REQUIRED (0xd):'>
  HTTP_VERSION_FALLBACK in <xref target="http-error-codes"/>.</t>
</list></t>

<t>Error codes need to be defined for HTTP/2 and HTTP/QUIC separately.  See
<xref target="iana-error-codes"/>.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The security considerations of HTTP over QUIC should be comparable to those of
HTTP/2.</t>

<t>The modified SETTINGS format contains nested length elements, which could pose
a security risk to an uncautious implementer.  A SETTINGS frame parser MUST
ensure that the length of the frame exactly matches the length of the settings
it contains.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="registration-of-httpquic-identification-string" title="Registration of HTTP/QUIC Identification String">

<t>This document creates a new registration for the identification of HTTP/QUIC in
the “Application Layer Protocol Negotiation (ALPN) Protocol IDs” registry
established in <xref target="RFC7301"/>.</t>

<t>The “hq” string identifies HTTP/QUIC:</t>

<t><list style="hanging">
  <t hangText='Protocol:'>
  HTTP over QUIC</t>
  <t hangText='Identification Sequence:'>
  0x68 0x71 (“hq”)</t>
  <t hangText='Specification:'>
  This document</t>
</list></t>

</section>
<section anchor="registration-of-quic-version-hint-alt-svc-parameter" title="Registration of QUIC Version Hint Alt-Svc Parameter">

<t>This document creates a new registration for version-negotiation hints in the
“Hypertext Transfer Protocol (HTTP) Alt-Svc Parameter” registry established in
<xref target="RFC7838"/>.</t>

<t><list style="hanging">
  <t hangText='Parameter:'>
  “quic”</t>
  <t hangText='Specification:'>
  This document, <xref target="alt-svc-version-hint"/></t>
</list></t>

</section>
<section anchor="iana-frames" title="Frame Types">

<t>This document establishes a registry for HTTP/QUIC frame type codes. The
“HTTP/QUIC Frame Type” registry manages an 8-bit space.  The “HTTP/QUIC Frame
Type” registry operates under either of the “IETF Review” or “IESG Approval”
policies <xref target="RFC8126"/> for values between 0x00 and 0xef, with values between 0xf0
and 0xff being reserved for Experimental Use.</t>

<t>While this registry is separate from the “HTTP/2 Frame Type” registry defined in
<xref target="RFC7540"/>, it is preferable that the assignments parallel each other.  If an
entry is present in only one registry, every effort SHOULD be made to avoid
assigning the corresponding value to an unrelated operation.</t>

<t>New entries in this registry require the following information:</t>

<t><list style="hanging">
  <t hangText='Frame Type:'>
  A name or label for the frame type.</t>
  <t hangText='Code:'>
  The 8-bit code assigned to the frame type.</t>
  <t hangText='Specification:'>
  A reference to a specification that includes a description of the frame
layout, its semantics, and flags that the frame type uses, including any parts
of the frame that are conditionally present based on the value of flags.</t>
</list></t>

<t>The entries in the following table are registered by this document.</t>

<texttable>
      <ttcol align='left'>Frame Type</ttcol>
      <ttcol align='center'>Code</ttcol>
      <ttcol align='left'>Specification</ttcol>
      <c>DATA</c>
      <c>0x0</c>
      <c><xref target="frame-data"/></c>
      <c>HEADERS</c>
      <c>0x1</c>
      <c><xref target="frame-headers"/></c>
      <c>PRIORITY</c>
      <c>0x2</c>
      <c><xref target="frame-priority"/></c>
      <c>CANCEL_PUSH</c>
      <c>0x3</c>
      <c><xref target="frame-cancel-push"/></c>
      <c>SETTINGS</c>
      <c>0x4</c>
      <c><xref target="frame-settings"/></c>
      <c>PUSH_PROMISE</c>
      <c>0x5</c>
      <c><xref target="frame-push-promise"/></c>
      <c>Reserved</c>
      <c>0x6</c>
      <c>N/A</c>
      <c>GOAWAY</c>
      <c>0x7</c>
      <c><xref target="frame-goaway"/></c>
      <c>Reserved</c>
      <c>0x8</c>
      <c>N/A</c>
      <c>Reserved</c>
      <c>0x9</c>
      <c>N/A</c>
      <c>MAX_PUSH_ID</c>
      <c>0xD</c>
      <c><xref target="frame-max-push-id"/></c>
</texttable>

</section>
<section anchor="iana-settings" title="Settings Parameters">

<t>This document establishes a registry for HTTP/QUIC settings.  The “HTTP/QUIC
Settings” registry manages a 16-bit space.  The “HTTP/QUIC Settings” registry
operates under the “Expert Review” policy <xref target="RFC8126"/> for values in the range
from 0x0000 to 0xefff, with values between and 0xf000 and 0xffff being reserved
for Experimental Use.  The designated experts are the same as those for the
“HTTP/2 Settings” registry defined in <xref target="RFC7540"/>.</t>

<t>While this registry is separate from the “HTTP/2 Settings” registry defined in
<xref target="RFC7540"/>, it is preferable that the assignments parallel each other.  If an
entry is present in only one registry, every effort SHOULD be made to avoid
assigning the corresponding value to an unrelated operation.</t>

<t>New registrations are advised to provide the following information:</t>

<t><list style="hanging">
  <t hangText='Name:'>
  A symbolic name for the setting.  Specifying a setting name is optional.</t>
  <t hangText='Code:'>
  The 16-bit code assigned to the setting.</t>
  <t hangText='Specification:'>
  An optional reference to a specification that describes the use of the
setting.</t>
</list></t>

<t>The entries in the following table are registered by this document.</t>

<texttable>
      <ttcol align='left'>Setting Name</ttcol>
      <ttcol align='center'>Code</ttcol>
      <ttcol align='left'>Specification</ttcol>
      <c>HEADER_TABLE_SIZE</c>
      <c>0x1</c>
      <c><xref target="settings-parameters"/></c>
      <c>Reserved</c>
      <c>0x2</c>
      <c>N/A</c>
      <c>Reserved</c>
      <c>0x3</c>
      <c>N/A</c>
      <c>Reserved</c>
      <c>0x4</c>
      <c>N/A</c>
      <c>Reserved</c>
      <c>0x5</c>
      <c>N/A</c>
      <c>MAX_HEADER_LIST_SIZE</c>
      <c>0x6</c>
      <c><xref target="settings-parameters"/></c>
</texttable>

</section>
<section anchor="iana-error-codes" title="Error Codes">

<t>This document establishes a registry for HTTP/QUIC error codes.  The
“HTTP/QUIC Error Code” registry manages a 16-bit space.  The “HTTP/QUIC
Error Code” registry operates under the “Expert Review” policy
<xref target="RFC8126"/>.</t>

<t>Registrations for error codes are required to include a description
of the error code.  An expert reviewer is advised to examine new
registrations for possible duplication with existing error codes.
Use of existing registrations is to be encouraged, but not mandated.</t>

<t>New registrations are advised to provide the following information:</t>

<t><list style="hanging">
  <t hangText='Name:'>
  A name for the error code.  Specifying an error code name is optional.</t>
  <t hangText='Code:'>
  The 16-bit error code value.</t>
  <t hangText='Description:'>
  A brief description of the error code semantics, longer if no detailed
specification is provided.</t>
  <t hangText='Specification:'>
  An optional reference for a specification that defines the error code.</t>
</list></t>

<t>The entries in the following table are registered by this document.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>Specification</ttcol>
      <c>STOPPING</c>
      <c>0x0000</c>
      <c>Reserved by QUIC</c>
      <c><xref target="QUIC-TRANSPORT"/></c>
      <c>HTTP_NO_ERROR</c>
      <c>0x0001</c>
      <c>No error</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_PUSH_REFUSED</c>
      <c>0x0002</c>
      <c>Client refused pushed content</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_INTERNAL_ERROR</c>
      <c>0x0003</c>
      <c>Internal error</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_PUSH_ALREADY_IN_CACHE</c>
      <c>0x0004</c>
      <c>Pushed content already cached</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_REQUEST_CANCELLED</c>
      <c>0x0005</c>
      <c>Data no longer needed</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_HPACK_DECOMPRESSION_FAILED</c>
      <c>0x0006</c>
      <c>HPACK cannot continue</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_CONNECT_ERROR</c>
      <c>0x0007</c>
      <c>TCP reset or error on CONNECT request</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_EXCESSIVE_LOAD</c>
      <c>0x0008</c>
      <c>Peer generating excessive load</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_VERSION_FALLBACK</c>
      <c>0x0009</c>
      <c>Retry over HTTP/2</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_WRONG_STREAM</c>
      <c>0x000A</c>
      <c>A frame was sent on the wrong stream</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_PUSH_LIMIT_EXCEEDED</c>
      <c>0x000B</c>
      <c>Maximum Push ID exceeded</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_DUPLICATE_PUSH</c>
      <c>0x000C</c>
      <c>Push ID was fulfilled multiple times</c>
      <c><xref target="http-error-codes"/></c>
      <c>HTTP_MALFORMED_FRAME</c>
      <c>0x01XX</c>
      <c>Error in frame formatting or use</c>
      <c><xref target="http-error-codes"/></c>
</texttable>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="QUIC-TRANSPORT" >
  <front>
    <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
    <author initials="J." surname="Iyengar" fullname="Jana Iyengar" role="editor">
      <organization>Google</organization>
    </author>
    <author initials="M." surname="Thomson" fullname="Martin Thomson" role="editor">
      <organization>Mozilla</organization>
    </author>
    <date />
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-quic-transport-latest"/>
</reference>




<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC7838" target='https://www.rfc-editor.org/info/rfc7838'>
<front>
<title>HTTP Alternative Services</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='P.' surname='McManus' fullname='P. McManus'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2016' month='April' />
<abstract><t>This document specifies &quot;Alternative Services&quot; for HTTP, which allow an origin's resources to be authoritatively available at a separate network location, possibly accessed with a different protocol configuration.</t></abstract>
</front>
<seriesInfo name='RFC' value='7838'/>
<seriesInfo name='DOI' value='10.17487/RFC7838'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7541" target='https://www.rfc-editor.org/info/rfc7541'>
<front>
<title>HPACK: Header Compression for HTTP/2</title>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='H.' surname='Ruellan' fullname='H. Ruellan'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification defines HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2.</t></abstract>
</front>
<seriesInfo name='RFC' value='7541'/>
<seriesInfo name='DOI' value='10.17487/RFC7541'/>
</reference>



<reference  anchor="RFC0793" target='https://www.rfc-editor.org/info/rfc793'>
<front>
<title>Transmission Control Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1981' month='September' />
</front>
<seriesInfo name='STD' value='7'/>
<seriesInfo name='RFC' value='793'/>
<seriesInfo name='DOI' value='10.17487/RFC0793'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7301" target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC8126" target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
<abstract><t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t><t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t><t>This is the third edition of this document; it obsoletes RFC 5226.</t></abstract>
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>




    </references>


<section anchor="contributors" title="Contributors">

<t>The original authors of this specification were Robbie Shade and Mike Warres.</t>

<t>A substantial portion of Mike’s contribution was supported by Microsoft during
his employment there.</t>

</section>
<section anchor="change-log" title="Change Log">

<t><list style='empty'>
  <t><spanx style="strong">RFC Editor’s Note:</spanx>  Please remove this section prior to publication of a
final version of this document.</t>
</list></t>

<section anchor="since-draft-ietf-quic-http-08" title="Since draft-ietf-quic-http-08">

<t>No significant changes.</t>

</section>
<section anchor="since-draft-ietf-quic-http-07" title="Since draft-ietf-quic-http-07">

<t><list style="symbols">
  <t>Changes for integer encodings in QUIC (#595,#905)</t>
  <t>Use unidirectional streams as appropriate (#515, #240, #281, #886)</t>
  <t>Improvement to the description of GOAWAY (#604, #898)</t>
  <t>Improve description of server push usage (#947, #950, #957)</t>
</list></t>

</section>
<section anchor="since-draft-ietf-quic-http-06" title="Since draft-ietf-quic-http-06">

<t><list style="symbols">
  <t>Track changes in QUIC error code usage (#485)</t>
</list></t>

</section>
<section anchor="since-draft-ietf-quic-http-05" title="Since draft-ietf-quic-http-05">

<t><list style="symbols">
  <t>Made push ID sequential, add MAX_PUSH_ID, remove SETTINGS_ENABLE_PUSH (#709)</t>
  <t>Guidance about keep-alive and QUIC PINGs (#729)</t>
  <t>Expanded text on GOAWAY and cancellation (#757)</t>
</list></t>

</section>
<section anchor="since-draft-ietf-quic-http-04" title="Since draft-ietf-quic-http-04">

<t><list style="symbols">
  <t>Cite RFC 5234 (#404)</t>
  <t>Return to a single stream per request (#245,#557)</t>
  <t>Use separate frame type and settings registries from HTTP/2 (#81)</t>
  <t>SETTINGS_ENABLE_PUSH instead of SETTINGS_DISABLE_PUSH (#477)</t>
  <t>Restored GOAWAY (#696)</t>
  <t>Identify server push using Push ID rather than a stream ID (#702,#281)</t>
  <t>DATA frames cannot be empty (#700)</t>
</list></t>

</section>
<section anchor="since-draft-ietf-quic-http-03" title="Since draft-ietf-quic-http-03">

<t>None.</t>

</section>
<section anchor="since-draft-ietf-quic-http-02" title="Since draft-ietf-quic-http-02">

<t><list style="symbols">
  <t>Track changes in transport draft</t>
</list></t>

</section>
<section anchor="since-draft-ietf-quic-http-01" title="Since draft-ietf-quic-http-01">

<t><list style="symbols">
  <t>SETTINGS changes (#181):
  <list style="symbols">
      <t>SETTINGS can be sent only once at the start of a connection;
no changes thereafter</t>
      <t>SETTINGS_ACK removed</t>
      <t>Settings can only occur in the SETTINGS frame a single time</t>
      <t>Boolean format updated</t>
    </list></t>
  <t>Alt-Svc parameter changed from “v” to “quic”; format updated (#229)</t>
  <t>Closing the connection control stream or any message control stream is a
fatal error (#176)</t>
  <t>HPACK Sequence counter can wrap (#173)</t>
  <t>0-RTT guidance added</t>
  <t>Guide to differences from HTTP/2 and porting HTTP/2 extensions added
(#127,#242)</t>
</list></t>

</section>
<section anchor="since-draft-ietf-quic-http-00" title="Since draft-ietf-quic-http-00">

<t><list style="symbols">
  <t>Changed “HTTP/2-over-QUIC” to “HTTP/QUIC” throughout (#11,#29)</t>
  <t>Changed from using HTTP/2 framing within Stream 3 to new framing format and
two-stream-per-request model (#71,#72,#73)</t>
  <t>Adopted SETTINGS format from draft-bishop-httpbis-extended-settings-01</t>
  <t>Reworked SETTINGS_ACK to account for indeterminate inter-stream order (#75)</t>
  <t>Described CONNECT pseudo-method (#95)</t>
  <t>Updated ALPN token and Alt-Svc guidance (#13,#87)</t>
  <t>Application-layer-defined error codes (#19,#74)</t>
</list></t>

</section>
<section anchor="since-draft-shade-quic-http2-mapping-00" title="Since draft-shade-quic-http2-mapping-00">

<t><list style="symbols">
  <t>Adopted as base for draft-ietf-quic-http</t>
  <t>Updated authors/editors list</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
/wBAEGY7WPoAAA==

-->

</rfc>

