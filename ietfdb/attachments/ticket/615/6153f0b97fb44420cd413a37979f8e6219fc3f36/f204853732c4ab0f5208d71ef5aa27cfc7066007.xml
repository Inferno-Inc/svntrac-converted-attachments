<?xml version="1.0" encoding="UTF-8"?>
<!--
    This XML document is the output of clean-for-DTD.xslt; a tool that strips
    extensions to RFC 7749 from documents for processing with xml2rfc.
-->
<!--TARGET-GENERATOR: 201706-->
<!--TARGET-VOCABULARY: 3-->
<?xml-stylesheet type='text/xsl' href='lib/myxml2rfc.xslt'?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no" ?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>

<!DOCTYPE rfc
  PUBLIC "" "">
<rfc version="3" indexInclude="false" sortRefs="true" obsoletes="2818,7230,7231,7232,7233,7235,7538,7615" category="std" ipr="pre5378Trust200902" docName="draft-ietf-httpbis-semantics-latest">
   <front>
      <title>HTTP Semantics</title>
      <author fullname="Roy T. Fielding" initials="R." surname="Fielding" role="editor">
         <organization>Adobe</organization>
         <address>
            <postal>
               <street>345 Park Ave</street>
               <city>San Jose</city>
               <region>CA</region>
               <code>95110</code>
               <country>United States of America</country>
            </postal>
            <email>fielding@gbiv.com</email>
            <uri>https://roy.gbiv.com/</uri>
         </address>
      </author>
      <author fullname="Mark Nottingham" initials="M." surname="Nottingham" role="editor">
         <organization>Fastly</organization>
         <address>
            <email>mnot@mnot.net</email>
            <uri>https://www.mnot.net/</uri>
         </address>
      </author>
      <author fullname="Julian F. Reschke" initials="J. F." surname="Reschke" role="editor">
         <organization abbrev="greenbytes">greenbytes GmbH</organization>
         <address>
            <postal>
               <street>Hafenweg 16</street>
               <city>Muenster</city>
               <code>48155</code>
               <country>Germany</country>
            </postal>
            <email>julian.reschke@greenbytes.de</email>
            <uri>https://greenbytes.de/tech/webdav/</uri>
         </address>
      </author>
      <date/>
      <area>Applications and Real-Time</area>
      <workgroup>HTTP Working Group</workgroup>
      <keyword>Hypertext Transfer Protocol</keyword>
      <keyword>HTTP</keyword>
      <keyword>HTTP semantics</keyword>
      <keyword>HTTP payload</keyword>
      <keyword>HTTP content</keyword>
      <keyword>HTTP method</keyword>
      <keyword>HTTP status code</keyword>
      <abstract>
         <t>
   The Hypertext Transfer Protocol (HTTP) is a stateless application-level
   protocol for distributed, collaborative, hypertext information systems.
   This document defines the semantics of HTTP: its architecture,
   terminology, the "http" and "https" Uniform Resource Identifier (URI)
   schemes, core request methods, request header fields, response status
   codes, response header fields, and content negotiation.
</t>
         <t>
   This document obsoletes RFC 2818, RFC 7231, RFC 7232, RFC 7233,
   RFC 7235, RFC 7538, RFC 7615, and portions of RFC 7230.
</t>
      </abstract>
      <note title="Editorial Note">
         <t>This note is to be removed before publishing as an RFC.</t>
         <t>
    Discussion of this draft takes place on the HTTP working group
    mailing list (ietf-http-wg@w3.org), which is archived at
    <eref target="https://lists.w3.org/Archives/Public/ietf-http-wg/"/>.
  </t>
         <t>
    Working Group information can be found at <eref target="https://httpwg.org/"/>;
    source code and issues list for this draft can be found at
    <eref target="https://github.com/httpwg/http-core"/>.
  </t>
         <t>
    The changes in this draft are summarized in <xref target="changes.since.06"/>.
  </t>
      </note>
   </front>
   <middle>
      <section anchor="introduction" title="Introduction">
         <t>
   The Hypertext Transfer Protocol (HTTP) is a stateless application-level
   request/response protocol that uses extensible semantics and
   self-descriptive messages for flexible interaction with network-based
   hypertext information systems. HTTP is defined by a series of documents
   that collectively form the HTTP/1.1 specification:
</t>
         <ul>
            <li>"HTTP Semantics" (this document)</li>
            <li>"HTTP Caching" <xref target="Caching"/>
            </li>
            <li>"HTTP/1.1 Messaging" <xref target="Messaging"/>
            </li>
         </ul>
         <t>
   HTTP is a generic interface protocol for information systems. It is
   designed to hide the details of how a service is implemented by presenting
   a uniform interface to clients that is independent of the types of
   resources provided. Likewise, servers do not need to be aware of each
   client's purpose: an HTTP request can be considered in isolation rather
   than being associated with a specific type of client or a predetermined
   sequence of application steps. The result is a protocol that can be used
   effectively in many different contexts and for which implementations can
   evolve independently over time.
</t>
         <t>
   HTTP is also designed for use as an intermediation protocol for translating
   communication to and from non-HTTP information systems.
   HTTP proxies and gateways can provide access to alternative information
   services by translating their diverse protocols into a hypertext
   format that can be viewed and manipulated by clients in the same way
   as HTTP services.
</t>
         <t>
   One consequence of this flexibility is that the protocol cannot be
   defined in terms of what occurs behind the interface. Instead, we
   are limited to defining the syntax of communication, the intent
   of received communication, and the expected behavior of recipients.
   If the communication is considered in isolation, then successful
   actions ought to be reflected in corresponding changes to the
   observable interface provided by servers. However, since multiple
   clients might act in parallel and perhaps at cross-purposes, we
   cannot require that such changes be observable beyond the scope
   of a single response.
</t>
         <t>
   Each HTTP message is either a request or a
   response. A server listens on a connection for a request, parses each
   message received, interprets the message semantics in relation to the
   identified request target, and responds to that request with one or more
   response messages. A client constructs request messages to communicate
   specific intentions, examines received responses to see if the
   intentions were carried out, and determines how to interpret the results.
</t>
         <t>
   HTTP provides a uniform interface for interacting with a resource
   (<xref target="resources"/>), regardless of its type, nature, or
   implementation, via the manipulation and transfer of representations
   (<xref target="representations"/>).
</t>
         <t>
   This document defines semantics that are common to all versions of HTTP.
   HTTP semantics include the intentions defined by each request method
   (<xref target="methods"/>), extensions to those semantics that might be
   described in request header fields (<xref target="request.header.fields"/>),
   the meaning of status codes to indicate a machine-readable response
   (<xref target="status.codes"/>), and the meaning of other control data
   and resource metadata that might be given in response header fields
   (<xref target="response.header.fields"/>).
</t>
         <t>
            <iref item="content negotiation"/>
   This document also defines representation metadata that describe how a
   payload is intended to be interpreted by a recipient, the request header
   fields that might influence content selection, and the various selection
   algorithms that are collectively referred to as
   "content negotiation" (<xref target="content.negotiation"/>).
</t>
         <t>
   This document defines HTTP range requests, partial responses, and the
   multipart/byteranges media type.
</t>
         <t>
   This document obsoletes the portions of
   RFC 7230 that are independent of
   the HTTP/1.1 messaging syntax and connection management, with the changes
   being summarized in <xref target="changes.from.rfc.7230"/>.
   The other parts of RFC 7230 are
   obsoleted by "HTTP/1.1 Messaging" <xref target="Messaging"/>.
   This document also obsoletes
   RFC 2818
   (see <xref target="changes.from.rfc.2818"/>),
   RFC 7231
   (see <xref target="changes.from.rfc.7231"/>),
   RFC 7232
   (see <xref target="changes.from.rfc.7232"/>),
   RFC 7233
   (see <xref target="changes.from.rfc.7233"/>),
   RFC 7235
   (see <xref target="changes.from.rfc.7235"/>),
   RFC 7538
   (see <xref target="changes.from.rfc.7538"/>), and
   RFC 7615
   (see <xref target="changes.from.rfc.7615"/>).
</t>
         <section anchor="intro.requirements" title="Requirements Notation">
            <t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
            <t>
   Conformance criteria and considerations regarding error handling
   are defined in <xref target="conformance"/>.
</t>
         </section>
         <section anchor="notation" title="Syntax Notation">
            <iref primary="true" item="Grammar" subitem="ALPHA"/>
            <iref primary="true" item="Grammar" subitem="CR"/>
            <iref primary="true" item="Grammar" subitem="CRLF"/>
            <iref primary="true" item="Grammar" subitem="CTL"/>
            <iref primary="true" item="Grammar" subitem="DIGIT"/>
            <iref primary="true" item="Grammar" subitem="DQUOTE"/>
            <iref primary="true" item="Grammar" subitem="HEXDIG"/>
            <iref primary="true" item="Grammar" subitem="HTAB"/>
            <iref primary="true" item="Grammar" subitem="LF"/>
            <iref primary="true" item="Grammar" subitem="OCTET"/>
            <iref primary="true" item="Grammar" subitem="SP"/>
            <iref primary="true" item="Grammar" subitem="VCHAR"/>
            <t>
   This specification uses the Augmented Backus-Naur Form (ABNF) notation of
   <xref target="RFC5234"/>, extended with the notation for case-sensitivity
   in strings defined in <xref target="RFC7405"/>.
</t>
            <t>   
   It also uses a list extension, defined in <xref target="abnf.extension"/>,
   that allows for compact definition of comma-separated lists using a '#'
   operator (similar to how the '*' operator indicates repetition). <xref target="collected.abnf"/> shows the collected grammar with all list
   operators expanded to standard ABNF notation.
</t>
            <t>
   As a convention, ABNF rule names prefixed with "obs-" denote
   "obsolete" grammar rules that appear for historical reasons.
</t>
            <t anchor="core.rules">
  
  
  
  
  
  
  
  
  
  
  
  
  The following core rules are included by
  reference, as defined in <xref target="RFC5234" section="B.1"/>:
  ALPHA (letters), CR (carriage return), CRLF (CR LF), CTL (controls),
  DIGIT (decimal 0-9), DQUOTE (double quote),
  HEXDIG (hexadecimal 0-9/A-F/a-f), HTAB (horizontal tab), LF (line feed),
  OCTET (any 8-bit sequence of data), SP (space), and
  VCHAR (any visible US-ASCII character).
</t>
            <t>
   
               <xref target="field.components"/> defines some generic syntactic
   components for header field values.
</t>
            <t anchor="imported.rules">
  
  
  
  
  The rules below are defined in <xref target="Messaging"/>:
</t>
            <sourcecode type="abnf7230"><![CDATA[  obs-fold         = <obs-fold, see [Messaging], Section 5.2>
  protocol-name    = <protocol-name, see [Messaging], Section 9.9>
  protocol-version = <protocol-version, see [Messaging], Section 9.9>
  request-target   = <request-target, see [Messaging], Section 3.2>
]]></sourcecode>
            <t>
   This specification uses the terms
   "character",
   "character encoding scheme",
   "charset", and
   "protocol element"
   as they are defined in <xref target="RFC6365"/>.
</t>
         </section>
      </section>
      <section anchor="architecture" title="Architecture">
         <t>
   HTTP was created for the World Wide Web (WWW) architecture
   and has evolved over time to support the scalability needs of a worldwide
   hypertext system. Much of that architecture is reflected in the terminology
   and syntax productions used to define HTTP.
</t>
         <section anchor="operation" title="Client/Server Messaging">
            <iref primary="true" item="client"/>
            <iref primary="true" item="server"/>
            <iref primary="true" item="connection"/>
            <t>
   HTTP is a stateless request/response protocol that operates by exchanging
   messages (<xref target="Messaging" section="2" relative="#http.message"/>) across a reliable
   transport- or session-layer
   "connection" (<xref target="Messaging" section="9" relative="#connection.management"/>).
   An HTTP "client" is a program that establishes a connection
   to a server for the purpose of sending one or more HTTP requests.
   An HTTP "server" is a program that accepts connections
   in order to service HTTP requests by sending HTTP responses.
</t>
            <iref primary="true" item="user agent"/>
            <iref primary="true" item="origin server"/>
            <iref primary="true" item="browser"/>
            <iref primary="true" item="spider"/>
            <iref primary="true" item="sender"/>
            <iref primary="true" item="recipient"/>
            <t>
   The terms "client" and "server" refer only to the roles that
   these programs perform for a particular connection.  The same program
   might act as a client on some connections and a server on others.
   The term "user agent" refers to any of the various
   client programs that initiate a request, including (but not limited to)
   browsers, spiders (web-based robots), command-line tools, custom
   applications, and mobile apps.
   The term "origin server" refers to the program that can
   originate authoritative responses for a given target resource.
   The terms "sender" and "recipient" refer to
   any implementation that sends or receives a given message, respectively.
</t>
            <t>
   HTTP relies upon the Uniform Resource Identifier (URI)
   standard <xref target="RFC3986"/> to indicate the target resource
   (<xref target="target.resource"/>) and relationships between resources.
</t>
            <t>
   Most HTTP communication consists of a retrieval request (GET) for
   a representation of some resource identified by a URI.  In the
   simplest case, this might be accomplished via a single bidirectional
   connection (===) between the user agent (UA) and the origin server (O).
</t>
            <figure>
               <artwork type="drawing"><![CDATA[
         request   >
    UA ======================================= O
                                <   response
]]></artwork>
            </figure>
            <iref primary="true" item="message"/>
            <iref primary="true" item="request"/>
            <iref primary="true" item="response"/>
            <t>
   Each major version of HTTP defines its own syntax for the inclusion of
   information in messages. Nevertheless, a common abstraction is that a
   message includes some form of envelope/framing, a potential set of named
   header fields up front (a header section), a potential body, and a
   potential set of named trailer fields.
</t>
            <t>
   A client sends an HTTP request to a server in the form of a
   request message, beginning with a method (<xref target="methods"/>) and URI, followed by header fields containing request
   modifiers, client information, and representation metadata (<xref target="header.fields"/>), and finally a
   payload body (if any, <xref target="payload.body"/>).
</t>
            <t>
   A server responds to a client's request by sending one or more HTTP
   response messages, each beginning with a success or error
   code (<xref target="status.codes"/>), possibly followed by header fields
   containing server information, resource metadata, and representation
   metadata (<xref target="header.fields"/>), and finally a 
   payload body (if any, <xref target="payload.body"/>).
</t>
            <t>
   A connection might be used for multiple request/response exchanges. The
   mechanism used to correlate between request and response messages is
   version dependent; some versions of HTTP use implicit ordering of
   messages, while others use an explicit identifier.
</t>
            <t>
   Responses (both final and non-final) can be sent at any time after a
   request is received, even if it is not yet complete. However, clients
   (including intermediaries) might abandon a request if the response is not
   forthcoming within a reasonable period of time.
</t>
            <t>
   The following example illustrates a typical message exchange for a
   GET request (<xref target="GET"/>) on the URI "http://www.example.com/hello.txt":
</t>
            <t>
Client request:
</t>
            <artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
  GET /hello.txt HTTP/1.1
  User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
  Host: www.example.com
  Accept-Language: en, mi
  
  ]]></artwork>
            <t>
Server response:
</t>
            <artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 200 OK
  Date: Mon, 27 Jul 2009 12:28:53 GMT
  Server: Apache
  Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
  ETag: "34aa387-d-1568eb00"
  Accept-Ranges: bytes
  Content-Length: 51
  Vary: Accept-Encoding
  Content-Type: text/plain
  
  Hello World! My payload includes a trailing CRLF.
  ]]></artwork>
         </section>
         <section anchor="intermediaries" title="Intermediaries">
            <iref primary="true" item="intermediary"/>
            <t>
   HTTP enables the use of intermediaries to satisfy requests through
   a chain of connections.  There are three common forms of HTTP
   intermediary: proxy, gateway, and tunnel.  In some cases,
   a single intermediary might act as an origin server, proxy, gateway,
   or tunnel, switching behavior based on the nature of each request.
</t>
            <figure>
               <artwork type="drawing"><![CDATA[
         >             >             >             >
    UA =========== A =========== B =========== C =========== O
               <             <             <             <
]]></artwork>
            </figure>
            <t>
   The figure above shows three intermediaries (A, B, and C) between the
   user agent and origin server. A request or response message that
   travels the whole chain will pass through four separate connections.
   Some HTTP communication options
   might apply only to the connection with the nearest, non-tunnel
   neighbor, only to the endpoints of the chain, or to all connections
   along the chain. Although the diagram is linear, each participant might
   be engaged in multiple, simultaneous communications. For example, B
   might be receiving requests from many clients other than A, and/or
   forwarding requests to servers other than C, at the same time that it
   is handling A's request. Likewise, later requests might be sent through a
   different path of connections, often based on dynamic configuration for
   load balancing.   
</t>
            <t>

               <iref primary="true" item="upstream"/>
               <iref primary="true" item="downstream"/>

               <iref primary="true" item="inbound"/>
               <iref primary="true" item="outbound"/>
   The terms "upstream" and "downstream" are
   used to describe directional requirements in relation to the message flow:
   all messages flow from upstream to downstream.
   The terms "inbound" and "outbound" are used to describe directional
   requirements in relation to the request route:
   "inbound" means toward the origin server and
   "outbound" means toward the user agent.
</t>
            <t>
               <iref primary="true" item="proxy"/>
   A "proxy" is a message-forwarding agent that is selected by the
   client, usually via local configuration rules, to receive requests
   for some type(s) of absolute URI and attempt to satisfy those
   requests via translation through the HTTP interface.  Some translations
   are minimal, such as for proxy requests for "http" URIs, whereas
   other requests might require translation to and from entirely different
   application-level protocols. Proxies are often used to group an
   organization's HTTP requests through a common intermediary for the
   sake of security, annotation services, or shared caching. Some proxies
   are designed to apply transformations to selected messages or payloads
   while they are being forwarded, as described in
   <xref target="message.transformations"/>.
</t>
            <t>
               <iref primary="true" item="gateway"/>
               <iref primary="true" item="reverse proxy"/>

               <iref primary="true" item="accelerator"/>
   A "gateway" (a.k.a. "reverse proxy") is an
   intermediary that acts as an origin server for the outbound connection but
   translates received requests and forwards them inbound to another server or
   servers. Gateways are often used to encapsulate legacy or untrusted
   information services, to improve server performance through
   "accelerator" caching, and to enable partitioning or load
   balancing of HTTP services across multiple machines.
</t>
            <t>
   All HTTP requirements applicable to an origin server
   also apply to the outbound communication of a gateway.
   A gateway communicates with inbound servers using any protocol that
   it desires, including private extensions to HTTP that are outside
   the scope of this specification.  However, an HTTP-to-HTTP gateway
   that wishes to interoperate with third-party HTTP servers ought to conform
   to user agent requirements on the gateway's inbound connection.
</t>
            <t>
               <iref primary="true" item="tunnel"/>
   A "tunnel" acts as a blind relay between two connections
   without changing the messages. Once active, a tunnel is not
   considered a party to the HTTP communication, though the tunnel might
   have been initiated by an HTTP request. A tunnel ceases to exist when
   both ends of the relayed connection are closed. Tunnels are used to
   extend a virtual connection through an intermediary, such as when
   Transport Layer Security (TLS, <xref target="RFC8446"/>) is used to
   establish confidential communication through a shared firewall proxy.
</t>
            <t>
   The above categories for intermediary only consider those acting as
   participants in the HTTP communication.  There are also intermediaries
   that can act on lower layers of the network protocol stack, filtering or
   redirecting HTTP traffic without the knowledge or permission of message
   senders. Network intermediaries are indistinguishable (at a protocol level)
   from a man-in-the-middle attack, often introducing security flaws or
   interoperability problems due to mistakenly violating HTTP semantics.
</t>
            <t>
               <iref primary="true" item="interception proxy"/>

               <iref primary="true" item="transparent proxy"/>

               <iref primary="true" item="captive portal"/>
   For example, an
   "interception proxy" <xref target="RFC3040"/> (also commonly
   known as a "transparent proxy" <xref target="RFC1919"/> or
   "captive portal")
   differs from an HTTP proxy because it is not selected by the client.
   Instead, an interception proxy filters or redirects outgoing TCP port 80
   packets (and occasionally other common port traffic).
   Interception proxies are commonly found on public network access points,
   as a means of enforcing account subscription prior to allowing use of
   non-local Internet services, and within corporate firewalls to enforce
   network usage policies.
</t>
            <t>
   HTTP is defined as a stateless protocol, meaning that each request message
   can be understood in isolation.  Many implementations depend on HTTP's
   stateless design in order to reuse proxied connections or dynamically
   load balance requests across multiple servers.  Hence, a server <bcp14>MUST NOT</bcp14>
   assume that two requests on the same connection are from the same user
   agent unless the connection is secured and specific to that agent.
   Some non-standard HTTP extensions (e.g., <xref target="RFC4559"/>) have
   been known to violate this requirement, resulting in security and
   interoperability problems.
</t>
         </section>
         <section anchor="caches" title="Caches">
            <iref primary="true" item="cache"/>
            <t>
   A "cache" is a local store of previous response messages and the
   subsystem that controls its message storage, retrieval, and deletion.
   A cache stores cacheable responses in order to reduce the response
   time and network bandwidth consumption on future, equivalent
   requests. Any client or server <bcp14>MAY</bcp14> employ a cache, though a cache
   cannot be used by a server while it is acting as a tunnel.
</t>
            <t>
   The effect of a cache is that the request/response chain is shortened
   if one of the participants along the chain has a cached response
   applicable to that request. The following illustrates the resulting
   chain if B has a cached copy of an earlier response from O (via C)
   for a request that has not been cached by UA or A.
</t>
            <figure>
               <artwork type="drawing"><![CDATA[
            >             >
       UA =========== A =========== B - - - - - - C - - - - - - O
                  <             <
]]></artwork>
            </figure>
            <t>
               <iref primary="true" item="cacheable"/>
   A response is "cacheable" if a cache is allowed to store a copy of
   the response message for use in answering subsequent requests.
   Even when a response is cacheable, there might be additional
   constraints placed by the client or by the origin server on when
   that cached response can be used for a particular request. HTTP
   requirements for cache behavior and cacheable responses are
   defined in <xref target="Caching" section="2" relative="#caching.overview"/>.  
</t>
            <t>
   There is a wide variety of architectures and configurations
   of caches deployed across the World Wide Web and
   inside large organizations. These include national hierarchies
   of proxy caches to save transoceanic bandwidth, collaborative systems that
   broadcast or multicast cache entries, archives of pre-fetched cache
   entries for use in off-line or high-latency environments, and so on.
</t>
         </section>
         <section anchor="uri" title="Uniform Resource Identifiers">
            <iref primary="true" item="resource"/>
            <t>
   Uniform Resource Identifiers (URIs) <xref target="RFC3986"/> are used
   throughout HTTP as the means for identifying resources (<xref target="resources"/>).
   URI references are used to target requests, indicate redirects, and define
   relationships.
</t>
            <t>
   The definitions of "URI-reference",
   "absolute-URI", "relative-part", "authority", "port", "host",
   "path-abempty", "segment", and "query" are adopted from the
   URI generic syntax.
   An "absolute-path" rule is defined for protocol elements that can contain a
   non-empty path component. (This rule differs slightly from the path-abempty
   rule of RFC 3986, which allows for an empty path to be used in references,
   and path-absolute rule, which does not allow paths that begin with "//".)
   A "partial-URI" rule is defined for protocol elements
   that can contain a relative URI but not a fragment component.
</t>
            <iref primary="true" item="Grammar" subitem="URI-reference"><!--exported production--></iref>
            <iref primary="true" item="Grammar" subitem="absolute-URI"/>
            <iref primary="true" item="Grammar" subitem="authority"/>
            <iref primary="true" item="Grammar" subitem="absolute-path"/>
            <iref primary="true" item="Grammar" subitem="port"/>
            <iref primary="true" item="Grammar" subitem="query"/>
            <iref primary="true" item="Grammar" subitem="segment"/>
            <iref primary="true" item="Grammar" subitem="uri-host"/>
            <iref primary="true" item="Grammar" subitem="partial-URI"><!--exported production--></iref>
            <sourcecode type="abnf7230"><![CDATA[  URI-reference = <URI-reference, see [RFC3986], Section 4.1>
  absolute-URI  = <absolute-URI, see [RFC3986], Section 4.3>
  relative-part = <relative-part, see [RFC3986], Section 4.2>
  authority     = <authority, see [RFC3986], Section 3.2>
  uri-host      = <host, see [RFC3986], Section 3.2.2>
  port          = <port, see [RFC3986], Section 3.2.3>
  path-abempty  = <path-abempty, see [RFC3986], Section 3.3>
  segment       = <segment, see [RFC3986], Section 3.3>
  query         = <query, see [RFC3986], Section 3.4>
  
  absolute-path = 1*( "/" segment )
  partial-URI   = relative-part [ "?" query ]
]]></sourcecode>
            <t>
   Each protocol element in HTTP that allows a URI reference will indicate
   in its ABNF production whether the element allows any form of reference
   (URI-reference), only a URI in absolute form (absolute-URI), only the
   path and optional query components, or some combination of the above.
   Unless otherwise indicated, URI references are parsed
   relative to the effective request URI
   (<xref target="effective.request.uri"/>).
</t>
            <t>
   It is <bcp14>RECOMMENDED</bcp14> that all senders and recipients support, at a minimum,
   URIs with lengths of 8000 octets in protocol elements. Note that this
   implies some structures and on-wire representations (for example, the
   request line in HTTP/1.1) will necessarily be larger in some cases.
</t>
         </section>
         <section anchor="resources" title="Resources">
            <t>
   The target of an HTTP request is called a "resource". 
   HTTP does not limit the nature of a resource; it merely
   defines an interface that might be used to interact with resources.
   Each resource is identified by a Uniform Resource Identifier (URI), as
   described in <xref target="uri"/>.
</t>
            <t>
   One design goal of HTTP is to separate resource identification from
   request semantics, which is made possible by vesting the request
   semantics in the request method (<xref target="methods"/>) and a few
   request-modifying header fields (<xref target="request.header.fields"/>).
   If there is a conflict between the method semantics and any semantic
   implied by the URI itself, as described in <xref target="safe.methods"/>,
   the method semantics take precedence.
</t>
            <t>
   IANA maintains the registry of URI Schemes <xref target="BCP35"/> at
   <eref target="https://www.iana.org/assignments/uri-schemes/"/>.
   Although requests might target any URI scheme, the following schemes are
   inherent to HTTP servers:
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>URI Scheme</th>
                     <th>Description</th>
                     <th>Reference</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>http</td>
                     <td>Hypertext Transfer Protocol</td>
                     <td>
                        <xref target="http.uri"/>
                     </td>
                  </tr>
                  <tr>
                     <td>https</td>
                     <td>Hypertext Transfer Protocol Secure</td>
                     <td>
                        <xref target="https.uri"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="http.uri" title="http URI Scheme">
               <iref item="http URI scheme" primary="true"/>
               <iref item="URI scheme" subitem="http" primary="true"/>
               <t>
   The "http" URI scheme is hereby defined for the purpose of minting
   identifiers according to their association with the hierarchical
   namespace governed by a potential HTTP origin server listening for
   TCP (<xref target="RFC0793"/>) connections on a given port.
</t>
               <iref primary="true" item="Grammar" subitem="http-URI"><!--terminal production--></iref>
               <sourcecode type="abnf7230"><![CDATA[  http-URI = "http:" "//" authority path-abempty [ "?" query ]
]]></sourcecode>
               <t>
   The origin server for an "http" URI is identified by the 
   <xref target="uri" format="none">authority</xref> component, which includes a host identifier
   and optional TCP port (<xref target="RFC3986" sectionFormat="comma" section="3.2.2"/>).
   The hierarchical path component and optional query component serve as an
   identifier for a potential target resource within that origin server's name
   space.
</t>
               <t>
   A sender <bcp14>MUST NOT</bcp14> generate an "http" URI with an empty host identifier.
   A recipient that processes such a URI reference <bcp14>MUST</bcp14> reject it as invalid. 
</t>
               <t>
   If the host identifier is provided as an IP address, the origin server is
   the listener (if any) on the indicated TCP port at that IP address.
   If host is a registered name, the registered name is an indirect identifier
   for use with a name resolution service, such as DNS, to find an address for
   that origin server.
   If the port subcomponent is empty or not given, TCP port 80 (the
   reserved port for WWW services) is the default.
</t>
               <t>
   Note that the presence of a URI with a given authority component does not
   imply that there is always an HTTP server listening for connections on
   that host and port. Anyone can mint a URI. What the authority component
   determines is who has the right to respond authoritatively to requests that
   target the identified resource. The delegated nature of registered names
   and IP addresses creates a federated namespace, based on control over the
   indicated host and port, whether or not an HTTP server is present.
   See <xref target="establishing.authority"/> for security considerations
   related to establishing authority.
</t>
               <t>
   When an "http" URI is used within a context that calls for access to the
   indicated resource, a client <bcp14>MAY</bcp14> attempt access by resolving
   the host to an IP address, establishing a TCP connection to that address
   on the indicated port, and sending an HTTP request message
   (<xref target="Messaging" section="2" relative="#http.message"/>) containing the URI's identifying data
   to the server.
   If the server responds to that request with a non-interim HTTP response
   message, as described in <xref target="status.codes"/>, then that response
   is considered an authoritative answer to the client's request.
</t>
               <t>
   Although HTTP is independent of the transport protocol, the "http"
   scheme is specific to TCP-based services because the name delegation
   process depends on TCP for establishing authority.
   An HTTP service based on some other underlying connection protocol
   would presumably be identified using a different URI scheme, just as
   the "https" scheme (below) is used for resources that require an
   end-to-end secured connection. Other protocols might also be used to
   provide access to "http" identified resources — it is only the
   authoritative interface that is specific to TCP.
</t>
            </section>
            <section anchor="https.uri" title="https URI Scheme">
               <iref item="https URI scheme"/>
               <iref item="URI scheme" subitem="https"/>
               <t>
   The "https" URI scheme is hereby defined for the purpose of minting
   identifiers according to their association with the hierarchical
   namespace governed by a potential HTTP origin server listening to a
   given TCP port for TLS-secured connections (<xref target="RFC8446"/>).
</t>
               <t>
   All of the requirements listed above for the "http" scheme are also
   requirements for the "https" scheme, except that TCP port 443 is the
   default if the port subcomponent is empty or not given,
   and the user agent <bcp14>MUST</bcp14> ensure that its connection to the origin
   server is secured through the use of strong encryption, end-to-end,
   prior to sending the first HTTP request.
</t>
               <iref primary="true" item="Grammar" subitem="https-URI"><!--terminal production--></iref>
               <sourcecode type="abnf7230"><![CDATA[  https-URI = "https:" "//" authority path-abempty [ "?" query ]
]]></sourcecode>
               <t>
   Note that the "https" URI scheme depends on both TLS and TCP for
   establishing authority.
   Resources made available via the "https" scheme have no shared
   identity with the "http" scheme even if their resource identifiers
   indicate the same authority (the same host listening to the same
   TCP port).  They are distinct namespaces and are considered to be
   distinct origin servers.  However, an extension to HTTP that is
   defined to apply to entire host domains, such as the Cookie protocol 
   <xref target="RFC6265"/>, can allow information
   set by one service to impact communication with other services
   within a matching group of host domains.
</t>
            </section>
            <section anchor="uri.comparison" title="http and https URI Normalization and Comparison">
               <t>
   Since the "http" and "https" schemes conform to the URI generic syntax,
   such URIs are normalized and compared according to the algorithm defined
   in <xref target="RFC3986" section="6"/>, using the defaults
   described above for each scheme.
</t>
               <t>
   If the port is equal to the default port for a scheme, the normal form is
   to omit the port subcomponent. When not being used in absolute form as the
   request target of an OPTIONS request, an empty path component is equivalent
   to an absolute path of "/", so the normal form is to provide a path of "/"
   instead. The scheme and host are case-insensitive and normally provided in
   lowercase; all other components are compared in a case-sensitive manner.
   Characters other than those in the "reserved" set are equivalent to their
   percent-encoded octets: the normal form is to not encode them
   (see Sections <xref target="RFC3986" sectionFormat="bare" section="2.1"/> and
   <xref target="RFC3986" sectionFormat="bare" section="2.2"/> of 
   <xref target="RFC3986"/>).
</t>
               <t>
   For example, the following three URIs are equivalent:
</t>
               <artwork type="example"><![CDATA[
   http://example.com:80/~smith/home.html
   http://EXAMPLE.com/%7Esmith/home.html
   http://EXAMPLE.com:/%7esmith/home.html
]]></artwork>
            </section>
            <section anchor="http.userinfo" title="Deprecated userinfo">
               <t>
   The URI generic syntax for authority also includes a deprecated
   userinfo subcomponent (<xref target="RFC3986" sectionFormat="comma" section="3.2.1"/>)
   for including user authentication information in the URI.  Some
   implementations make use of the userinfo component for internal
   configuration of authentication information, such as within command
   invocation options, configuration files, or bookmark lists, even
   though such usage might expose a user identifier or password.
   A sender <bcp14>MUST NOT</bcp14> generate the userinfo subcomponent (and its "@"
   delimiter) when an "http" URI reference is generated within a message as a
   request target or header field value.
   Before making use of an "http" URI reference received from an untrusted
   source, a recipient <bcp14>SHOULD</bcp14> parse for userinfo and treat its presence as
   an error; it is likely being used to obscure the authority for the sake of
   phishing attacks.
</t>
            </section>
            <section anchor="uri.fragment.identifiers" title="Fragment Identifiers on http(s) URI References">
               <iref item="Fragment Identifiers"/>
               <t>
   Fragment identifiers allow for indirect identification
   of a secondary resource, independent of the URI scheme, as defined in
   <xref target="RFC3986" section="3.5"/>.
   Some protocol elements that refer to a URI allow inclusion of a fragment,
   while others do not. They are distinguished by use of the ABNF rule for
   elements where fragment is allowed; otherwise, a specific rule that excludes
   fragments is used (see <xref target="target.resource"/>).
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> the fragment identifier component is not part of the actual scheme
    definition for a URI scheme (see <xref target="RFC3986" section="4.3"/>),
    thus does not appear in the ABNF definitions for the "http" and "https"
    URI schemes above.
  </t>
               </aside>
            </section>
         </section>
      </section>
      <section anchor="conformance" title="Conformance">
         <section anchor="implementation-diversity" title="Implementation Diversity">
            <t>
   When considering the design of HTTP, it is easy to fall into a trap of
   thinking that all user agents are general-purpose browsers and all origin
   servers are large public websites. That is not the case in practice.
   Common HTTP user agents include household appliances, stereos, scales,
   firmware update scripts, command-line programs, mobile apps,
   and communication devices in a multitude of shapes and sizes.  Likewise,
   common HTTP origin servers include home automation units, configurable
   networking components, office machines, autonomous robots, news feeds,
   traffic cameras, ad selectors, and video-delivery platforms.
</t>
            <t>
   The term "user agent" does not imply that there is a human user directly
   interacting with the software agent at the time of a request. In many
   cases, a user agent is installed or configured to run in the background
   and save its results for later inspection (or save only a subset of those
   results that might be interesting or erroneous). Spiders, for example, are
   typically given a start URI and configured to follow certain behavior while
   crawling the Web as a hypertext graph.
</t>
            <t>
   The implementation diversity of HTTP means that not all user agents can
   make interactive suggestions to their user or provide adequate warning for
   security or privacy concerns. In the few cases where this
   specification requires reporting of errors to the user, it is acceptable
   for such reporting to only be observable in an error console or log file.
   Likewise, requirements that an automated action be confirmed by the user
   before proceeding might be met via advance configuration choices,
   run-time options, or simple avoidance of the unsafe action; confirmation
   does not imply any specific user interface or interruption of normal
   processing if the user has already made that choice.
</t>
         </section>
         <section anchor="role-requirements" title="Role-based Requirements">
            <t>
   This specification targets conformance criteria according to the role of
   a participant in HTTP communication.  Hence, HTTP requirements are placed
   on senders, recipients, clients, servers, user agents, intermediaries,
   origin servers, proxies, gateways, or caches, depending on what behavior
   is being constrained by the requirement. Additional (social) requirements
   are placed on implementations, resource owners, and protocol element
   registrations when they apply beyond the scope of a single communication.
</t>
            <t>
   The verb "generate" is used instead of "send" where a requirement
   differentiates between creating a protocol element and merely forwarding a
   received element downstream.
</t>
            <t>
   An implementation is considered conformant if it complies with all of the
   requirements associated with the roles it partakes in HTTP.
</t>
            <t>
   Conformance includes both the syntax and semantics of protocol
   elements. A sender <bcp14>MUST NOT</bcp14> generate protocol elements that convey a
   meaning that is known by that sender to be false. A sender <bcp14>MUST NOT</bcp14>
   generate protocol elements that do not match the grammar defined by the
   corresponding ABNF rules. Within a given message, a sender <bcp14>MUST NOT</bcp14>
   generate protocol elements or syntax alternatives that are only allowed to
   be generated by participants in other roles (i.e., a role that the sender
   does not have for that message).
</t>
         </section>
         <section anchor="parsing-elements" title="Parsing Elements">
            <t>
   When a received protocol element is parsed, the recipient <bcp14>MUST</bcp14> be able to
   parse any value of reasonable length that is applicable to the recipient's
   role and that matches the grammar defined by the corresponding ABNF rules.
   Note, however, that some received protocol elements might not be parsed.
   For example, an intermediary forwarding a message might parse a
   header-field into generic field-name and field-value components, but then
   forward the header field without further parsing inside the field-value.
</t>
            <t>
   HTTP does not have specific length limitations for many of its protocol
   elements because the lengths that might be appropriate will vary widely,
   depending on the deployment context and purpose of the implementation.
   Hence, interoperability between senders and recipients depends on shared
   expectations regarding what is a reasonable length for each protocol
   element. Furthermore, what is commonly understood to be a reasonable length
   for some protocol elements has changed over the course of the past two
   decades of HTTP use and is expected to continue changing in the future.
</t>
            <t>
   At a minimum, a recipient <bcp14>MUST</bcp14> be able to parse and process protocol
   element lengths that are at least as long as the values that it generates
   for those same protocol elements in other messages. For example, an origin
   server that publishes very long URI references to its own resources needs
   to be able to parse and process those same references when received as a
   request target.
</t>
         </section>
         <section anchor="error-handling" title="Error Handling">
            <t>
   A recipient <bcp14>MUST</bcp14> interpret a received protocol element according to the
   semantics defined for it by this specification, including extensions to
   this specification, unless the recipient has determined (through experience
   or configuration) that the sender incorrectly implements what is implied by
   those semantics.
   For example, an origin server might disregard the contents of a received
   <xref target="header.accept-encoding" format="none">Accept-Encoding</xref> header field if inspection of the
   <xref target="header.user-agent" format="none">User-Agent</xref> header field indicates a specific implementation
   version that is known to fail on receipt of certain content codings.
</t>
            <t>
   Unless noted otherwise, a recipient <bcp14>MAY</bcp14> attempt to recover a usable
   protocol element from an invalid construct.  HTTP does not define
   specific error handling mechanisms except when they have a direct impact
   on security, since different applications of the protocol require
   different error handling strategies.  For example, a Web browser might
   wish to transparently recover from a response where the
   <xref target="header.location" format="none">Location</xref> header field doesn't parse according to the ABNF,
   whereas a systems control client might consider any form of error recovery
   to be dangerous.
</t>
            <t>
   Some requests can be automatically retried by a client in the event of
   an underlying connection failure, as described in
   <xref target="idempotent.methods"/>.
</t>
         </section>
         <section anchor="protocol.version" title="Protocol Versioning">
            <t>
   The HTTP version number consists of two decimal digits separated by a "."
   (period or decimal point). The first digit ("major version") indicates the
   HTTP messaging syntax, whereas the second digit ("minor version")
   indicates the highest minor version within that major version to which the
   sender is conformant and able to understand for future communication.
</t>
            <t>
   The protocol version as a whole indicates the sender's conformance with
   the set of requirements laid out in that version's corresponding
   specification of HTTP.
   For example, the version "HTTP/1.1" is defined by the combined
   specifications of this document, "HTTP Caching" <xref target="Caching"/>,
   and "HTTP/1.1 Messaging" <xref target="Messaging"/>.
</t>
            <t>
   The minor version advertises the sender's communication capabilities even
   when the sender is only using a backwards-compatible subset of the
   protocol, thereby letting the recipient know that more advanced features
   can be used in response (by servers) or in future requests (by clients).
</t>
            <t>
   A client <bcp14>SHOULD</bcp14> send a request version equal to the highest
   version to which the client is conformant and
   whose major version is no higher than the highest version supported
   by the server, if this is known.  A client <bcp14>MUST NOT</bcp14> send a
   version to which it is not conformant.
</t>
            <t>
   A client <bcp14>MAY</bcp14> send a lower request version if it is known that
   the server incorrectly implements the HTTP specification, but only
   after the client has attempted at least one normal request and determined
   from the response status code or header fields (e.g., <xref target="header.server" format="none">Server</xref>) that
   the server improperly handles higher request versions.
</t>
            <t>
   A server <bcp14>SHOULD</bcp14> send a response version equal to the highest version to
   which the server is conformant that has a major version less than or equal
   to the one received in the request.
   A server <bcp14>MUST NOT</bcp14> send a version to which it is not conformant.
   A server can send a <xref target="status.505" format="none">505 (HTTP Version Not Supported)</xref>
   response if it wishes, for any reason, to refuse service of the client's
   major protocol version.
</t>
            <t>
   HTTP's major version number is incremented when an incompatible message
   syntax is introduced. The minor number is incremented when changes made to
   the protocol have the effect of adding to the message semantics or
   implying additional capabilities of the sender.
</t>
            <t>
   When an HTTP message is received with a major version number that the
   recipient implements, but a higher minor version number than what the
   recipient implements, the recipient <bcp14>SHOULD</bcp14> process the message as if it
   were in the highest minor version within that major version to which the
   recipient is conformant. A recipient can assume that a message with a
   higher minor version, when sent to a recipient that has not yet indicated
   support for that higher version, is sufficiently backwards-compatible to be
   safely processed by any implementation of the same major version.
</t>
            <t>
   When a major version of HTTP does not define any minor versions, the minor
   version "0" is implied and is used when referring to that protocol within a
   protocol element that requires sending a minor version.
</t>
         </section>
      </section>
      <section anchor="header.fields" title="Header Fields">
         <t>
   This section defines the abstraction for message fields as field-name and
   field-value pairs.
</t>
         <section anchor="field.names" title="Header Field Names">
            <t>
   Header fields are key:value pairs that can be used to communicate data about
   the message, its payload, the target resource, or the connection
   (i.e., control data).
</t>
            <t>
   The requirements for header field names are defined in
   <xref target="BCP90"/>.
</t>
            <t>
   The field-name token labels the corresponding field-value as having the
   semantics defined by that header field.  For example, the <xref target="header.date" format="none">Date</xref>
   header field is defined in <xref target="header.date"/> as containing the origination
   timestamp for the message in which it appears.
</t>
            <iref primary="true" item="Grammar" subitem="field-name"/>
            <sourcecode type="abnf7230"><![CDATA[  field-name     = token
]]></sourcecode>
            <t>
   The interpretation of a header field does not change between minor
   versions of the same major HTTP version, though the default behavior of a
   recipient in the absence of such a field can change. Unless specified
   otherwise, header fields are defined for all versions of HTTP.
   In particular, the <xref target="header.host" format="none">Host</xref> and Connection
   header fields ought to be implemented by all HTTP/1.x implementations
   whether or not they advertise conformance with HTTP/1.1.
</t>
            <t>
   New header fields can be introduced without changing the protocol version
   if their defined semantics allow them to be safely ignored by recipients
   that do not recognize them. Header field extensibility is discussed in
   <xref target="field.extensibility"/>.
</t>
            <t>
   The following field names are defined by this document:
</t><!--AUTOGENERATED FROM extract-header-defs.xslt, do not edit manually-->
            <table align="left" anchor="iana.header.registration.table">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Status</th>
                     <th>Reference</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Accept</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.accept"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Accept-Charset</td>
                     <td>deprecated</td>
                     <td>
            
                        <xref target="header.accept-charset"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Accept-Encoding</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.accept-encoding"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Accept-Language</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.accept-language"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Accept-Ranges</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.accept-ranges"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Allow</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.allow"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Authentication-Info</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.authentication-info"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Authorization</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.authorization"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Encoding</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.content-encoding"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Language</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.content-language"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Length</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.content-length"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Location</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.content-location"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Range</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.content-range"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Type</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.content-type"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Date</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.date"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>ETag</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.etag"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Expect</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.expect"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>From</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.from"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Host</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.host"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>If-Match</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.if-match"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>If-Modified-Since</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.if-modified-since"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>If-None-Match</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.if-none-match"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>If-Range</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.if-range"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>If-Unmodified-Since</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.if-unmodified-since"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Last-Modified</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.last-modified"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Location</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.location"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Max-Forwards</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.max-forwards"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Proxy-Authenticate</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.proxy-authenticate"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Proxy-Authentication-Info</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.proxy-authentication-info"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Proxy-Authorization</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.proxy-authorization"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Range</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.range"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Referer</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.referer"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Retry-After</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.retry-after"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Server</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.server"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Trailer</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.trailer"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>User-Agent</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.user-agent"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Vary</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.vary"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>Via</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.via"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>WWW-Authenticate</td>
                     <td>standard</td>
                     <td>
            
                        <xref target="header.www-authenticate"/>
         
                     </td>
                  </tr>
               </tbody>
            </table><!--(END)-->
            <section anchor="field.name.registry" title="Header Field Name Registry">
               <t>The "Hypertext Transfer Protocol (HTTP) Header Field Registry" defines the
namespace for HTTP header field names.</t>
               <t>Any party can request registration of a HTTP header field. See <xref target="considerations.for.new.header.fields"/> for considerations to take
into account when creating a new HTTP header field.</t>
               <t>The "HTTP Header Field Name" registry is located at
"https://www.iana.org/assignments/http-headers/". Registration requests can
be made by following the instructions located there or by sending an email to
the "ietf-http-wg@ietf.org" mailing list.</t>
               <t>Header field names are registered on the advice of a Designated Expert
(appointed by the IESG or their delegate). Header fields with the status
'permanent' are Specification Required (using terminology from
<xref target="RFC8126"/>).</t>
               <t>Registration requests consist of at least the following information:</t>
               <ul>
                  <li>
                     <t>Header field name: The requested field name. It MUST conform to the
   field-name syntax defined in <xref target="field.names"/>, and SHOULD be
   restricted to just letters, digits, hyphen ('-') and underscore ('_')
   characters, with the first character being a letter.</t>
                  </li>
                  <li>
                     <t>Status: "permanent" or "provisional"</t>
                  </li>
                  <li>
                     <t>Specification document(s): Reference to the document that specifies
   the header field, preferably including a URI that can be used to retrieve
   a copy of the document. An indication of the relevant section(s) can also
   be included, but is not required.</t>
                  </li>
               </ul>
               <t>The Expert(s) can define additional fields to be collected in the
registry, in consultation with the community.</t>
               <t>Standards-defined names have a status of "permanent". Other names can also
be registered as permanent, if the Expert(s) find that they are in use, in
consultation with the community. Other names should be registered as
"provisional".</t>
               <t>Provisional entries can be removed by the Expert(s) if — in consultation
with the community — the Expert(s) find that they are not in use. The
Experts can change a provisional entry's status to permanent at any time.</t>
               <t>Note that names can be registered by third parties (including the
Expert(s)), if the Expert(s) determines that an unregistered name is widely
deployed and not likely to be registered in a timely manner otherwise.</t>
            </section>
            <section anchor="field.extensibility" title="Header Field Extensibility">
               <t>
   Header fields are fully extensible: there is no limit on the
   introduction of new field names, each presumably defining new semantics,
   nor on the number of header fields used in a given message.  Existing
   fields are defined in each part of this specification and in many other
   specifications outside this document set.
</t>
               <t>
   New header fields can be defined such that, when they are understood by a
   recipient, they might override or enhance the interpretation of previously
   defined header fields, define preconditions on request evaluation, or
   refine the meaning of responses.
</t>
               <t>
   A proxy <bcp14>MUST</bcp14> forward unrecognized header fields unless the
   field-name is listed in the Connection header field
   (<xref target="Messaging" section="9.1" relative="#header.connection"/>) or the proxy is specifically
   configured to block, or otherwise transform, such fields.
   Other recipients <bcp14>SHOULD</bcp14> ignore unrecognized header fields.
   These requirements allow HTTP's functionality to be enhanced without
   requiring prior update of deployed intermediaries.
</t>
               <t>
   All defined header fields ought to be registered with IANA in the
   "HTTP Header Field Name" registry.
</t>
            </section>
         </section>
         <section anchor="field.values" title="Header Field Values">
            <t>
   This specification does not use ABNF rules to define each
   "Field-Name: Field Value" pair, as was done in earlier editions.
   Instead, this specification uses ABNF rules that are named according to
   each registered field name, wherein the rule defines the valid grammar for
   that field's corresponding field values (i.e., after the field-value
   has been extracted by a generic field parser).
</t>
            <iref primary="true" item="Grammar" subitem="field-value"/>
            <iref primary="true" item="Grammar" subitem="field-vchar"/>
            <iref primary="true" item="Grammar" subitem="field-content"/>
            <sourcecode type="abnf7230"><![CDATA[  field-value    = *( field-content / obs-fold )
  field-content  = field-vchar
                   [ 1*( SP / HTAB / field-vchar ) field-vchar ]
  field-vchar    = VCHAR / obs-text
]]></sourcecode>
            <t>
   Historically, HTTP header field values could be extended over multiple
   lines by preceding each extra line with at least one space or horizontal
   tab (<xref target="imported.rules" format="none">obs-fold</xref>).
   <cref>This document assumes that any such obs-fold has been replaced with one or more
   SP octets prior to interpreting the field value,
   as described in Section 5.2 of [Messaging].</cref>

            </t>
            <t>
   Historically, HTTP has allowed field content with text in the ISO‑8859‑1
   charset <xref target="ISO-8859-1"/>, supporting other charsets only
   through use of <xref target="RFC2047"/> encoding.
   In practice, most HTTP header field values use only a subset of the
   US-ASCII charset <xref target="USASCII"/>. Newly defined
   header fields <bcp14>SHOULD</bcp14> limit their field values to US‑ASCII octets.
   A recipient <bcp14>SHOULD</bcp14> treat other octets in field content (obs‑text) as
   opaque data.
</t>
            <section anchor="field.order" title="Header Field Order">
               <t>
   The order in which header fields with differing field names are
   received is not significant. However, it is good practice to send
   header fields that contain control data first, such as <xref target="header.host" format="none">Host</xref>
   on requests and <xref target="header.date" format="none">Date</xref> on responses, so that implementations
   can decide when not to handle a message as early as possible.
   A server <bcp14>MUST NOT</bcp14> apply a request to the target resource until the entire
   request header section is received, since later header fields might include
   conditionals, authentication credentials, or deliberately misleading
   duplicate header fields that would impact request processing.
</t>
               <t>
   Aside from the well-known exception noted below, a sender <bcp14>MUST NOT</bcp14>
   generate multiple header fields with the same field name in a message, or
   append a header field when a field of the same name already exists in the
   message, unless that field's definition allows multiple field values to be
   recombined as a comma-separated list [i.e., at least one alternative of
   the field's definition allows a comma-separated list, such as an ABNF rule
   of #(values)].
</t>
               <t>
   A recipient <bcp14>MAY</bcp14> combine multiple header fields with the same field name
   into one "field-name: field-value" pair, without changing the semantics of
   the message, by appending each subsequent field value to the combined
   field value in order, separated by a comma. The order in which
   header fields with the same field name are received is therefore
   significant to the interpretation of the combined field value;
   a proxy <bcp14>MUST NOT</bcp14> change the order of these field values when
   forwarding a message.
</t>
               <aside>
                  <t>
   
                     <strong>Note:</strong> In practice, the "Set-Cookie" header field (<xref target="RFC6265"/>)
   often appears multiple times in a response message and does not use the
   list syntax, violating the above requirements on multiple header fields
   with the same name. Since it cannot be combined into a single field-value,
   recipients ought to handle "Set-Cookie" as a special case while processing
   header fields. (See Appendix A.2.3 of <xref target="Kri2001"/> for details.)
  </t>
               </aside>
            </section>
            <section anchor="field.limits" title="Header Field Limits">
               <t>
   HTTP does not place a predefined limit on the length of each header field
   or on the length of the header section as a whole, as described in
   <xref target="conformance"/>. Various ad hoc limitations on individual
   header field length are found in practice, often depending on the specific
   field semantics.
</t>
               <t>
   A server that receives a request header field, or set of fields, larger
   than it wishes to process <bcp14>MUST</bcp14> respond with an appropriate
   <xref target="status.4xx" format="none">4xx (Client Error)</xref> status code. Ignoring such header fields
   would increase the server's vulnerability to request smuggling attacks
   (<xref target="Messaging" section="11.2" relative="#request.smuggling"/>).
</t>
               <t>
   A client <bcp14>MAY</bcp14> discard or truncate received header fields that are larger
   than the client wishes to process if the field semantics are such that the
   dropped value(s) can be safely ignored without changing the
   message framing or response semantics.
</t>
            </section>
            <section anchor="field.components" title="Header Field Value Components">
               <t anchor="delimiters">
   
                  <iref item="Delimiters"/>
   Many HTTP header field values are defined using common syntax
   components, separated by whitespace or specific delimiting characters.
   Delimiters are chosen from the set of US-ASCII visual characters not
   allowed in a <xref target="rule.token.separators" format="none">token</xref> (DQUOTE and "(),/:;&lt;=&gt;?@[\]{}").
</t>
               <section anchor="tokens" title="Tokens">
                  <t anchor="rule.token.separators">
  
  
  Tokens are short textual identifiers that do not include whitespace or
  delimiters.
</t>
                  <iref primary="true" item="Grammar" subitem="token"/>
                  <iref primary="true" item="Grammar" subitem="tchar"/>
                  <sourcecode type="abnf7230"><![CDATA[  token          = 1*tchar

  tchar          = "!" / "#" / "$" / "%" / "&" / "'" / "*"
                 / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
                 / DIGIT / ALPHA
                 ; any VCHAR, except delimiters
]]></sourcecode>
               </section>
               <section anchor="quoted.strings" title="Quoted Strings">
                  <t anchor="rule.quoted-string">
  
  
  
   A string of text is parsed as a single value if it is quoted using
   double-quote marks.
</t>
                  <iref primary="true" item="Grammar" subitem="quoted-string"/>
                  <iref primary="true" item="Grammar" subitem="qdtext"/>
                  <iref primary="true" item="Grammar" subitem="obs-text"/>
                  <sourcecode type="abnf7230"><![CDATA[  quoted-string  = DQUOTE *( qdtext / quoted-pair ) DQUOTE
  qdtext         = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
  obs-text       = %x80-FF
]]></sourcecode>
                  <t anchor="rule.quoted-pair">
  
   The backslash octet ("\") can be used as a single-octet
   quoting mechanism within quoted-string and comment constructs.
   Recipients that process the value of a quoted-string <bcp14>MUST</bcp14> handle a
   quoted-pair as if it were replaced by the octet following the backslash.
</t>
                  <iref primary="true" item="Grammar" subitem="quoted-pair"/>
                  <sourcecode type="abnf7230"><![CDATA[  quoted-pair    = "\" ( HTAB / SP / VCHAR / obs-text )
]]></sourcecode>
                  <t>
   A sender <bcp14>SHOULD NOT</bcp14> generate a quoted-pair in a quoted-string except
   where necessary to quote DQUOTE and backslash octets occurring within that
   string.
   A sender <bcp14>SHOULD NOT</bcp14> generate a quoted-pair in a comment except
   where necessary to quote parentheses ["(" and ")"] and backslash octets
   occurring within that comment.
</t>
               </section>
               <section anchor="comments" title="Comments">
                  <t anchor="rule.comment">
  
  
   Comments can be included in some HTTP header fields by surrounding
   the comment text with parentheses. Comments are only allowed in
   fields containing "comment" as part of their field value definition.
</t>
                  <iref primary="true" item="Grammar" subitem="comment"/>
                  <iref primary="true" item="Grammar" subitem="ctext"/>
                  <sourcecode type="abnf7230"><![CDATA[  comment        = "(" *( ctext / quoted-pair / comment ) ")"
  ctext          = HTAB / SP / %x21-27 / %x2A-5B / %x5D-7E / obs-text
]]></sourcecode>
               </section>
               <section anchor="parameter" title="Parameters">
                  <t anchor="rule.parameter">
   
   
   A parameter is a name=value pair that is often defined within header field
   values as a common syntax for appending auxiliary information to an item.
   Each parameter is usually delimited by an immediately preceding semicolon.
</t>
                  <iref primary="true" item="Grammar" subitem="parameter"/>
                  <iref primary="true" item="Grammar" subitem="parameter-name"/>
                  <iref primary="true" item="Grammar" subitem="parameter-value"/>
                  <sourcecode type="abnf7230"><![CDATA[  parameter       = parameter-name "=" parameter-value
  parameter-name  = token
  parameter-value = ( token / quoted-string )
]]></sourcecode>
                  <t>
   Parameter names are case-insensitive. Parameter values might or might
   not be case-sensitive, depending on the semantics of the parameter
   name. Examples of parameters and some equivalent forms can be seen in
   media types (<xref target="media.type"/>) and the Accept header field
   (<xref target="header.accept"/>).
</t>
                  <t>
   A parameter value that matches the <xref target="rule.token.separators" format="none">token</xref> production can be
   transmitted either as a token or within a quoted-string. The quoted and
   unquoted values are equivalent.
</t>
                  <aside>
                     <t>
    
                        <strong>Note:</strong> Parameters do not allow whitespace (not even "bad" whitespace)
    around the "=" character.
  </t>
                  </aside>
               </section>
            </section>
         </section>
         <section anchor="trailer.fields" title="Trailer Fields">
            <iref item="trailer fields"/>
            <iref item="trailers"/>
            <section anchor="trailers.purpose" title="Purpose">
               <t>
   In some HTTP versions, additional
   metadata can be sent after the initial header section has been completed
   (during or after transmission of the payload body), such as a message
   integrity check, digital signature, or post-processing status.
   For example, the chunked coding in HTTP/1.1 allows a trailer section after
   the payload body (<xref target="Messaging" section="7.1.2" relative="#chunked.trailer.section"/>) which can contain
   trailer fields: field names and values that share the same syntax and
   namespace as header fields but are received after the header section.
</t>
               <t>
   Trailer fields ought to be processed and stored separately from the fields
   in the header section to avoid contradicting message semantics known at
   the time the header section was complete. The presence or absence of
   certain header fields might impact choices made for the routing or
   processing of the message as a whole before the trailers are received;
   those choices cannot be unmade by the later discovery of trailer fields.
</t>
            </section>
            <section anchor="trailers.limitations" title="Limitations">
               <t>
   Many header fields cannot be processed outside the header section because
   their evaluation is necessary prior to receiving the message body, such as
   fields that describe message framing, routing, authentication,
   request modifiers, response controls, or payload format.
   A sender <bcp14>MUST NOT</bcp14> generate a trailer field unless the sender knows the
   corresponding header field name's definition permits the field to be sent
   in trailers.
</t>
               <t>
   Trailer fields can be difficult to process by intermediaries that forward
   messages from one protocol version to another. If the entire message can be
   buffered in transit, some intermediaries could merge trailer fields into
   the header section (as appropriate) before it is forwarded. However, in
   most cases, the trailers are simply discarded.
   A recipient <bcp14>MUST NOT</bcp14> merge a trailer field into a header section unless
   the recipient understands the corresponding header field definition and
   that definition explicitly permits and defines how trailer field values
   can be safely merged.
</t>
               <t>
   A client can send a TE header field indicating "trailers"
   is acceptable, as described in <xref target="Messaging" section="7.4" relative="#header.te"/>, to inform the
   server that it will not discard trailer fields.
</t>
               <t>
   Because of the potential for trailer fields to be discarded in transit, a
   server <bcp14>SHOULD NOT</bcp14> generate trailer fields that it believes are necessary
   for the user agent to receive.
</t>
            </section>
            <section anchor="header.trailer" title="Trailer">
               <iref primary="true" item="Trailer header field"/>
               <t>
   The "Trailer" header field provides a list of field names that the sender
   anticipates sending as trailer fields within that message. This allows a
   recipient to prepare for receipt of the indicated metadata before it starts
   processing the body.
</t>
               <iref primary="true" item="Grammar" subitem="Trailer"/>
               <iref primary="false" item="Grammar" subitem="field-name"/>
               <sourcecode type="abnf7230"><![CDATA[  Trailer = 1#field-name
]]></sourcecode>
               <t>
   For example, a sender might indicate that a message integrity check will
   be computed as the payload is being streamed and provide the final
   signature as a trailer field. This allows a recipient to perform the same
   check on the fly as the payload data is received.
</t>
               <t>
   A sender that intends to generate one or more trailer fields in a message
   <bcp14>SHOULD</bcp14> generate a <xref target="header.trailer" format="none">Trailer</xref> header field in the header
   section of that message to indicate which fields might be present in the
   trailers.
</t>
            </section>
         </section>
         <section anchor="considerations.for.new.header.fields" title="Considerations for New Header Fields">
            <t>
   Authors of specifications defining new fields are advised to choose a short
   but descriptive field name. Short names avoid needless data transmission;
   descriptive names avoid confusion and "squatting" on names that might have
   broader uses.
</t>
            <t>
   To that end, limited-use fields (such as a header confined to a single
   application or use case) are encouraged to use a name that includes its name
   (or an abbreviation) as a prefix; for example, if the Foo Application needs
   a Description field, it might use "Foo-Desc"; "Description" is too generic,
   and "Foo-Description" is needlessly long.
</t>
            <t>
   Header field names ought not be prefixed with "X-"; see
   <xref target="BCP178"/> for further information.
</t>
            <t>
   Other prefixes are sometimes used in HTTP header field names; for example,
   "Accept-" is used in many content negotiation headers. These prefixes are
   only an aid to recognizing the purpose of a header field, and do not
   trigger automatic processing.
</t>
            <t>
   Header field values typically have their syntax defined using ABNF
   (<xref target="RFC5234"/>), using the extension defined in <xref target="abnf.extension"/>
   as necessary, and are usually constrained to the range of US-ASCII characters.
   Header fields needing a greater range of characters can use an encoding
   such as the one defined in <xref target="RFC8187"/>. 
</t>
            <t>
   Leading and trailing whitespace in raw field values is removed upon field
   parsing (<xref target="Messaging" section="5.1" relative="#field.parsing"/>). Field definitions where leading or trailing
   whitespace in values is significant will have to use a container syntax such
   as quoted-string (<xref target="quoted.strings"/>).
</t>
            <t>
   Because commas (",") are used as a generic delimiter between field-values,
   they need to be treated with care if they are allowed in the field-value.
   Typically, components that might contain a comma are protected with
   double-quotes using the quoted-string ABNF production.
</t>
            <t>
   For example, a textual date and a URI (either of which might contain a comma)
   could be safely carried in field-values like these:
</t>
            <artwork type="example"><![CDATA[
  Example-URI-Field: "http://example.com/a.html,foo",
                     "http://without-a-comma.example.com/"
  Example-Date-Field: "Sat, 04 May 1996", "Wed, 14 Sep 2005"
]]></artwork>
            <t>
   Note that double-quote delimiters almost always are used with the
   quoted-string production; using a different syntax inside double-quotes
   will likely cause unnecessary confusion.
</t>
            <t>
   Many header fields (such as <xref target="header.content-type" format="none">Content-Type</xref>, defined in
   <xref target="header.content-type"/>) use a common syntax for parameters
   that allows both unquoted (token) and quoted (quoted-string) syntax for
   a parameter value (<xref target="parameter"/>). Use of common syntax
   allows recipients to reuse existing parser components. When allowing both
   forms, the meaning of a parameter value ought to be the same whether it
   was received as a token or a quoted string.
</t>
            <t>
   Authors of specifications defining new header fields are advised to consider
   documenting:
</t>
            <ul>
               <li>
    
                  <t>Whether the field is a single value or whether it can be a list
    (delimited by commas; see <xref target="field.values"/>).</t>
    
                  <t>If it does not use the list syntax, document how to treat messages
    where the field occurs multiple times (a sensible default would
    be to ignore the field, but this might not always be the right
    choice).</t>
    
                  <t>Note that intermediaries and software libraries might combine
    multiple header field instances into a single one, despite the
    field's definition not allowing the list syntax. A robust format enables
    recipients to discover these situations (good example: "Content-Type",
    as the comma can only appear inside quoted strings;
    bad example: "Location", as a comma can occur inside a URI).</t>
  
               </li>
               <li>
                  <t>Under what conditions the header field can be used; e.g., only in
    responses or requests, in all messages, only on responses to a
    particular request method, etc.</t>
               </li>
               <li>
                  <t>Whether the field should be stored by origin servers that
    understand it upon a PUT request.</t>
               </li>
               <li>
                  <t>Whether the field semantics are further refined by the context,
    such as by existing request methods or status codes.</t>
               </li>
               <li>
                  <t>Whether it is appropriate to list the field-name in the
    Connection header field (i.e., if the header field is to
    be hop-by-hop; see <xref target="Messaging" section="9.1" relative="#header.connection"/>).</t>
               </li>
               <li>
                  <t>Under what conditions intermediaries are allowed to insert,
    delete, or modify the field's value.</t>
               </li>
               <li>
                  <t>Whether it is appropriate to list the field-name in a
    <xref target="header.vary" format="none">Vary</xref> response header field (e.g., when the request header
    field is used by an origin server's content selection algorithm; see
    <xref target="header.vary"/>).</t>
               </li>
               <li>
                  <t>Whether the header field is useful or allowable in trailers (see
    <xref target="Messaging" section="7.1" relative="#chunked.encoding"/>).</t>
               </li>
               <li>
                  <t>Whether the header field ought to be preserved across redirects.</t>
               </li>
               <li>
                  <t>Whether it introduces any additional security considerations, such
    as disclosure of privacy-related data.</t>
               </li>
            </ul>
         </section>
      </section>
      <section anchor="message.routing" title="Message Routing">
         <t>
   HTTP request message routing is determined by each client based on the
   target resource, the client's proxy configuration, and
   establishment or reuse of an inbound connection.  The corresponding
   response routing follows the same connection chain back to the client.
</t>
         <section anchor="target.resource" title="Identifying a Target Resource">
            <iref primary="true" item="target resource"/>
            <iref primary="true" item="target URI"/>
            <t>
   HTTP is used in a wide variety of applications, ranging from
   general-purpose computers to home appliances.  In some cases,
   communication options are hard-coded in a client's configuration.
   However, most HTTP clients rely on the same resource identification
   mechanism and configuration techniques as general-purpose Web browsers.
</t>
            <t>
   HTTP communication is initiated by a user agent for some purpose.
   The purpose is a combination of request semantics
   and a target resource upon which to apply those
   semantics.  A URI reference (<xref target="uri"/>) is typically used as
   an identifier for the "target resource", which a user agent
   would resolve to its absolute form in order to obtain the
   "target URI".  The target URI
   excludes the reference's fragment component, if any,
   since fragment identifiers are reserved for client-side processing
   (<xref target="RFC3986" sectionFormat="comma" section="3.5"/>).
</t>
         </section>
         <section anchor="routing.inbound" title="Routing Inbound">
            <t>
   Once the target URI is determined, a client needs to decide whether
   a network request is necessary to accomplish the desired semantics and,
   if so, where that request is to be directed.
</t>
            <t>
   If the client has a cache <xref target="Caching"/> and the request can be
   satisfied by it, then the request is
   usually directed there first.
</t>
            <t>
   If the request is not satisfied by a cache, then a typical client will
   check its configuration to determine whether a proxy is to be used to
   satisfy the request.  Proxy configuration is implementation-dependent,
   but is often based on URI prefix matching, selective authority matching,
   or both, and the proxy itself is usually identified by an "http" or
   "https" URI.  If a proxy is applicable, the client connects inbound by
   establishing (or reusing) a connection to that proxy.
</t>
            <t>
   If no proxy is applicable, a typical client will invoke a handler routine,
   usually specific to the target URI's scheme, to connect directly
   to an authority for the target resource.  How that is accomplished is
   dependent on the target URI scheme and defined by its associated
   specification, similar to how this specification defines origin server
   access for resolution of the "http" (<xref target="http.uri"/>) and
   "https" (<xref target="https.uri"/>) schemes.
</t>
            <t>
   HTTP requirements regarding connection management are defined in
   <xref target="Messaging" section="9" relative="#connection.management"/>.
</t>
         </section>
         <section anchor="https.initiation" title="Initiating HTTP Over TLS">
            <t>
   Conceptually, HTTP/TLS is very simple. Simply use HTTP over TLS
   precisely as you would use HTTP over TCP.
</t>
            <t>
   The agent acting as the HTTP client should also act as the TLS
   client.  It should initiate a connection to the server on the
   appropriate port and then send the TLS ClientHello to begin the TLS
   handshake. When the TLS handshake has finished. The client may then
   initiate the first HTTP request.  All HTTP data MUST be sent as TLS
   "application data".  Normal HTTP behavior, including retained
   connections should be followed.
</t>
            <section anchor="https.identify.server" title="Identifying HTTPS Servers">
               <t>
   In general, HTTP/TLS requests are generated by dereferencing a URI.
   As a consequence, the hostname for the server is known to the client.
   If the hostname is available, the client <bcp14>MUST</bcp14> check it against the
   server's identity as presented in the server's Certificate message,
   in order to prevent man-in-the-middle attacks.
</t>
               <t>
   If the client has external information as to the expected identity of
   the server, the hostname check <bcp14>MAY</bcp14> be omitted. (For instance, a
   client may be connecting to a machine whose address and hostname are
   dynamic but the client knows the certificate that the server will
   present.) In such cases, it is important to narrow the scope of
   acceptable certificates as much as possible in order to prevent man
   in the middle attacks.  In special cases, it may be appropriate for
   the client to simply ignore the server's identity, but it must be
   understood that this leaves the connection open to active attack.
</t>
               <t>
   If a subjectAltName extension of type dNSName is present, that <bcp14>MUST</bcp14>
   be used as the identity. Otherwise, the (most specific) Common Name
   field in the Subject field of the certificate <bcp14>MUST</bcp14> be used. Although
   the use of the Common Name is existing practice, it is deprecated and
   Certification Authorities are encouraged to use the dNSName instead.
</t>
               <t>
   Matching is performed using the matching rules specified by
   <xref target="RFC5280"/>.  If more than one identity of a given type is present in
   the certificate (e.g., more than one dNSName name, a match in any one
   of the set is considered acceptable.) Names may contain the wildcard
   character * which is considered to match any single domain name
   component or component fragment. E.g., *.a.com matches foo.a.com but
   not bar.foo.a.com. f*.com matches foo.com but not bar.com.
</t>
               <t>
   In some cases, the URI is specified as an IP address rather than a
   hostname. In this case, the iPAddress subjectAltName must be present
   in the certificate and must exactly match the IP in the URI.
</t>
               <t>
   If the hostname does not match the identity in the certificate, user
   oriented clients MUST either notify the user (clients MAY give the
   user the opportunity to continue with the connection in any case) or
   terminate the connection with a bad certificate error. Automated
   clients <bcp14>MUST</bcp14> log the error to an appropriate audit log (if available)
   and SHOULD terminate the connection (with a bad certificate error).
   Automated clients MAY provide a configuration setting that disables
   this check, but <bcp14>MUST</bcp14> provide a setting which enables it.
</t>
               <t>
   Note that in many cases the URI itself comes from an untrusted
   source. The above-described check provides no protection against
   attacks where this source is compromised. For example, if the URI was
   obtained by clicking on an HTML page which was itself obtained
   without using HTTP/TLS, a man in the middle could have replaced the
   URI.  In order to prevent this form of attack, users should carefully
   examine the certificate presented by the server to determine if it
   meets their expectations.
</t>
            </section>
            <section anchor="https.identify.client" title="Identifying HTTPS Clients">
               <t>
   Typically, the server has no external knowledge of what the client's
   identity ought to be and so checks (other than that the client has a
   certificate chain rooted in an appropriate CA) are not possible. If a
   server has such knowledge (typically from some source external to
   HTTP or TLS) it <bcp14>SHOULD</bcp14> check the identity as described above.
</t>
            </section>
         </section>
         <section anchor="effective.request.uri" title="Effective Request URI">
            <iref primary="true" item="effective request URI"/>
            <t>
   Once an inbound connection is obtained,
   the client sends an HTTP request message (<xref target="Messaging" section="2" relative="#http.message"/>).
</t>
            <t>
   Depending on the nature of the request, the client's target URI might be
   split into components and transmitted (or implied) within various parts of
   a request message. These parts are recombined by each recipient, in
   accordance with their local configuration and incoming connection context,
   to form an "effective request URI" for identifying the
   intended target resource with respect to that server.
   <xref target="Messaging" section="3.3" relative="#h1.effective.request.uri"/> defines how a server
   determines the effective request URI for an HTTP/1.1 request.
</t>
            <t>
   For a user agent, the effective request URI is the target URI.
</t>
            <t>
   Once the effective request URI has been constructed, an origin server needs
   to decide whether or not to provide service for that URI via the connection
   in which the request was received. For example, the request might have been
   misdirected, deliberately or accidentally, such that the information within
   a received <xref target="imported.rules" format="none">request-target</xref> or <xref target="header.host" format="none">Host</xref> header
   field differs from the host or port upon which the connection has been
   made. If the connection is from a trusted gateway, that inconsistency might
   be expected; otherwise, it might indicate an attempt to bypass security
   filters, trick the server into delivering non-public content, or poison a
   cache. See <xref target="security.considerations"/> for security
   considerations regarding message routing.
</t>
         </section>
         <section anchor="header.host" title="Host">
            <iref primary="true" item="Host header field"/>
            <t>
   The "Host" header field in a request provides the host and port
   information from the target URI, enabling the origin
   server to distinguish among resources while servicing requests
   for multiple host names on a single IP address.
</t>
            <iref primary="true" item="Grammar" subitem="Host"/>
            <sourcecode type="abnf7230"><![CDATA[  Host = uri-host [ ":" port ] ; Section 2.4
]]></sourcecode>
            <t>
   A client <bcp14>MUST</bcp14> send a Host header field in all HTTP/1.1 request messages.
   If the target URI includes an authority component, then a client <bcp14>MUST</bcp14>
   send a field-value for Host that is identical to that authority
   component, excluding any userinfo subcomponent and its "@" delimiter
   (<xref target="http.uri"/>).
   If the authority component is missing or undefined for the target URI,
   then a client <bcp14>MUST</bcp14> send a Host header field with an empty field-value.
</t>
            <t>
   Since the Host field-value is critical information for handling a request,
   a user agent <bcp14>SHOULD</bcp14> generate Host as the first header field following the
   request-line.
</t>
            <t>
   For example, a GET request to the origin server for
   &lt;http://www.example.org/pub/WWW/&gt; would begin with:
</t>
            <artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
  GET /pub/WWW/ HTTP/1.1
  Host: www.example.org
  ]]></artwork>
            <t>
   A client <bcp14>MUST</bcp14> send a Host header field in an HTTP/1.1 request even
   if the request-target is in the absolute-form, since this
   allows the Host information to be forwarded through ancient HTTP/1.0
   proxies that might not have implemented Host.
</t>
            <t>
   When a proxy receives a request with an absolute-form of
   request-target, the proxy <bcp14>MUST</bcp14> ignore the received
   Host header field (if any) and instead replace it with the host
   information of the request-target.  A proxy that forwards such a request
   <bcp14>MUST</bcp14> generate a new Host field-value based on the received
   request-target rather than forward the received Host field-value.
</t>
            <t>
   Since the Host header field acts as an application-level routing
   mechanism, it is a frequent target for malware seeking to poison
   a shared cache or redirect a request to an unintended server.
   An interception proxy is particularly vulnerable if it relies on
   the Host field-value for redirecting requests to internal
   servers, or for use as a cache key in a shared cache, without
   first verifying that the intercepted connection is targeting a
   valid IP address for that host.
</t>
            <t>
   A server <bcp14>MUST</bcp14> respond with a <xref target="status.400" format="none">400 (Bad Request)</xref> status code
   to any HTTP/1.1 request message that lacks a Host header field and
   to any request message that contains more than one Host header field
   or a Host header field with an invalid field-value.
</t>
         </section>
         <section anchor="message.forwarding" title="Message Forwarding">
            <t>
   As described in <xref target="intermediaries"/>, intermediaries can serve
   a variety of roles in the processing of HTTP requests and responses.
   Some intermediaries are used to improve performance or availability.
   Others are used for access control or to filter content.
   Since an HTTP stream has characteristics similar to a pipe-and-filter
   architecture, there are no inherent limits to the extent an intermediary
   can enhance (or interfere) with either direction of the stream.
</t>
            <t>
   An intermediary not acting as a tunnel <bcp14>MUST</bcp14> implement the
   Connection header field, as specified in
   <xref target="Messaging" section="9.1" relative="#header.connection"/>, and exclude fields from being forwarded
   that are only intended for the incoming connection.
</t>
            <t>
   An intermediary <bcp14>MUST NOT</bcp14> forward a message to itself unless it is
   protected from an infinite request loop. In general, an intermediary ought
   to recognize its own server names, including any aliases, local variations,
   or literal IP addresses, and respond to such requests directly.
</t>
            <t>
   An HTTP message can be parsed as a stream for incremental processing or
   forwarding downstream.  However, recipients cannot rely on incremental
   delivery of partial messages, since some implementations will buffer or
   delay message forwarding for the sake of network efficiency, security
   checks, or payload transformations.
</t>
            <section anchor="header.via" title="Via">
               <iref primary="true" item="Via header field"/>
               <t>
   The "Via" header field indicates the presence of intermediate protocols and
   recipients between the user agent and the server (on requests) or between
   the origin server and the client (on responses), similar to the
   "Received" header field in email
   (<xref target="RFC5322" section="3.6.7"/>).
   Via can be used for tracking message forwards,
   avoiding request loops, and identifying the protocol capabilities of
   senders along the request/response chain.
</t>
               <iref primary="true" item="Grammar" subitem="Via"/>
               <iref primary="true" item="Grammar" subitem="received-protocol"/>
               <iref primary="true" item="Grammar" subitem="protocol-name"/>
               <iref primary="true" item="Grammar" subitem="protocol-version"/>
               <iref primary="true" item="Grammar" subitem="received-by"/>
               <iref primary="true" item="Grammar" subitem="pseudonym"/>
               <sourcecode type="abnf7230"><![CDATA[  Via = 1#( received-protocol RWS received-by [ RWS comment ] )

  received-protocol = [ protocol-name "/" ] protocol-version
                      ; see [Messaging], Section 9.9
  received-by       = ( uri-host [ ":" port ] ) / pseudonym
  pseudonym         = token
]]></sourcecode>
               <t>
   Multiple Via field values represent each proxy or gateway that has
   forwarded the message. Each intermediary appends its own information
   about how the message was received, such that the end result is ordered
   according to the sequence of forwarding recipients.
</t>
               <t>
   A proxy <bcp14>MUST</bcp14> send an appropriate Via header field, as described below, in
   each message that it forwards.
   An HTTP-to-HTTP gateway <bcp14>MUST</bcp14> send an appropriate Via header field in
   each inbound request message and <bcp14>MAY</bcp14> send a Via header field in
   forwarded response messages.
</t>
               <t>
   For each intermediary, the received-protocol indicates the protocol and
   protocol version used by the upstream sender of the message. Hence, the
   Via field value records the advertised protocol capabilities of the
   request/response chain such that they remain visible to downstream
   recipients; this can be useful for determining what backwards-incompatible
   features might be safe to use in response, or within a later request, as
   described in <xref target="protocol.version"/>. For brevity, the protocol-name
   is omitted when the received protocol is HTTP.
</t>
               <t>
   The received-by portion of the field value is normally the host and optional
   port number of a recipient server or client that subsequently forwarded the
   message.
   However, if the real host is considered to be sensitive information, a
   sender <bcp14>MAY</bcp14> replace it with a pseudonym. If a port is not provided,
   a recipient <bcp14>MAY</bcp14> interpret that as meaning it was received on the default
   TCP port, if any, for the received-protocol.
</t>
               <t>
   A sender <bcp14>MAY</bcp14> generate comments in the Via header field to identify the
   software of each recipient, analogous to the <xref target="header.user-agent" format="none">User-Agent</xref> and
   <xref target="header.server" format="none">Server</xref> header fields. However, all comments in the Via field
   are optional, and a recipient <bcp14>MAY</bcp14> remove them prior to forwarding the
   message.
</t>
               <t>
   For example, a request message could be sent from an HTTP/1.0 user
   agent to an internal proxy code-named "fred", which uses HTTP/1.1 to
   forward the request to a public proxy at p.example.net, which completes
   the request by forwarding it to the origin server at www.example.com.
   The request received by www.example.com would then have the following
   Via header field:
</t>
               <artwork type="example"><![CDATA[
  Via: 1.0 fred, 1.1 p.example.net
]]></artwork>
               <t>
   An intermediary used as a portal through a network firewall
   <bcp14>SHOULD NOT</bcp14> forward the names and ports of hosts within the firewall
   region unless it is explicitly enabled to do so. If not enabled, such an
   intermediary <bcp14>SHOULD</bcp14> replace each received-by host of any host behind the
   firewall by an appropriate pseudonym for that host.
</t>
               <t>
   An intermediary <bcp14>MAY</bcp14> combine an ordered subsequence of Via header
   field entries into a single such entry if the entries have identical
   received-protocol values. For example,
</t>
               <artwork type="example"><![CDATA[
  Via: 1.0 ricky, 1.1 ethel, 1.1 fred, 1.0 lucy
]]></artwork>
               <t>
  could be collapsed to
</t>
               <artwork type="example"><![CDATA[
  Via: 1.0 ricky, 1.1 mertz, 1.0 lucy
]]></artwork>
               <t>
   A sender <bcp14>SHOULD NOT</bcp14> combine multiple entries unless they are all
   under the same organizational control and the hosts have already been
   replaced by pseudonyms. A sender <bcp14>MUST NOT</bcp14> combine entries that
   have different received-protocol values.
</t>
            </section>
            <section anchor="message.transformations" title="Transformations">
               <iref primary="true" item="transforming proxy"/>
               <iref primary="true" item="non-transforming proxy"/>
               <t>
   Some intermediaries include features for transforming messages and their
   payloads. A proxy might, for example, convert between image formats in
   order to save cache space or to reduce the amount of traffic on a slow
   link. However, operational problems might occur when these transformations
   are applied to payloads intended for critical applications, such as medical
   imaging or scientific data analysis, particularly when integrity checks or
   digital signatures are used to ensure that the payload received is
   identical to the original.
</t>
               <t>
   An HTTP-to-HTTP proxy is called a "transforming proxy"
   if it is designed or configured to modify messages in a semantically
   meaningful way (i.e., modifications, beyond those required by normal
   HTTP processing, that change the message in a way that would be
   significant to the original sender or potentially significant to
   downstream recipients).  For example, a transforming proxy might be
   acting as a shared annotation server (modifying responses to include
   references to a local annotation database), a malware filter, a
   format transcoder, or a privacy filter. Such transformations are presumed
   to be desired by whichever client (or client organization) selected the
   proxy.
</t>
               <t>
   If a proxy receives a request-target with a host name that is not a
   fully qualified domain name, it <bcp14>MAY</bcp14> add its own domain to the host name
   it received when forwarding the request.  A proxy <bcp14>MUST NOT</bcp14> change the
   host name if the request-target contains a fully qualified domain name.
</t>
               <t>
   A proxy <bcp14>MUST NOT</bcp14> modify the "absolute-path" and "query" parts of the
   received request-target when forwarding it to the next inbound server,
   except as noted above to replace an empty path with "/" or "*".
</t>
               <t>
   A proxy <bcp14>MAY</bcp14> modify the message body through application
   or removal of a transfer coding (<xref target="Messaging" section="7" relative="#transfer.codings"/>).
</t>
               <t>
   A proxy <bcp14>MUST NOT</bcp14> transform the payload (<xref target="payload"/>) of a message that
   contains a no-transform cache-control response directive (<xref target="Caching" section="5.2" relative="#header.cache-control"/>).
</t>
               <t>
   A proxy <bcp14>MAY</bcp14> transform the payload of a message
   that does not contain a no-transform cache-control directive.
   A proxy that transforms the payload of a <xref target="status.200" format="none">200 (OK)</xref> response
   can inform downstream recipients that a transformation has been
   applied by changing the response status code to
   <xref target="status.203" format="none">203 (Non-Authoritative Information)</xref> (<xref target="status.203"/>).
</t>
               <t>
   A proxy <bcp14>SHOULD NOT</bcp14> modify header fields that provide information about
   the endpoints of the communication chain, the resource state, or the
   selected representation (other than the payload) unless the field's
   definition specifically allows such modification or the modification is
   deemed necessary for privacy or security.
</t>
            </section>
         </section>
      </section>
      <section anchor="representations" title="Representations">
         <iref primary="true" item="representation"/>
         <iref primary="true" item="selected representation"/>
         <t>
   Considering that a resource could be anything, and that the uniform
   interface provided by HTTP is similar to a window through which one can
   observe and act upon such a thing only through the communication of
   messages to some independent actor on the other side, an abstraction is
   needed to represent ("take the place of") the current or desired state of
   that thing in our communications. That abstraction is called a
   representation <xref target="REST"/>.
</t>
         <t>
   For the purposes of HTTP, a "representation" is information
   that is intended to reflect a past, current, or desired state of a given
   resource, in a format that can be readily communicated via the protocol,
   and that consists of a set of representation metadata and a potentially
   unbounded stream of representation data.
</t>
         <t>
   An origin server might be provided with, or be capable of generating, multiple
   representations that are each intended to reflect the current state of a
   <xref target="target.resource" format="none">target resource</xref>. In such cases, some algorithm is used by
   the origin server to select one of those representations as most applicable
   to a given request, usually based on <xref target="content.negotiation" format="none">content negotiation</xref>.
   This "selected representation" is used to provide the data
   and metadata for evaluating conditional requests (<xref target="preconditions"/>)
   and constructing the payload for <xref target="status.200" format="none">200 (OK)</xref> and
   <xref target="status.304" format="none">304 (Not Modified)</xref> responses to GET (<xref target="GET"/>).
</t>
         <section anchor="representation.data" title="Representation Data">
            <t>
   The representation data associated with an HTTP message is
   either provided as the payload body of the message or
   referred to by the message semantics and the effective request
   URI.  The representation data is in a format and encoding defined by
   the representation metadata header fields.
</t>
            <t>
   The data type of the representation data is determined via the header fields
   <xref target="header.content-type" format="none">Content-Type</xref> and <xref target="header.content-encoding" format="none">Content-Encoding</xref>.
   These define a two-layer, ordered encoding model:
</t>
            <artwork type="example"><![CDATA[
  representation-data := Content-Encoding( Content-Type( bits ) )
]]></artwork>
            <section anchor="media.type" title="Media Type">
               <t>
   HTTP uses media types <xref target="RFC2046"/> in the
   <xref target="header.content-type" format="none">Content-Type</xref> (<xref target="header.content-type"/>)
   and <xref target="header.accept" format="none">Accept</xref> (<xref target="header.accept"/>) header fields in
   order to provide open and extensible data typing and type negotiation.
   Media types define both a data format and various processing models:
   how to process that data in accordance with each context in which it
   is received.
</t>
               <iref primary="true" item="Grammar" subitem="media-type"/>
               <iref primary="true" item="Grammar" subitem="type"/>
               <iref primary="true" item="Grammar" subitem="subtype"/>
               <sourcecode type="abnf7230"><![CDATA[  media-type = type "/" subtype *( OWS ";" OWS parameter )
  type       = token
  subtype    = token
]]></sourcecode>
               <t>
   The type and subtype tokens are case-insensitive.
</t>
               <t>
   The type/subtype <bcp14>MAY</bcp14> be followed by semicolon-delimited parameters
   (<xref target="parameter"/>) in the form of name=value pairs.
   The presence or absence of a parameter might be significant to the
   processing of a media type, depending on its definition within the media
   type registry.
   Parameter values might or might not be case-sensitive, depending on the
   semantics of the parameter name.
</t>
               <t>
   For example, the following media types are equivalent in describing HTML
   text data encoded in the UTF-8 character encoding scheme, but the first is
   preferred for consistency (the "charset" parameter value is defined as
   being case-insensitive in <xref target="RFC2046" sectionFormat="comma" section="4.1.2"/>):
</t>
               <artwork type="example"><![CDATA[
  text/html;charset=utf-8
  Text/HTML;Charset="utf-8"
  text/html; charset="utf-8"
  text/html;charset=UTF-8
]]></artwork>
               <t>
   Media types ought to be registered with IANA according to the
   procedures defined in <xref target="BCP13"/>.
</t>
               <section anchor="charset" title="Charset">
                  <t>
   HTTP uses charset names to indicate or negotiate the
   character encoding scheme of a textual representation
   <xref target="RFC6365"/>.
   A charset is identified by a case-insensitive token.
</t>
                  <iref primary="true" item="Grammar" subitem="charset"/>
                  <sourcecode type="abnf7230"><![CDATA[  charset = token
]]></sourcecode>
                  <t>
   Charset names ought to be registered in the IANA "Character Sets" registry
   (<eref target="https://www.iana.org/assignments/character-sets"/>)
   according to the procedures defined in <xref target="RFC2978" section="2"/>.
</t>
                  <aside>
                     <t>
    
                        <strong>Note:</strong> In theory, charset names are defined by the "mime-charset" ABNF
    rule defined in <xref target="RFC2978" section="2.3"/> (as
    corrected in <xref target="Err1912"/>). That rule allows two characters
    that are not included in "token" ("{" and "}"), but no charset name
    registered at the time of this writing includes braces
    (see <xref target="Err5433"/>).
  </t>
                  </aside>
               </section>
               <section anchor="canonicalization.and.text.defaults" title="Canonicalization and Text Defaults">
                  <t>
   Media types are registered with a canonical form in order to be
   interoperable among systems with varying native encoding formats.
   Representations selected or transferred via HTTP ought to be in canonical
   form, for many of the same reasons described by the Multipurpose Internet
   Mail Extensions (MIME) <xref target="RFC2045"/>.
   However, the performance characteristics of email deployments (i.e., store
   and forward messages to peers) are significantly different from those
   common to HTTP and the Web (server-based information services).
   Furthermore, MIME's constraints for the sake of compatibility with older
   mail transfer protocols do not apply to HTTP
   (see <xref target="Messaging" section="B" relative="#differences.between.http.and.mime"/>).
</t>
                  <t>
   MIME's canonical form requires that media subtypes of the "text"
   type use CRLF as the text line break. HTTP allows the
   transfer of text media with plain CR or LF alone representing a line
   break, when such line breaks are consistent for an entire representation.
   An HTTP sender <bcp14>MAY</bcp14> generate, and a recipient <bcp14>MUST</bcp14> be able to parse,
   line breaks in text media that consist of CRLF, bare CR, or bare LF.
   In addition, text media in HTTP is not limited to charsets that
   use octets 13 and 10 for CR and LF, respectively.
   This flexibility regarding line breaks applies only to text within a
   representation that has been assigned a "text" media type; it does not
   apply to "multipart" types or HTTP elements outside the payload body
   (e.g., header fields).
</t>
                  <t>
   If a representation is encoded with a content-coding, the underlying
   data ought to be in a form defined above prior to being encoded.
</t>
               </section>
               <section anchor="multipart.types" title="Multipart Types">
                  <t>
   MIME provides for a number of "multipart" types — encapsulations of
   one or more representations within a single message body. All multipart
   types share a common syntax, as defined in <xref target="RFC2046" section="5.1.1"/>,
   and include a boundary parameter as part of the media type
   value. The message body is itself a protocol element; a sender <bcp14>MUST</bcp14>
   generate only CRLF to represent line breaks between body parts.
</t>
                  <t>
   HTTP message framing does not use the multipart boundary as an indicator
   of message body length, though it might be used by implementations that
   generate or process the payload. For example, the "multipart/form-data"
   type is often used for carrying form data in a request, as described in
   <xref target="RFC7578"/>, and the "multipart/byteranges" type is defined
   by this specification for use in some <xref target="status.206" format="none">206 (Partial Content)</xref>
   responses (see <xref target="status.206"/>).
</t>
               </section>
            </section>
            <section anchor="content.codings" title="Content Codings">
               <iref primary="true" item="content coding"/>
               <iref primary="true" item="compress (content coding)"/>
               <iref primary="true" item="x-compress (content coding)"/>
               <iref primary="true" item="deflate (content coding)"/>
               <iref primary="true" item="gzip (content coding)"/>
               <iref primary="true" item="x-gzip (content coding)"/>
               <t>
   Content coding values indicate an encoding transformation that has
   been or can be applied to a representation. Content codings are primarily
   used to allow a representation to be compressed or otherwise usefully
   transformed without losing the identity of its underlying media type
   and without loss of information. Frequently, the representation is stored
   in coded form, transmitted directly, and only decoded by the final recipient.
</t>
               <iref primary="true" item="Grammar" subitem="content-coding"/>
               <sourcecode type="abnf7230"><![CDATA[  content-coding   = token
]]></sourcecode>
               <t>
   Content-coding values are used in the
   <xref target="header.accept-encoding" format="none">Accept-Encoding</xref> (<xref target="header.accept-encoding"/>)
   and <xref target="header.content-encoding" format="none">Content-Encoding</xref> (<xref target="header.content-encoding"/>)
   header fields.
</t>
               <t>
  The following content-coding values are defined by this specification:
</t>
               <table align="left" anchor="iana.content.coding.registration.table">
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Reference</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>compress</td>
                        <td>UNIX "compress" data format <xref target="Welch"/>
                        </td>
                        <td>
                           <xref target="compress.coding"/>
                        </td>
                     </tr>
                     <tr>
                        <td>deflate</td>
                        <td>"deflate" compressed data (<xref target="RFC1951"/>) inside
      the "zlib" data format (<xref target="RFC1950"/>)</td>
                        <td>
                           <xref target="deflate.coding"/>
                        </td>
                     </tr>
                     <tr>
                        <td>gzip</td>
                        <td>GZIP file format <xref target="RFC1952"/>
                        </td>
                        <td>
                           <xref target="gzip.coding"/>
                        </td>
                     </tr>
                     <tr>
                        <td>identity</td>
                        <td>Reserved
      (synonym for "no encoding" in <xref target="header.accept-encoding" format="none">Accept-Encoding</xref>)</td>
                        <td>
                           <xref target="header.accept-encoding"/>
                        </td>
                     </tr>
                     <tr>
                        <td>x-compress</td>
                        <td>Deprecated (alias for compress)</td>
                        <td>
                           <xref target="compress.coding"/>
                        </td>
                     </tr>
                     <tr>
                        <td>x-gzip</td>
                        <td>Deprecated (alias for gzip)</td>
                        <td>
                           <xref target="gzip.coding"/>
                        </td>
                     </tr>
                  </tbody>
               </table>
               <section anchor="compress.coding" title="Compress Coding">
                  <iref item="compress (Coding Format)"/>
                  <t>
   The "compress" coding is an adaptive Lempel-Ziv-Welch (LZW) coding
   <xref target="Welch"/> that is commonly produced by the UNIX file
   compression program "compress".
   A recipient <bcp14>SHOULD</bcp14> consider "x-compress" to be equivalent to "compress".
</t>
               </section>
               <section anchor="deflate.coding" title="Deflate Coding">
                  <iref item="deflate (Coding Format)"/>
                  <t>
   The "deflate" coding is a "zlib" data format <xref target="RFC1950"/>
   containing a "deflate" compressed data stream <xref target="RFC1951"/>
   that uses a combination of the Lempel-Ziv (LZ77) compression algorithm and
   Huffman coding.
</t>
                  <aside>
                     <t>
    
                        <strong>Note:</strong> Some non-conformant implementations send the "deflate"
    compressed data without the zlib wrapper.
   </t>
                  </aside>
               </section>
               <section anchor="gzip.coding" title="Gzip Coding">
                  <iref item="gzip (Coding Format)"/>
                  <t>
   The "gzip" coding is an LZ77 coding with a 32-bit Cyclic Redundancy Check
   (CRC) that is commonly
   produced by the gzip file compression program <xref target="RFC1952"/>.
   A recipient <bcp14>SHOULD</bcp14> consider "x-gzip" to be equivalent to "gzip".
</t>
               </section>
               <section anchor="content.coding.extensibility" title="Content Coding Extensibility">
                  <t>
   Additional content codings, outside the scope of this specification, have
   been specified for use in HTTP. All such content codings ought to be
   registered within the "HTTP Content Coding Registry".
</t>
                  <section anchor="content.coding.registry" title="Content Coding Registry">
                     <t>
   The "HTTP Content Coding Registry", maintained by
   IANA at <eref target="https://www.iana.org/assignments/http-parameters/"/>,
   registers <xref target="content.codings" format="none">content-coding</xref> names.
</t>
                     <t>
   Content coding registrations <bcp14>MUST</bcp14> include the following fields:
</t>
                     <ul>
                        <li>Name</li>
                        <li>Description</li>
                        <li>Pointer to specification text</li>
                     </ul>
                     <t>
   Names of content codings <bcp14>MUST NOT</bcp14> overlap with names of transfer codings
   (<xref target="Messaging" section="7" relative="#transfer.codings"/>), unless the encoding transformation is identical (as
   is the case for the compression codings defined in
   <xref target="content.codings"/>).
</t>
                     <t>
   Values to be added to this namespace require IETF Review
   (see <xref target="RFC8126" section="4.8"/>) and <bcp14>MUST</bcp14>
   conform to the purpose of content coding defined in
   <xref target="content.codings"/>.
</t>
                  </section>
               </section>
            </section>
            <section anchor="language.tags" title="Language Tags">
               <t>
   A language tag, as defined in <xref target="RFC5646"/>, identifies a
   natural language spoken, written, or otherwise conveyed by human beings for
   communication of information to other human beings. Computer languages are
   explicitly excluded.
</t>
               <t>
   HTTP uses language tags within the <xref target="header.accept-language" format="none">Accept-Language</xref> and
   <xref target="header.content-language" format="none">Content-Language</xref> header fields.
   <xref target="header.accept-language" format="none">Accept-Language</xref> uses the broader language-range production
   defined in <xref target="header.accept-language"/>, whereas
   <xref target="header.content-language" format="none">Content-Language</xref> uses the language-tag production defined
   below.
</t>
               <iref primary="true" item="Grammar" subitem="language-tag"/>
               <sourcecode type="abnf7230"><![CDATA[  language-tag = <Language-Tag, see [RFC5646], Section 2.1>
]]></sourcecode>
               <t>
   A language tag is a sequence of one or more case-insensitive subtags, each
   separated by a hyphen character ("-", %x2D).  In most cases, a language tag
   consists of a primary language subtag that identifies a broad family of
   related languages (e.g., "en" = English), which is optionally followed by a
   series of subtags that refine or narrow that language's range (e.g.,
   "en-CA" = the variety of English as communicated in Canada).
   Whitespace is not allowed within a language tag.
   Example tags include:
</t>
               <artwork type="example"><![CDATA[
  fr, en-US, es-419, az-Arab, x-pig-latin, man-Nkoo-GN
]]></artwork>
               <t>
   See <xref target="RFC5646"/> for further information. 
</t>
            </section>
            <section anchor="range.units" title="Range Units">
               <t>
   Representation data can be partitioned into subranges when there are
   addressable structural units inherent to that data's content coding or
   media type. For example, octet (a.k.a., byte) boundaries are a structural
   unit common to all representation data, allowing partitions of the data to
   be identified as a range of bytes at some offset from the start or end of
   that data.
</t>
               <t>
   This general notion of a "range unit" is used
   in the <xref target="header.accept-ranges" format="none">Accept-Ranges</xref> (<xref target="header.accept-ranges"/>)
   response header field to advertise support for range requests, the
   <xref target="header.range" format="none">Range</xref> (<xref target="header.range"/>) request header field
   to delineate the parts of a representation that are requested, and the
   <xref target="header.content-range" format="none">Content-Range</xref> (<xref target="header.content-range"/>)
   payload header field to describe which part of a representation is being
   transferred.
</t>
               <iref primary="true" item="Grammar" subitem="range-unit"/>
               <sourcecode type="abnf7230"><![CDATA[  range-unit       = token
]]></sourcecode>
               <t>
   The following range unit names are defined by this document:
</t>
               <table align="left" anchor="iana.range.units.table">
                  <thead>
                     <tr>
                        <th>Range Unit Name</th>
                        <th>Description</th>
                        <th>Reference</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>bytes</td>
                        <td>a range of octets</td>
                        <td>
                           <xref target="byte.ranges"/>
                        </td>
                     </tr>
                     <tr>
                        <td>none</td>
                        <td>reserved as keyword to indicate range requests are not supported</td>
                        <td>
                           <xref target="header.accept-ranges"/>
                        </td>
                     </tr>
                  </tbody>
               </table>
               <section anchor="range.specifiers" title="Range Specifiers">
                  <t>
   Ranges are expressed in terms of a range unit paired with a set of range
   specifiers. The range unit name determines what kinds of range-spec
   are applicable to its own specifiers. Hence, the following gramar is
   generic: each range unit is expected to specify requirements on when
   <xref target="rule.int-range" format="none">int-range</xref>, <xref target="rule.suffix-range" format="none">suffix-range</xref>, and
   <xref target="rule.other-range" format="none">other-range</xref> are allowed.
</t>
                  <t anchor="rule.ranges-specifier">
  
  
  
   A range request can specify a single range or a set
   of ranges within a single representation.
</t>
                  <iref primary="true" item="Grammar" subitem="ranges-specifier"/>
                  <iref primary="true" item="Grammar" subitem="range-set"/>
                  <iref primary="true" item="Grammar" subitem="range-spec"/>
                  <sourcecode type="abnf7230"><![CDATA[  ranges-specifier = range-unit "=" range-set
  range-set        = 1#range-spec
  range-spec       = int-range
                   / suffix-range
                   / other-range
]]></sourcecode>
                  <t anchor="rule.int-range">
  
  
  
   An <xref target="rule.int-range" format="none">int-range</xref> is a range expressed as two non-negative
   integers or as one non-negative integer through to the end of the
   representation data.
   The range unit specifies what the integers mean (e.g., they might indicate
   unit offsets from the beginning, inclusive numbered parts, etc.).
</t>
                  <iref primary="true" item="Grammar" subitem="int-range"/>
                  <iref primary="true" item="Grammar" subitem="first-pos"/>
                  <iref primary="true" item="Grammar" subitem="last-pos"/>
                  <sourcecode type="abnf7230"><![CDATA[  int-range     = first-pos "-" [ last-pos ]
  first-pos     = 1*DIGIT
  last-pos      = 1*DIGIT
]]></sourcecode>
                  <t>
   An <xref target="rule.int-range" format="none">int-range</xref> is invalid if the
   <xref target="rule.int-range" format="none">last-pos</xref> value is present and less than the
   <xref target="rule.int-range" format="none">first-pos</xref>.
</t>
                  <t anchor="rule.suffix-range">
  
  
   A <xref target="rule.suffix-range" format="none">suffix-range</xref> is a range expressed as a suffix of the
   representation data with the provided non-negative integer maximum length
   (in range units). In other words, the last N units of the representation
   data.
</t>
                  <iref primary="true" item="Grammar" subitem="suffix-range"/>
                  <iref primary="true" item="Grammar" subitem="suffix-length"/>
                  <sourcecode type="abnf7230"><![CDATA[  suffix-range  = "-" suffix-length
  suffix-length = 1*DIGIT
]]></sourcecode>
                  <t anchor="rule.other-range">
  
   To provide for extensibility, the <xref target="rule.other-range" format="none">other-range</xref> rule is a
   mostly unconstrained grammar that allows application-specific or future
   range units to define additional range specifiers.
</t>
                  <iref primary="true" item="Grammar" subitem="other-range"/>
                  <sourcecode type="abnf7230"><![CDATA[  other-range   = 1*( %x21-2B / %x2D-7E )
                ; 1*(VCHAR excluding comma)
]]></sourcecode>
               </section>
               <section anchor="byte.ranges" title="Byte Ranges">
                  <t>
   The "bytes" range unit is used to express subranges of a representation
   data's octet sequence.
   Each byte range is expressed as an integer range at some offset, relative
   to either the beginning (<xref target="rule.int-range" format="none">int-range</xref>) or end
   (<xref target="rule.suffix-range" format="none">suffix-range</xref>) of the representation data.
   Byte ranges do not use the <xref target="rule.other-range" format="none">other-range</xref> specifier.
</t>
                  <t>
   The <xref target="rule.int-range" format="none">first-pos</xref> value in a bytes <xref target="rule.int-range" format="none">int-range</xref>
   gives the offset of the first byte in a range.
   The <xref target="rule.int-range" format="none">last-pos</xref> value gives the offset of the last
   byte in the range; that is, the byte positions specified are inclusive.
   Byte offsets start at zero.
</t>
                  <t>
   If the representation data has a content coding applied, each byte range is
   calculated with respect to the encoded sequence of bytes, not the sequence
   of underlying bytes that would be obtained after decoding.
</t>
                  <t>
   Examples of bytes range specifiers:
</t>
                  <ul>
                     <li>
                        <t>The first 500 bytes (byte offsets 0-499, inclusive):</t>

                        <artwork type="example"><![CDATA[
     bytes=0-499
     ]]></artwork>
   
                     </li>
                     <li>
                        <t>The second 500 bytes (byte offsets 500-999, inclusive):</t>

                        <artwork type="example"><![CDATA[
     bytes=500-999
     ]]></artwork>
  
                     </li>
                  </ul>
                  <t>
   A client can limit the number of bytes requested without knowing the size
   of the selected representation.
   If the <xref target="rule.int-range" format="none">last-pos</xref> value is absent, or if the value is
   greater than or equal to the current length of the representation data, the
   byte range is interpreted as the remainder of the representation (i.e., the
   server replaces the value of <xref target="rule.int-range" format="none">last-pos</xref> with a value that
   is one less than the current length of the selected representation).
</t>
                  <t>
   A client can request the last N bytes of the selected representation using
   a <xref target="rule.suffix-range" format="none">suffix-range</xref>.
   If the selected representation is shorter than the specified
   <xref target="rule.suffix-range" format="none">suffix-length</xref>, the entire representation is used.
</t>
                  <t>
   Additional examples, assuming a representation of length 10000:
</t>
                  <ul>
                     <li>
                        <t>The final 500 bytes (byte offsets 9500-9999, inclusive):</t>

                        <artwork type="example"><![CDATA[
     bytes=-500
     ]]></artwork>
  
                        <t>Or:</t>

                        <artwork type="example"><![CDATA[
     bytes=9500-
     ]]></artwork>
   
                     </li>
                     <li>
                        <t>The first and last bytes only (bytes 0 and 9999):</t>

                        <artwork type="example"><![CDATA[
     bytes=0-0,-1
     ]]></artwork>
   
                     </li>
                     <li>
                        <t>The first, middle, and last 1000 bytes:</t>

                        <artwork type="example"><![CDATA[
     bytes= 0-999, 4500-5499, -1000
     ]]></artwork>
   
                     </li>
                     <li>
                        <t>Other valid (but not canonical) specifications of the second 500
      bytes (byte offsets 500-999, inclusive):</t>

                        <artwork type="example"><![CDATA[
     bytes=500-600,601-999
     bytes=500-700,601-999
     ]]></artwork>
   
                     </li>
                  </ul>
                  <t>
   If a valid bytes <xref target="rule.ranges-specifier" format="none">range-set</xref> includes at least one
   <xref target="rule.ranges-specifier" format="none">range-spec</xref> with a <xref target="rule.int-range" format="none">first-pos</xref> that is
   less than the current length of the representation, or at least one
   <xref target="rule.suffix-range" format="none">suffix-range</xref> with a non-zero
   <xref target="rule.suffix-range" format="none">suffix-length</xref>, then the bytes <xref target="rule.ranges-specifier" format="none">range-set</xref> is
   satisfiable. Otherwise, the bytes <xref target="rule.ranges-specifier" format="none">range-set</xref> is unsatisfiable.
</t>
                  <t>
   In the byte-range syntax, <xref target="rule.int-range" format="none">first-pos</xref>,
   <xref target="rule.int-range" format="none">last-pos</xref>, and <xref target="rule.suffix-range" format="none">suffix-length</xref> are
   expressed as decimal number of octets. Since there is no predefined limit
   to the length of a payload, recipients <bcp14>MUST</bcp14> anticipate potentially
   large decimal numerals and prevent parsing errors due to integer conversion
   overflows.
</t>
               </section>
               <section anchor="range.units.other" title="Other Range Units">
                  <t>
   Other range units, such as format-specific boundaries like pages,
   sections, records, rows, or time, are potentially usable in HTTP for
   application-specific purposes, but are not commonly used in practice.
   Implementors of alternative range units ought to consider how they would
   work with content codings and general-purpose intermediaries.
</t>
                  <t>
   Range units are intended to be extensible.  New range units ought to be
   registered with IANA, as defined in <xref target="range.unit.registry"/>.
</t>
               </section>
               <section anchor="range.unit.registry" title="Range Unit Registry">
                  <t>
   The "HTTP Range Unit Registry" defines the namespace for the range
   unit names and refers to their corresponding specifications.
   It is maintained at
   <eref target="https://www.iana.org/assignments/http-parameters"/>.
</t>
                  <t>
   Registration of an HTTP Range Unit <bcp14>MUST</bcp14> include the following fields:
</t>
                  <ul>
                     <li>Name</li>
                     <li>Description</li>
                     <li>Pointer to specification text</li>
                  </ul>
                  <t>
  Values to be added to this namespace require IETF Review
  (see <xref target="RFC8126" sectionFormat="comma" section="4.8"/>).
</t>
               </section>
            </section>
         </section>
         <section anchor="representation.metadata" title="Representation Metadata">
            <t>
   Representation header fields provide metadata about the representation.
   When a message includes a payload body, the representation header fields
   describe how to interpret the representation data enclosed in the payload
   body.  In a response to a HEAD request, the representation header fields
   describe the representation data that would have been enclosed in the
   payload body if the same request had been a GET.
</t>
            <t>
   The following header fields convey representation metadata:
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Content-Type</td>
                     <td>
                        <xref target="header.content-type"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Encoding</td>
                     <td>
                        <xref target="header.content-encoding"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Language</td>
                     <td>
                        <xref target="header.content-language"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Length</td>
                     <td>
                        <xref target="header.content-length"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Content-Location</td>
                     <td>
                        <xref target="header.content-location"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="header.content-type" title="Content-Type">
               <iref primary="true" item="Content-Type header field"/>
               <t>
   The "Content-Type" header field indicates the media type of the
   associated representation: either the representation enclosed in
   the message payload or the <xref target="representations" format="none">selected representation</xref>, as determined by the
   message semantics.  The indicated media type defines both the data format
   and how that data is intended to be processed by a recipient, within the
   scope of the received message semantics, after any content codings
   indicated by <xref target="header.content-encoding" format="none">Content-Encoding</xref> are decoded.
</t>
               <iref primary="true" item="Grammar" subitem="Content-Type"/>
               <sourcecode type="abnf7230"><![CDATA[  Content-Type = media-type
]]></sourcecode>
               <t>
   Media types are defined in <xref target="media.type"/>. An example of the
   field is
</t>
               <artwork type="example"><![CDATA[
  Content-Type: text/html; charset=ISO-8859-4
]]></artwork>
               <t>
   A sender that generates a message containing a payload body <bcp14>SHOULD</bcp14>
   generate a Content-Type header field in that message unless the intended
   media type of the enclosed representation is unknown to the sender.
   If a Content-Type header field is not present, the recipient <bcp14>MAY</bcp14> either
   assume a media type of
   "application/octet-stream" (<xref target="RFC2046" sectionFormat="comma" section="4.5.1"/>)
   or examine the data to determine its type.
</t>
               <t>
   In practice, resource owners do not always properly configure their origin
   server to provide the correct Content-Type for a given representation.
   Some user agents examine a payload's content and, in certain cases,
   override the received type (for example, see <xref target="Sniffing"/>).
   This "MIME sniffing" risks drawing incorrect conclusions about the data,
   which might expose the user to additional security risks (e.g., "privilege
   escalation"). Furthermore, it is impossible to determine the sender's
   intended processing model by examining the data format: many data formats
   match multiple media types that differ only in processing semantics.
   Implementers are encouraged to provide a means to disable such sniffing.
</t>
            </section>
            <section anchor="header.content-encoding" title="Content-Encoding">
               <iref primary="true" item="Content-Encoding header field"/>
               <t>
   The "Content-Encoding" header field indicates what content codings 
   have been applied to the representation, beyond those inherent in the media
   type, and thus what decoding mechanisms have to be applied in order to
   obtain data in the media type referenced by the <xref target="header.content-type" format="none">Content-Type</xref>
   header field.
   Content-Encoding is primarily used to allow a representation's data to be
   compressed without losing the identity of its underlying media type.
</t>
               <iref primary="true" item="Grammar" subitem="Content-Encoding"/>
               <sourcecode type="abnf7230"><![CDATA[  Content-Encoding = 1#content-coding
]]></sourcecode>
               <t>
   An example of its use is
</t>
               <artwork type="example"><![CDATA[
  Content-Encoding: gzip
]]></artwork>
               <t>
   If one or more encodings have been applied to a representation, the sender
   that applied the encodings <bcp14>MUST</bcp14> generate a Content-Encoding header field
   that lists the content codings in the order in which they were applied.
   Additional information about the encoding parameters can be provided
   by other header fields not defined by this specification.
</t>
               <t>
   Unlike Transfer-Encoding (<xref target="Messaging" section="6.1" relative="#header.transfer-encoding"/>), the codings listed
   in Content-Encoding are a characteristic of the representation; the
   representation is defined in terms of the coded form, and all other
   metadata about the representation is about the coded form unless otherwise
   noted in the metadata definition. Typically, the representation is only
   decoded just prior to rendering or analogous usage.
</t>
               <t>
   If the media type includes an inherent encoding, such as a data format
   that is always compressed, then that encoding would not be restated in 
   Content-Encoding even if it happens to be the same algorithm as one
   of the content codings.  Such a content coding would only be listed if,
   for some bizarre reason, it is applied a second time to form the
   representation.  Likewise, an origin server might choose to publish the
   same data as multiple representations that differ only in whether
   the coding is defined as part of <xref target="header.content-type" format="none">Content-Type</xref> or
   Content-Encoding, since some user agents will behave differently in their
   handling of each response (e.g., open a "Save as ..." dialog instead of
   automatic decompression and rendering of content).
</t>
               <t>
   An origin server <bcp14>MAY</bcp14> respond with a status code of
   <xref target="status.415" format="none">415 (Unsupported Media Type)</xref> if a representation in the
   request message has a content coding that is not acceptable.
</t>
            </section>
            <section anchor="header.content-language" title="Content-Language">
               <iref primary="true" item="Content-Language header field"/>
               <t>
   The "Content-Language" header field describes the natural
   language(s) of the intended audience for the representation. Note that this might
   not be equivalent to all the languages used within the representation.
</t>
               <iref primary="true" item="Grammar" subitem="Content-Language"/>
               <sourcecode type="abnf7230"><![CDATA[  Content-Language = 1#language-tag
]]></sourcecode>
               <t>
   Language tags are defined in <xref target="language.tags"/>. The primary purpose of
   Content-Language is to allow a user to identify and differentiate
   representations according to the users' own preferred language. Thus, if the
   content is intended only for a Danish-literate audience, the
   appropriate field is
</t>
               <artwork type="example"><![CDATA[
  Content-Language: da
]]></artwork>
               <t>
   If no Content-Language is specified, the default is that the content
   is intended for all language audiences. This might mean that the
   sender does not consider it to be specific to any natural language,
   or that the sender does not know for which language it is intended.
</t>
               <t>
   Multiple languages <bcp14>MAY</bcp14> be listed for content that is intended for
   multiple audiences. For example, a rendition of the "Treaty of
   Waitangi", presented simultaneously in the original Maori and English
   versions, would call for
</t>
               <artwork type="example"><![CDATA[
  Content-Language: mi, en
]]></artwork>
               <t>
   However, just because multiple languages are present within a representation
   does not mean that it is intended for multiple linguistic audiences.
   An example would be a beginner's language primer, such as "A First
   Lesson in Latin", which is clearly intended to be used by an
   English-literate audience. In this case, the Content-Language would
   properly only include "en".
</t>
               <t>
   Content-Language <bcp14>MAY</bcp14> be applied to any media type — it is not
   limited to textual documents.
</t>
            </section>
            <section anchor="header.content-length" title="Content-Length">
               <iref primary="true" item="Content-Length header field"/>
               <t>
                  <cref>
   The "Content-Length" header field indicates the number of data octets
   (body length) for the representation. In some cases, Content-Length is
   used to define or estimate message framing.
</cref>
               </t>
               <iref primary="true" item="Grammar" subitem="Content-Length"/>
               <sourcecode type="abnf7230"><![CDATA[  Content-Length = 1*DIGIT
]]></sourcecode>
               <t>
   An example is
</t>
               <artwork type="example"><![CDATA[
  Content-Length: 3495
]]></artwork>
               <t>
   A sender <bcp14>MUST NOT</bcp14> send a Content-Length header field in any message that
   contains a Transfer-Encoding header field.
</t>
               <t>
   A user agent <bcp14>SHOULD</bcp14> send a Content-Length in a request message when no
   Transfer-Encoding is sent and the request method defines
   a meaning for an enclosed payload body. For example, a Content-Length
   header field is normally sent in a POST request even when the value is
   0 (indicating an empty payload body).  A user agent <bcp14>SHOULD NOT</bcp14> send a
   Content-Length header field when the request message does not contain a
   payload body and the method semantics do not anticipate such a body.
</t>
               <t>
   A server <bcp14>MAY</bcp14> send a Content-Length header field in a response to a HEAD
   request (<xref target="HEAD"/>); a server <bcp14>MUST NOT</bcp14> send Content-Length in such a
   response unless its field-value equals the decimal number of octets that
   would have been sent in the payload body of a response if the same
   request had used the GET method.
</t>
               <t>
   A server <bcp14>MAY</bcp14> send a Content-Length header field in a
   <xref target="status.304" format="none">304 (Not Modified)</xref> response to a conditional GET request
   (<xref target="status.304"/>); a server <bcp14>MUST NOT</bcp14> send Content-Length in such a
   response unless its field-value equals the decimal number of octets that
   would have been sent in the payload body of a <xref target="status.200" format="none">200 (OK)</xref>
   response to the same request.
</t>
               <t>
   A server <bcp14>MUST NOT</bcp14> send a Content-Length header field in any response
   with a status code of
   <xref target="status.1xx" format="none">1xx (Informational)</xref> or <xref target="status.204" format="none">204 (No Content)</xref>.
   A server <bcp14>MUST NOT</bcp14> send a Content-Length header field in any
   <xref target="status.2xx" format="none">2xx (Successful)</xref> response to a CONNECT request (<xref target="CONNECT"/>).
</t>
               <t>
   Aside from the cases defined above, in the absence of Transfer-Encoding,
   an origin server <bcp14>SHOULD</bcp14> send a Content-Length header field when the
   payload body size is known prior to sending the complete header section.
   This will allow downstream recipients to measure transfer progress,
   know when a received message is complete, and potentially reuse the
   connection for additional requests.
</t>
               <t>
   Any Content-Length field value greater than or equal to zero is valid.
   Since there is no predefined limit to the length of a payload, a
   recipient <bcp14>MUST</bcp14> anticipate potentially large decimal numerals and
   prevent parsing errors due to integer conversion overflows
   (<xref target="attack.protocol.element.length"/>).
</t>
               <t>
   If a message is received that has multiple Content-Length header fields
   with field-values consisting of the same decimal value, or a single
   Content-Length header field with a field value containing a list of
   identical decimal values (e.g., "Content-Length: 42, 42"), indicating that
   duplicate Content-Length header fields have been generated or combined by an
   upstream message processor, then the recipient <bcp14>MUST</bcp14> either reject the
   message as invalid or replace the duplicated field-values with a single
   valid Content-Length field containing that decimal value prior to
   determining the message body length or forwarding the message.
</t>
            </section>
            <section anchor="header.content-location" title="Content-Location">
               <iref primary="true" item="Content-Location header field"/>
               <t>
   The "Content-Location" header field references a URI that can be used
   as an identifier for a specific resource corresponding to the
   representation in this message's payload.
   In other words, if one were to perform a GET request on this URI at the time
   of this message's generation, then a <xref target="status.200" format="none">200 (OK)</xref> response would
   contain the same representation that is enclosed as payload in this message.
</t>
               <iref primary="true" item="Grammar" subitem="Content-Location"/>
               <sourcecode type="abnf7230"><![CDATA[  Content-Location = absolute-URI / partial-URI
]]></sourcecode>
               <t>
   The Content-Location value is not a replacement for the effective
   Request URI (<xref target="effective.request.uri"/>).  It is representation metadata.
   It has the same syntax and semantics as the header field of the same name
   defined for MIME body parts in <xref target="RFC2557" section="4"/>.
   However, its appearance in an HTTP message has some special implications
   for HTTP recipients.
</t>
               <t>
   If Content-Location is included in a <xref target="status.2xx" format="none">2xx (Successful)</xref>
   response message and its value refers (after conversion to absolute form)
   to a URI that is the same as the effective request URI, then
   the recipient <bcp14>MAY</bcp14> consider the payload to be a current representation of
   that resource at the time indicated by the message origination date.
   For a GET (<xref target="GET"/>) or HEAD (<xref target="HEAD"/>) request,
   this is the same as the default semantics when no Content-Location is
   provided by the server.
   For a state-changing request like PUT (<xref target="PUT"/>) or
   POST (<xref target="POST"/>), it implies that the server's response
   contains the new representation of that resource, thereby distinguishing it
   from representations that might only report about the action
   (e.g., "It worked!").
   This allows authoring applications to update their local copies without
   the need for a subsequent GET request.
</t>
               <t>
   If Content-Location is included in a <xref target="status.2xx" format="none">2xx (Successful)</xref>
   response message and its field-value refers to a URI that differs from the
   effective request URI, then the origin server claims that the URI
   is an identifier for a different resource corresponding to the enclosed
   representation. Such a claim can only be trusted if both identifiers share
   the same resource owner, which cannot be programmatically determined via
   HTTP.
</t>
               <ul>
                  <li>For a response to a GET or HEAD request, this is an indication that the
     effective request URI refers to a resource that is subject to content
     negotiation and the Content-Location field-value is a more specific
     identifier for the <xref target="representations" format="none">selected representation</xref>.</li>
                  <li>For a <xref target="status.201" format="none">201 (Created)</xref> response to a state-changing method,
     a Content-Location field-value that is identical to the
     <xref target="header.location" format="none">Location</xref> field-value indicates that this payload is a
     current representation of the newly created resource.</li>
                  <li>Otherwise, such a Content-Location indicates that this payload is a
     representation reporting on the requested action's status and that the
     same report is available (for future access with GET) at the given URI.
     For example, a purchase transaction made via a POST request might
     include a receipt document as the payload of the <xref target="status.200" format="none">200 (OK)</xref>
     response; the Content-Location field-value provides an identifier for
     retrieving a copy of that same receipt in the future.</li>
               </ul>
               <t>
   A user agent that sends Content-Location in a request message is stating
   that its value refers to where the user agent originally obtained the
   content of the enclosed representation (prior to any modifications made by
   that user agent).  In other words, the user agent is providing a back link
   to the source of the original representation.
</t>
               <t>
   An origin server that receives a Content-Location field in a request
   message <bcp14>MUST</bcp14> treat the information as transitory request context rather
   than as metadata to be saved verbatim as part of the representation.
   An origin server <bcp14>MAY</bcp14> use that context to guide in processing the
   request or to save it for other uses, such as within source links or
   versioning metadata. However, an origin server <bcp14>MUST NOT</bcp14> use such context
   information to alter the request semantics.
</t>
               <t>
   For example, if a client makes a PUT request on a negotiated resource and
   the origin server accepts that PUT (without redirection), then the new
   state of that resource is expected to be consistent with the one
   representation supplied in that PUT; the Content-Location cannot be used as
   a form of reverse content selection identifier to update only one of the
   negotiated representations. If the user agent had wanted the latter
   semantics, it would have applied the PUT directly to the Content-Location
   URI.
</t>
            </section>
         </section>
         <section anchor="payload" title="Payload">
            <iref item="payload"/>
            <t>
   Some HTTP messages transfer a complete or partial representation as the
   message "payload".  In some cases, a payload might contain
   only the associated representation's header fields (e.g., responses to
   HEAD) or only some part(s) of the representation data
   (e.g., the <xref target="status.206" format="none">206 (Partial Content)</xref> status code).
</t>
            <t>
   Header fields that specifically describe the payload, rather than the
   associated representation, are referred to as "payload header fields".
   Payload header fields are defined in other parts of this specification,
   due to their impact on message parsing.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Content-Range</td>
                     <td>
                        <xref target="header.content-range"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Trailer</td>
                     <td>
                        <xref target="header.trailer"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Transfer-Encoding</td>
                     <td>
                        <xref target="Messaging" section="6.1" relative="#header.transfer-encoding"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="payload.purpose" title="Purpose">
               <t>
   The purpose of a payload in a request is defined by the method semantics.
   For example, a representation in the payload of a PUT request
   (<xref target="PUT"/>) represents the desired state of the
   <xref target="target.resource" format="none">target resource</xref> if the request is successfully applied,
   whereas a representation in the payload of a POST request
   (<xref target="POST"/>) represents information to be processed by the
   target resource.
</t>
               <t>
   In a response, the payload's purpose is defined by both the request method
   and the response status code.
   For example, the payload of a <xref target="status.200" format="none">200 (OK)</xref> response to GET
   (<xref target="GET"/>) represents the current state of the
   <xref target="target.resource" format="none">target resource</xref>, as observed at the time of the message
   origination date (<xref target="header.date"/>), whereas the payload of
   the same status code in a response to POST might represent either the
   processing result or the new state of the target resource after applying
   the processing. Response messages with an error status code usually contain
   a payload that represents the error condition, such that it describes the
   error state and what next steps are suggested for resolving it.
</t>
            </section>
            <section anchor="identifying.payload" title="Identification">
               <t>
   When a complete or partial representation is transferred in a message
   payload, it is often desirable for the sender to supply, or the recipient
   to determine, an identifier for a resource corresponding to that
   representation.
</t>
               <t>
   For a request message:
</t>
               <ul>
                  <li>If the request has a <xref target="header.content-location" format="none">Content-Location</xref> header field,
       then the sender asserts that the payload is a representation of the
       resource identified by the Content-Location field-value. However,
       such an assertion cannot be trusted unless it can be verified by
       other means (not defined by this specification). The information
       might still be useful for revision history links.</li>
                  <li>Otherwise, the payload is unidentified.</li>
               </ul>
               <t>
   For a response message, the following rules are applied in order until a
   match is found:
</t>
               <ol>
                  <li>If the request method is GET or HEAD and the response status code is
       <xref target="status.200" format="none">200 (OK)</xref>, 
       <xref target="status.204" format="none">204 (No Content)</xref>,
       <xref target="status.206" format="none">206 (Partial Content)</xref>, or
       <xref target="status.304" format="none">304 (Not Modified)</xref>,
       the payload is a representation of the resource identified by the
       effective request URI (<xref target="effective.request.uri"/>).</li>
                  <li>If the request method is GET or HEAD and the response status code is
       <xref target="status.203" format="none">203 (Non-Authoritative Information)</xref>, the payload is
       a potentially modified or enhanced representation of the
       <xref target="target.resource" format="none">target resource</xref> as provided by an intermediary.</li>
                  <li>If the response has a <xref target="header.content-location" format="none">Content-Location</xref> header field
       and its field-value is a reference to the same URI as the effective
       request URI, the payload is a representation of the resource
       identified by the effective request URI.</li>
                  <li>If the response has a <xref target="header.content-location" format="none">Content-Location</xref> header field
       and its field-value is a reference to a URI different from the
       effective request URI, then the sender asserts that the payload is a
       representation of the resource identified by the Content-Location
       field-value. However, such an assertion cannot be trusted unless
       it can be verified by other means (not defined by this specification).</li>
                  <li>Otherwise, the payload is unidentified.</li>
               </ol>
            </section>
            <section anchor="payload.body" title="Payload Body">
               <t>
   The payload body contains the data of a request or response. This is
   distinct from the message body (e.g., <xref target="Messaging" section="6" relative="#message.body"/>),
   which is how the payload body is transferred "on the wire", and might be
   encoded, depending on the HTTP version in use.
</t>
               <t>
   It is also distinct from a request or response's representation data
   (<xref target="representation.data"/>), which can be inferred from
   protocol operation, rather than necessarily appearing "on the wire."
</t>
               <t>
   The presence of a payload body in a request depends on whether the request
   method used defines semantics for it.
</t>
               <t>
   The presence of a payload body in a response depends on both the request
   method to which it is responding and the response status code (<xref target="status.codes"/>).
</t>
               <t>
   Responses to the HEAD request method (<xref target="HEAD"/>) never include
   a payload body because the associated response header fields indicate only
   what their values would have been if the request method had been GET
   (<xref target="GET"/>).
</t>
               <t>
   
                  <xref target="status.2xx" format="none">2xx (Successful)</xref> responses to a CONNECT request method
   (<xref target="CONNECT"/>) switch the connection to tunnel mode instead of
   having a payload body.
</t>
               <t>
   All <xref target="status.1xx" format="none">1xx (Informational)</xref>, <xref target="status.204" format="none">204 (No Content)</xref>, and
   <xref target="status.304" format="none">304 (Not Modified)</xref> responses do not include a payload body.
</t>
               <t>
   All other responses do include a payload body, although that body
   might be of zero length.
</t>
            </section>
            <section anchor="header.content-range" title="Content-Range">
               <iref primary="true" item="Content-Range header field"/>
               <t>
   The "Content-Range" header field is sent in a single part
   <xref target="status.206" format="none">206 (Partial Content)</xref> response to indicate the partial range
   of the selected representation enclosed as the message payload, sent in
   each part of a multipart 206 response to indicate the range enclosed within
   each body part, and sent in <xref target="status.416" format="none">416 (Range Not Satisfiable)</xref>
   responses to provide information about the selected representation.
</t>
               <iref primary="true" item="Grammar" subitem="Content-Range"/>
               <iref primary="true" item="Grammar" subitem="range-resp"/>
               <iref primary="true" item="Grammar" subitem="incl-range"/>
               <iref primary="true" item="Grammar" subitem="unsatisfied-range"/>
               <iref primary="true" item="Grammar" subitem="complete-length"/>
               <iref primary="false" item="Grammar" subitem="first-pos"/>
               <iref primary="false" item="Grammar" subitem="last-pos"/>
               <sourcecode type="abnf7230"><![CDATA[  Content-Range       = range-unit SP
                        ( range-resp / unsatisfied-range )

  range-resp          = incl-range "/" ( complete-length / "*" )
  incl-range          = first-pos "-" last-pos
  unsatisfied-range   = "*/" complete-length

  complete-length     = 1*DIGIT
]]></sourcecode>
               <t>
   If a <xref target="status.206" format="none">206 (Partial Content)</xref> response contains a
   <xref target="header.content-range" format="none">Content-Range</xref> header field with a <xref target="range.units" format="none">range unit</xref>
   (<xref target="range.units"/>) that the recipient does not understand, the
   recipient <bcp14>MUST NOT</bcp14> attempt to recombine it with a stored representation.
   A proxy that receives such a message <bcp14>SHOULD</bcp14> forward it downstream.
</t>
               <t>
   For byte ranges, a sender <bcp14>SHOULD</bcp14> indicate the complete length of the
   representation from which the range has been extracted, unless the complete
   length is unknown or difficult to determine. An asterisk character ("*") in
   place of the complete-length indicates that the representation length was
   unknown when the header field was generated.
</t>
               <t>
   The following example illustrates when the complete length of the selected
   representation is known by the sender to be 1234 bytes:
</t>
               <artwork type="example"><![CDATA[
  Content-Range: bytes 42-1233/1234
]]></artwork>
               <t>
   and this second example illustrates when the complete length is unknown:
</t>
               <artwork type="example"><![CDATA[
  Content-Range: bytes 42-1233/*
]]></artwork>
               <t>
   A Content-Range field value is invalid if it contains a
   <xref target="header.content-range" format="none">range-resp</xref> that has a <xref target="rule.int-range" format="none">last-pos</xref>
   value less than its <xref target="rule.int-range" format="none">first-pos</xref> value, or a
   <xref target="header.content-range" format="none">complete-length</xref> value less than or equal to its
   <xref target="rule.int-range" format="none">last-pos</xref> value. The recipient of an invalid
   <xref target="header.content-range" format="none">Content-Range</xref> 
                  <bcp14>MUST NOT</bcp14> attempt to recombine the received
   content with a stored representation.
</t>
               <t>
   A server generating a <xref target="status.416" format="none">416 (Range Not Satisfiable)</xref> response
   to a byte-range request <bcp14>SHOULD</bcp14> send a Content-Range header field with an
   <xref target="header.content-range" format="none">unsatisfied-range</xref> value, as in the following example:
</t>
               <artwork type="example"><![CDATA[
  Content-Range: bytes */1234
]]></artwork>
               <t>
   The complete-length in a 416 response indicates the current length of the
   selected representation.
</t>
               <t>
   The Content-Range header field has no meaning for status codes that do
   not explicitly describe its semantic. For this specification, only the
   <xref target="status.206" format="none">206 (Partial Content)</xref> and
   <xref target="status.416" format="none">416 (Range Not Satisfiable)</xref> status codes describe a meaning
   for Content-Range.
</t>
               <t>
   The following are examples of Content-Range values in which the
   selected representation contains a total of 1234 bytes:
</t>
               <ul>
                  <li>
                     <t>The first 500 bytes:</t>

                     <artwork type="example"><![CDATA[
     Content-Range: bytes 0-499/1234
     ]]></artwork>
   
                  </li>
                  <li>
                     <t>The second 500 bytes:</t>

                     <artwork type="example"><![CDATA[
     Content-Range: bytes 500-999/1234
     ]]></artwork>
   
                  </li>
                  <li>
                     <t>All except for the first 500 bytes:</t>

                     <artwork type="example"><![CDATA[
     Content-Range: bytes 500-1233/1234
     ]]></artwork>
   
                  </li>
                  <li>
                     <t>The last 500 bytes:</t>

                     <artwork type="example"><![CDATA[
     Content-Range: bytes 734-1233/1234
     ]]></artwork>
   
                  </li>
               </ul>
            </section>
            <section anchor="multipart.byteranges" title="Media Type multipart/byteranges">
               <iref item="Media Type" subitem="multipart/byteranges" primary="true"/>
               <iref item="multipart/byteranges Media Type" primary="true"/>
               <t>
   When a <xref target="status.206" format="none">206 (Partial Content)</xref> response message includes the
   content of multiple ranges, they are transmitted as body parts in a
   multipart message body (<xref target="RFC2046" sectionFormat="comma" section="5.1"/>)
   with the media type of "multipart/byteranges".
</t>
               <t>
   The multipart/byteranges media type includes one or more body parts, each
   with its own <xref target="header.content-type" format="none">Content-Type</xref> and <xref target="header.content-range" format="none">Content-Range</xref>
   fields. The required boundary parameter specifies the boundary string used
   to separate each body part.
</t>
               <t>
  Implementation Notes:
</t>
               <ol>
                  <li>Additional CRLFs might precede the first boundary string in the body.</li>
                  <li>Although <xref target="RFC2046"/> permits the boundary string to be
      quoted, some existing implementations handle a quoted boundary
      string incorrectly.</li>
                  <li>A number of clients and servers were coded to an early draft
      of the byteranges specification that used a media type of
      multipart/x-byteranges<iref item="multipart/x-byteranges Media Type"/>
                     <iref item="Media Type" subitem="multipart/x-byteranges"/>,
      which is almost (but not quite) compatible with this type.</li>
               </ol>
               <t>
   Despite the name, the "multipart/byteranges" media type is not limited to
   byte ranges. The following example uses an "exampleunit" range unit:
</t>
               <artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 206 Partial Content
  Date: Tue, 14 Nov 1995 06:25:24 GMT
  Last-Modified: Tue, 14 July 04:58:08 GMT
  Content-Length: 2331785
  Content-Type: multipart/byteranges; boundary=THIS_STRING_SEPARATES
  
  --THIS_STRING_SEPARATES
  Content-Type: video/example
  Content-Range: exampleunit 1.2-4.3/25
  
  ...the first range...
  --THIS_STRING_SEPARATES
  Content-Type: video/example
  Content-Range: exampleunit 11.2-14.3/25
  
  ...the second range
  --THIS_STRING_SEPARATES--
  ]]></artwork>
               <t>
  The following information serves as the registration form for the
  multipart/byteranges media type.
</t>
               <dl>
                  <dt>Type name:</dt>
                  <dd>multipart</dd>
                  <dt>Subtype name:</dt>
                  <dd>byteranges</dd>
                  <dt>Required parameters:</dt>
                  <dd>boundary</dd>
                  <dt>Optional parameters:</dt>
                  <dd>N/A</dd>
                  <dt>Encoding considerations:</dt>
                  <dd>only "7bit", "8bit", or "binary" are permitted</dd>
                  <dt>Security considerations:</dt>
                  <dd>see <xref target="security.considerations"/>
                  </dd>
                  <dt>Interoperability considerations:</dt>
                  <dd>N/A</dd>
                  <dt>Published specification:</dt>
                  <dd>This specification (see <xref target="multipart.byteranges"/>).</dd>
                  <dt>Applications that use this media type:</dt>
                  <dd>HTTP components supporting multiple ranges in a single request.</dd>
                  <dt>Fragment identifier considerations:</dt>
                  <dd>N/A</dd>
                  <dt>Additional information:</dt>
                  <dd>
    
                     <dl>
                        <dt>Deprecated alias names for this type:</dt>
                        <dd>N/A</dd>
                        <dt>Magic number(s):</dt>
                        <dd>N/A</dd>
                        <dt>File extension(s):</dt>
                        <dd>N/A</dd>
                        <dt>Macintosh file type code(s):</dt>
                        <dd>N/A</dd>
                     </dl>
  
                  </dd>
                  <dt>Person and email address to contact for further information:</dt>
                  <dd>See Authors' Addresses section.</dd>
                  <dt>Intended usage:</dt>
                  <dd>COMMON</dd>
                  <dt>Restrictions on usage:</dt>
                  <dd>N/A</dd>
                  <dt>Author:</dt>
                  <dd>See Authors' Addresses section.</dd>
                  <dt>Change controller:</dt>
                  <dd>IESG</dd>
               </dl>
            </section>
         </section>
         <section anchor="content.negotiation" title="Content Negotiation">
            <t>
   When responses convey payload information, whether indicating a success or
   an error, the origin server often has different ways of representing that
   information; for example, in different formats, languages, or encodings.
   Likewise, different users or user agents might have differing capabilities,
   characteristics, or preferences that could influence which representation,
   among those available, would be best to deliver. For this reason, HTTP
   provides mechanisms for <xref target="content.negotiation" format="none">content negotiation</xref>.
</t>
            <t>
   This specification defines two patterns of content negotiation that can
   be made visible within the protocol:
   "proactive", where the server selects the representation based
   upon the user agent's stated preferences, and "reactive" negotiation,
   where the server provides a list of representations for the user agent to
   choose from. Other patterns of content negotiation include
   "conditional content", where the representation consists of multiple
   parts that are selectively rendered based on user agent parameters, 
   "active content", where the representation contains a script that
   makes additional (more specific) requests based on the user agent
   characteristics, and "Transparent Content Negotiation"
   (<xref target="RFC2295"/>), where content selection is performed by
   an intermediary. These patterns are not mutually exclusive, and each has
   trade-offs in applicability and practicality.
</t>
            <t>
   Note that, in all cases, HTTP is not aware of the resource semantics.
   The consistency with which an origin server responds to requests, over time
   and over the varying dimensions of content negotiation, and thus the
   "sameness" of a resource's observed representations over time, is
   determined entirely by whatever entity or algorithm selects or generates
   those responses. HTTP pays no attention to the man behind the curtain.
</t>
            <section anchor="proactive.negotiation" title="Proactive Negotiation">
               <t>
   When content negotiation preferences are sent by the user agent in a
   request to encourage an algorithm located at the server to
   select the preferred representation, it is called
   proactive negotiation
   (a.k.a., server-driven negotiation). Selection is based on
   the available representations for a response (the dimensions over which it
   might vary, such as language, content-coding, etc.) compared to various
   information supplied in the request, including both the explicit
   negotiation fields of <xref target="request.conneg"/> and implicit
   characteristics, such as the client's network address or parts of the
   <xref target="header.user-agent" format="none">User-Agent</xref> field.
</t>
               <t>
   Proactive negotiation is advantageous when the algorithm for
   selecting from among the available representations is difficult to
   describe to a user agent, or when the server desires to send its
   "best guess" to the user agent along with the first response (hoping to
   avoid the round trip delay of a subsequent request if the "best
   guess" is good enough for the user). In order to improve the server's
   guess, a user agent <bcp14>MAY</bcp14> send request header fields that describe
   its preferences.
</t>
               <t>
   Proactive negotiation has serious disadvantages:
</t>
               <ul>
                  <li>
    It is impossible for the server to accurately determine what
    might be "best" for any given user, since that would require
    complete knowledge of both the capabilities of the user agent
    and the intended use for the response (e.g., does the user want
    to view it on screen or print it on paper?);
   </li>
                  <li>
    Having the user agent describe its capabilities in every
    request can be both very inefficient (given that only a small
    percentage of responses have multiple representations) and a
    potential risk to the user's privacy;
   </li>
                  <li>
    It complicates the implementation of an origin server and the
    algorithms for generating responses to a request; and,
   </li>
                  <li>
    It limits the reusability of responses for shared caching.
   </li>
               </ul>
               <t>
   A user agent cannot rely on proactive negotiation preferences being
   consistently honored, since the origin server might not implement proactive
   negotiation for the requested resource or might decide that sending a
   response that doesn't conform to the user agent's preferences is better
   than sending a <xref target="status.406" format="none">406 (Not Acceptable)</xref> response.
</t>
               <t>
   A <xref target="header.vary" format="none">Vary</xref> header field (<xref target="header.vary"/>) is
   often sent in a response subject to proactive negotiation to indicate what
   parts of the request information were used in the selection algorithm.
</t>
            </section>
            <section anchor="reactive.negotiation" title="Reactive Negotiation">
               <t>
   With reactive negotiation
   (a.k.a., agent-driven negotiation), selection of the best
   response representation (regardless of the status code) is performed by the
   user agent after receiving an initial response from the origin server that
   contains a list of resources for alternative representations.
   If the user agent is not satisfied by the initial response representation,
   it can perform a GET request on one or more of the alternative resources,
   selected based on metadata included in the list, to obtain a different form
   of representation for that response. Selection of alternatives might be
   performed automatically by the user agent or manually by the user selecting
   from a generated (possibly hypertext) menu.
</t>
               <t>
   Note that the above refers to representations of the response, in general,
   not representations of the resource. The alternative representations are
   only considered representations of the target resource if the response in
   which those alternatives are provided has the semantics of being a
   representation of the target resource (e.g., a <xref target="status.200" format="none">200 (OK)</xref>
   response to a GET request) or has the semantics of providing links to
   alternative representations for the target resource
   (e.g., a <xref target="status.300" format="none">300 (Multiple Choices)</xref> response to a GET request).
</t>
               <t>
   A server might choose not to send an initial representation, other than
   the list of alternatives, and thereby indicate that reactive
   negotiation by the user agent is preferred. For example, the alternatives
   listed in responses with the <xref target="status.300" format="none">300 (Multiple Choices)</xref> and
   <xref target="status.406" format="none">406 (Not Acceptable)</xref> status codes include information about
   the available representations so that the user or user agent can react by
   making a selection.
</t>
               <t>
   Reactive negotiation is advantageous when the response would vary
   over commonly used dimensions (such as type, language, or encoding),
   when the origin server is unable to determine a user agent's
   capabilities from examining the request, and generally when public
   caches are used to distribute server load and reduce network usage.
</t>
               <t>
   Reactive negotiation suffers from the disadvantages of transmitting
   a list of alternatives to the user agent, which degrades user-perceived
   latency if transmitted in the header section, and needing a second request
   to obtain an alternate representation. Furthermore, this specification
   does not define a mechanism for supporting automatic selection, though it
   does not prevent such a mechanism from being developed as an extension.
</t>
            </section>
         </section>
      </section>
      <section anchor="methods" title="Request Methods">
         <section anchor="method.overview" title="Overview">
            <t>
   The request method token is the primary source of request semantics;
   it indicates the purpose for which the client has made this request
   and what is expected by the client as a successful result.
</t>
            <t>
   The request method's semantics might be further specialized by the
   semantics of some header fields when present in a request
   (<xref target="request.header.fields"/>) if those additional semantics do
   not conflict with the method.
   For example, a client can send conditional request header fields
   (<xref target="preconditions"/>) to make the requested
   action conditional on the current state of the target resource.
</t>
            <iref primary="true" item="Grammar" subitem="method"/>
            <sourcecode type="abnf7230"><![CDATA[  method = token
]]></sourcecode>
            <t>
   HTTP was originally designed to be usable as an interface to distributed
   object systems. The request method was envisioned as applying semantics to
   a <xref target="target.resource" format="none">target resource</xref> in much the same way as invoking a
   defined method on an identified object would apply semantics.
</t>
            <t>
   The method token is case-sensitive because it might be used as a gateway
   to object-based systems with case-sensitive method names. By convention,
   standardized methods are defined in all-uppercase US-ASCII letters.
</t>
            <t>
   Unlike distributed objects, the standardized request methods in HTTP are
   not resource-specific, since uniform interfaces provide for better
   visibility and reuse in network-based systems <xref target="REST"/>.
   Once defined, a standardized method ought to have the same semantics when
   applied to any resource, though each resource determines for itself
   whether those semantics are implemented or allowed.
</t>
            <t>
   This specification defines a number of standardized methods that are
   commonly used in HTTP, as outlined by the following table.
</t>
            <table align="left" anchor="table.of.methods">
               <thead>
                  <tr>
                     <th>Method</th>
                     <th>Description</th>
                     <th>Sec.</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>GET</td>
                     <td>Transfer a current representation of the target resource.</td>
                     <td>
                        <xref target="GET" format="counter"/>
                     </td>
                  </tr>
                  <tr>
                     <td>HEAD</td>
                     <td>Same as GET, but only transfer the status line and header section.</td>
                     <td>
                        <xref target="HEAD" format="counter"/>
                     </td>
                  </tr>
                  <tr>
                     <td>POST</td>
                     <td>Perform resource-specific processing on the request payload.</td>
                     <td>
                        <xref target="POST" format="counter"/>
                     </td>
                  </tr>
                  <tr>
                     <td>PUT</td>
                     <td>Replace all current representations of the target resource with
        the request payload.</td>
                     <td>
                        <xref target="PUT" format="counter"/>
                     </td>
                  </tr>
                  <tr>
                     <td>DELETE</td>
                     <td>Remove all current representations of the target resource.</td>
                     <td>
                        <xref target="DELETE" format="counter"/>
                     </td>
                  </tr>
                  <tr>
                     <td>CONNECT</td>
                     <td>Establish a tunnel to the server identified by the target resource.</td>
                     <td>
                        <xref target="CONNECT" format="counter"/>
                     </td>
                  </tr>
                  <tr>
                     <td>OPTIONS</td>
                     <td>Describe the communication options for the target resource.</td>
                     <td>
                        <xref target="OPTIONS" format="counter"/>
                     </td>
                  </tr>
                  <tr>
                     <td>TRACE</td>
                     <td>Perform a message loop-back test along the path to the target resource.</td>
                     <td>
                        <xref target="TRACE" format="counter"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <t>
   All general-purpose servers <bcp14>MUST</bcp14> support the methods GET and HEAD.
   All other methods are <bcp14>OPTIONAL</bcp14>.
</t>
            <t>
   The set of methods allowed by a target resource can be listed in an
   <xref target="header.allow" format="none">Allow</xref> header field (<xref target="header.allow"/>).
   However, the set of allowed methods can change dynamically.
   When a request method is received that is unrecognized or not implemented
   by an origin server, the origin server <bcp14>SHOULD</bcp14> respond with the
   <xref target="status.501" format="none">501 (Not Implemented)</xref> status code.
   When a request method is received that is known by an origin server but
   not allowed for the target resource, the origin server <bcp14>SHOULD</bcp14> respond
   with the <xref target="status.405" format="none">405 (Method Not Allowed)</xref> status code.
</t>
         </section>
         <section anchor="method.properties" title="Common Method Properties"><!--AUTOGENERATED FROM extract-method-defs.xslt, do not edit manually-->
            <table anchor="iana.method.registration.table">
               <thead>
                  <tr>
                     <th>Method</th>
                     <th>Safe</th>
                     <th>Idempotent</th>
                     <th>Reference</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>CONNECT</td>
                     <td>no</td>
                     <td>no</td>
                     <td>
            
                        <xref target="CONNECT"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>DELETE</td>
                     <td>no</td>
                     <td>yes</td>
                     <td>
            
                        <xref target="DELETE"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>GET</td>
                     <td>yes</td>
                     <td>yes</td>
                     <td>
            
                        <xref target="GET"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>HEAD</td>
                     <td>yes</td>
                     <td>yes</td>
                     <td>
            
                        <xref target="HEAD"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>OPTIONS</td>
                     <td>yes</td>
                     <td>yes</td>
                     <td>
            
                        <xref target="OPTIONS"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>POST</td>
                     <td>no</td>
                     <td>no</td>
                     <td>
            
                        <xref target="POST"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>PUT</td>
                     <td>no</td>
                     <td>yes</td>
                     <td>
            
                        <xref target="PUT"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>TRACE</td>
                     <td>yes</td>
                     <td>yes</td>
                     <td>
            
                        <xref target="TRACE"/>
         
                     </td>
                  </tr>
               </tbody>
            </table><!--(END)-->
            <section anchor="safe.methods" title="Safe Methods">
               <iref item="safe" primary="true"/>
               <t>
   Request methods are considered "safe" if
   their defined semantics are essentially read-only; i.e., the client does
   not request, and does not expect, any state change on the origin server
   as a result of applying a safe method to a target resource.  Likewise,
   reasonable use of a safe method is not expected to cause any harm,
   loss of property, or unusual burden on the origin server.
</t>
               <t>
   This definition of safe methods does not prevent an implementation from
   including behavior that is potentially harmful, that is not entirely read-only,
   or that causes side effects while invoking a safe method.  What is
   important, however, is that the client did not request that additional
   behavior and cannot be held accountable for it.  For example,
   most servers append request information to access log files at the
   completion of every response, regardless of the method, and that is
   considered safe even though the log storage might become full and crash
   the server.  Likewise, a safe request initiated by selecting an
   advertisement on the Web will often have the side effect of charging an
   advertising account.
</t>
               <t>
   Of the request methods defined by this specification, the
   GET, HEAD, OPTIONS, and TRACE methods are defined to be safe.
</t>
               <t>
   The purpose of distinguishing between safe and unsafe methods is to
   allow automated retrieval processes (spiders) and cache performance
   optimization (pre-fetching) to work without fear of causing harm.
   In addition, it allows a user agent to apply appropriate constraints
   on the automated use of unsafe methods when processing potentially
   untrusted content.
</t>
               <t>
   A user agent <bcp14>SHOULD</bcp14> distinguish between safe and unsafe methods when
   presenting potential actions to a user, such that the user can be made
   aware of an unsafe action before it is requested.
</t>
               <t>
   When a resource is constructed such that parameters within the effective
   request URI have the effect of selecting an action, it is the resource
   owner's responsibility to ensure that the action is consistent with the
   request method semantics.
   For example, it is common for Web-based content editing software
   to use actions within query parameters, such as "page?do=delete".
   If the purpose of such a resource is to perform an unsafe action, then
   the resource owner <bcp14>MUST</bcp14> disable or disallow that action when it is
   accessed using a safe request method. Failure to do so will result in
   unfortunate side effects when automated processes perform a GET on
   every URI reference for the sake of link maintenance, pre-fetching,
   building a search index, etc.
</t>
            </section>
            <section anchor="idempotent.methods" title="Idempotent Methods">
               <iref item="idempotent" primary="true"/>
               <t>
   A request method is considered
   "idempotent"
   if the intended effect on the server of multiple identical requests with
   that method is the same as the effect for a single such request.
   Of the request methods defined by this
   specification, PUT, DELETE, and safe request methods are idempotent.
</t>
               <t>
   Like the definition of safe, the idempotent property only applies to
   what has been requested by the user; a server is free to log each request
   separately, retain a revision control history, or implement other
   non-idempotent side effects for each idempotent request.
</t>
               <t>
   Idempotent methods are distinguished because the request can be repeated
   automatically if a communication failure occurs before the client is
   able to read the server's response.  For example, if a client sends a PUT
   request and the underlying connection is closed before any response is
   received, then the client can establish a new connection and retry the
   idempotent request. It knows that repeating the request will have
   the same intended effect, even if the original request succeeded, though
   the response might differ.
</t>
               <t>
   A client <bcp14>SHOULD NOT</bcp14> automatically retry a request with a non-idempotent
   method unless it has some means to know that the request semantics are
   actually idempotent, regardless of the method, or some means to detect that
   the original request was never applied.
</t>
               <t>
   For example, a user agent that knows (through design or configuration)
   that a POST request to a given resource is safe can repeat that request
   automatically. Likewise, a user agent designed specifically to operate on
   a version control repository might be able to recover from partial failure
   conditions by checking the target resource revision(s) after a failed
   connection, reverting or fixing any changes that were partially applied,
   and then automatically retrying the requests that failed.
</t>
               <t>
   Some clients use weaker signals to initiate automatic retries. For
   example, when a POST request is sent, but the underlying transport
   connection is closed before any part of the response is received. Although
   this is commonly implemented, it is not recommended.
</t>
               <t>
   A proxy <bcp14>MUST NOT</bcp14> automatically retry non-idempotent requests.
   A client <bcp14>SHOULD NOT</bcp14> automatically retry a failed automatic retry.
</t>
            </section>
            <section anchor="cacheable.methods" title="Methods and Caching">
               <t>
   For a cache to store and use a response, the associated method needs to
   explicitly allow caching, and detail under what conditions a response can
   be used to satisfy subsequent requests; a method definition which does not
   do so cannot be cached. For additional requirements see <xref target="Caching"/>.
</t>
               <t>
   This specification defines caching semantics for GET, HEAD, and POST,
   although the overwhelming majority of cache implementations only support
   GET and HEAD.
</t>
            </section>
         </section>
         <section anchor="method.definitions" title="Method Definitions">
            <section anchor="GET" title="GET">
               <iref primary="true" item="GET method"/>
               <t>
   The GET method requests transfer of a current selected representation for
   the <xref target="target.resource" format="none">target resource</xref>. GET is the primary mechanism of
   information retrieval and the focus of almost all performance
   optimizations. Hence, when people speak of retrieving some identifiable
   information via HTTP, they are generally referring to making a GET request.
</t>
               <t>
   It is tempting to think of resource identifiers as remote file system
   pathnames and of representations as being a copy of the contents of such
   files. In fact, that is how many resources are implemented (see
   <xref target="attack.pathname"/> for related security considerations).
   However, there are no such limitations in practice. The HTTP interface for
   a resource is just as likely to be implemented as a tree of content
   objects, a programmatic view on various database records, or a gateway to
   other information systems. Even when the URI mapping mechanism is tied to a
   file system, an origin server might be configured to execute the files with
   the request as input and send the output as the representation rather than
   transfer the files directly. Regardless, only the origin server needs to
   know how each of its resource identifiers corresponds to an implementation
   and how each implementation manages to select and send a current
   representation of the target resource in a response to GET.
</t>
               <t>
   A client can alter the semantics of GET to be a "range request", requesting
   transfer of only some part(s) of the selected representation, by sending a
   <xref target="header.range" format="none">Range</xref> header field in the request (<xref target="header.range"/>).
</t>
               <t>
   The GET method is specifically intended to reflect the quality of
   "sameness" identified by the request URI as if it were referenced as an
   ordinary hypertext link. A client <bcp14>SHOULD NOT</bcp14> generate a body in a GET
   request. A payload received in a GET request has no defined semantics,
   cannot alter the meaning or target of the request, and might lead some
   implementations to reject the request and close the connection because of
   its potential as a request smuggling attack
   (<xref target="Messaging" section="11.2" relative="#request.smuggling"/>).
</t>
               <t>
   The response to a GET request is cacheable; a cache <bcp14>MAY</bcp14> use it to satisfy
   subsequent GET and HEAD requests unless otherwise indicated by the
   Cache-Control header field (<xref target="Caching" section="5.2" relative="#header.cache-control"/>).
   A cache that receives a payload in a GET request is likely to ignore that
   payload and cache regardless of the payload contents.
</t>
            </section>
            <section anchor="HEAD" title="HEAD">
               <iref primary="true" item="HEAD method"/>
               <t>
   The HEAD method is identical to GET except that the server <bcp14>MUST NOT</bcp14>
   send a message body in the response (i.e., the response terminates at the
   end of the header section). The server <bcp14>SHOULD</bcp14> send the same header fields
   in response to a HEAD request as it would have sent if the request had been
   a GET, except that the payload header fields (<xref target="payload"/>)
   <bcp14>MAY</bcp14> be omitted. This method can be used for obtaining metadata about the
   selected representation without transferring the representation data and is
   often used for testing hypertext links for validity, accessibility, and
   recent modification.
</t>
               <t>
   A payload within a HEAD request message has no defined semantics;
   sending a payload body on a HEAD request might cause some existing
   implementations to reject the request.
</t>
               <t>
   The response to a HEAD request is cacheable; a cache <bcp14>MAY</bcp14> use it to
   satisfy subsequent HEAD requests unless otherwise indicated by the
   Cache-Control header field (<xref target="Caching" section="5.2" relative="#header.cache-control"/>). A HEAD response might
   also have an effect on previously cached responses to GET; see <xref target="Caching" section="4.3.5" relative="#head.effects"/>.
</t>
            </section>
            <section anchor="POST" title="POST">
               <iref primary="true" item="POST method"/>
               <t>
   The POST method requests that the <xref target="target.resource" format="none">target resource</xref> process
   the representation enclosed in the request according to the resource's own
   specific semantics. For example, POST is used for the following functions
   (among others):
</t>
               <ul>
                  <li>Providing a block of data, such as the fields entered into an HTML
      form, to a data-handling process;</li>
                  <li>Posting a message to a bulletin board, newsgroup, mailing list, blog,
      or similar group of articles;</li>
                  <li>Creating a new resource that has yet to be identified by the origin
      server; and</li>
                  <li>Appending data to a resource's existing representation(s).</li>
               </ul>
               <t>
   An origin server indicates response semantics by choosing an appropriate
   status code depending on the result of processing the POST request;
   almost all of the status codes defined by this specification might be
   received in a response to POST (the exceptions being <xref target="status.206" format="none">206 (Partial Content)</xref>,
   <xref target="status.304" format="none">304 (Not Modified)</xref>, and <xref target="status.416" format="none">416 (Range Not Satisfiable)</xref>).
</t>
               <t>
   If one or more resources has been created on the origin server as a result
   of successfully processing a POST request, the origin server <bcp14>SHOULD</bcp14> send
   a <xref target="status.201" format="none">201 (Created)</xref> response containing a <xref target="header.location" format="none">Location</xref>
   header field that provides an identifier for the primary resource created
   (<xref target="header.location"/>) and a representation that describes the
   status of the request while referring to the new resource(s).
</t>
               <t>
   Responses to POST requests are only cacheable when they include explicit
   freshness information (see <xref target="Caching" section="4.2.1" relative="#calculating.freshness.lifetime"/>) and a
   <xref target="header.content-location" format="none">Content-Location</xref> header field that has the same value as
   the POST's effective request URI (<xref target="header.content-location"/>). A cached POST response can be reused
   to satisfy a later GET or HEAD request, but not a POST request, since POST
   is required to be written through to the origin server, because it is
   unsafe; see <xref target="Caching" section="4" relative="#constructing.responses.from.caches"/>.
</t>
               <t>
   If the result of processing a POST would be equivalent to a representation
   of an existing resource, an origin server <bcp14>MAY</bcp14> redirect the user agent to
   that resource by sending a <xref target="status.303" format="none">303 (See Other)</xref> response with the
   existing resource's identifier in the <xref target="header.location" format="none">Location</xref> field.
   This has the benefits of providing the user agent a resource identifier
   and transferring the representation via a method more amenable to shared
   caching, though at the cost of an extra request if the user agent does not
   already have the representation cached.
</t>
            </section>
            <section anchor="PUT" title="PUT">
               <iref primary="true" item="PUT method"/>
               <t>
   The PUT method requests that the state of the <xref target="target.resource" format="none">target resource</xref>
   be created or replaced with the state defined by the representation
   enclosed in the request message payload.  A successful PUT of a given
   representation would suggest that a subsequent GET on that same target
   resource will result in an equivalent representation being sent in
   a <xref target="status.200" format="none">200 (OK)</xref> response.  However, there is no guarantee that
   such a state change will be observable, since the target resource might be
   acted upon by other user agents in parallel, or might be subject to dynamic
   processing by the origin server, before any subsequent GET is received.
   A successful response only implies that the user agent's intent was
   achieved at the time of its processing by the origin server.
</t>
               <t>   
   If the target resource does not have a current representation and
   the PUT successfully creates one, then the origin server <bcp14>MUST</bcp14> inform
   the user agent by sending a <xref target="status.201" format="none">201 (Created)</xref> response.  If the
   target resource does have a current representation and that representation is
   successfully modified in accordance with the state of the enclosed
   representation, then the origin server <bcp14>MUST</bcp14> send either a
   <xref target="status.200" format="none">200 (OK)</xref> or a <xref target="status.204" format="none">204 (No Content)</xref> response to
   indicate successful completion of the request.
</t>
               <t>
   An origin server <bcp14>SHOULD</bcp14> ignore unrecognized header fields received in a
   PUT request (i.e., do not save them as part of the resource state).
</t>
               <t>
   An origin server <bcp14>SHOULD</bcp14> verify that the PUT representation is
   consistent with any constraints the server has for the target
   resource that cannot or will not be changed by the PUT.  This is
   particularly important when the origin server uses internal
   configuration information related to the URI in order to set the
   values for representation metadata on GET responses.  When a PUT
   representation is inconsistent with the target resource, the origin
   server <bcp14>SHOULD</bcp14> either make them consistent, by transforming the
   representation or changing the resource configuration, or respond
   with an appropriate error message containing sufficient information
   to explain why the representation is unsuitable.  The
   <xref target="status.409" format="none">409 (Conflict)</xref> or <xref target="status.415" format="none">415 (Unsupported Media Type)</xref>
   status codes are suggested, with the latter being specific to constraints on
   <xref target="header.content-type" format="none">Content-Type</xref> values.
</t>
               <t>
   For example, if the target resource is configured to always have a
   <xref target="header.content-type" format="none">Content-Type</xref> of "text/html" and the representation being PUT
   has a Content-Type of "image/jpeg", the origin server ought to do one of:
</t>
               <ol type="a">
                  <li>reconfigure the target resource to reflect the new media type;</li>
                  <li>transform the PUT representation to a format consistent with that
       of the resource before saving it as the new resource state; or,</li>
                  <li>reject the request with a <xref target="status.415" format="none">415 (Unsupported Media Type)</xref>
       response indicating that the target resource is limited to "text/html",
       perhaps including a link to a different resource that would be a
       suitable target for the new representation.</li>
               </ol>
               <t>
   HTTP does not define exactly how a PUT method affects the state
   of an origin server beyond what can be expressed by the intent of
   the user agent request and the semantics of the origin server response.
   It does not define what a resource might be, in any sense of that
   word, beyond the interface provided via HTTP.  It does not define
   how resource state is "stored", nor how such storage might change
   as a result of a change in resource state, nor how the origin server
   translates resource state into representations.  Generally speaking,
   all implementation details behind the resource interface are
   intentionally hidden by the server.
</t>
               <t>
   An origin server <bcp14>MUST NOT</bcp14> send a validator header field
   (<xref target="response.validator"/>), such as an <xref target="header.etag" format="none">ETag</xref> or
   <xref target="header.last-modified" format="none">Last-Modified</xref> field, in a successful response to PUT unless
   the request's representation data was saved without any transformation
   applied to the body (i.e., the resource's new representation data is
   identical to the representation data received in the PUT request) and the
   validator field value reflects the new representation.
   This requirement allows a user agent to know when the representation body
   it has in memory remains current as a result of the PUT, thus not in need
   of being retrieved again from the origin server, and that the new validator(s)
   received in the response can be used for future conditional requests in
   order to prevent accidental overwrites (<xref target="preconditions"/>).
</t>
               <t>
   The fundamental difference between the POST and PUT methods is
   highlighted by the different intent for the enclosed representation.
   The target resource in a POST request is intended to handle the
   enclosed representation according to the resource's own semantics,
   whereas the enclosed representation in a PUT request is defined as
   replacing the state of the target resource. Hence, the intent of PUT is
   idempotent and visible to intermediaries, even though the exact effect is
   only known by the origin server.
</t>
               <t>
   Proper interpretation of a PUT request presumes that the user agent knows
   which target resource is desired. A service that selects a proper URI on
   behalf of the client, after receiving a state-changing request, <bcp14>SHOULD</bcp14> be
   implemented using the POST method rather than PUT. If the origin server
   will not make the requested PUT state change to the target resource and
   instead wishes to have it applied to a different resource, such as when the
   resource has been moved to a different URI, then the origin server <bcp14>MUST</bcp14>
   send an appropriate <xref target="status.3xx" format="none">3xx (Redirection)</xref> response; the
   user agent <bcp14>MAY</bcp14> then make its own decision regarding whether or not to
   redirect the request.
</t>
               <t>
   A PUT request applied to the target resource can have side effects
   on other resources.  For example, an article might have a URI for
   identifying "the current version" (a resource) that is separate
   from the URIs identifying each particular version (different
   resources that at one point shared the same state as the current version
   resource).  A successful PUT request on "the current version" URI might
   therefore create a new version resource in addition to changing the
   state of the target resource, and might also cause links to be added
   between the related resources.
</t>
               <t>
   An origin server that allows PUT on a given target resource <bcp14>MUST</bcp14> send a
   <xref target="status.400" format="none">400 (Bad Request)</xref> response to a PUT request that contains a
   <xref target="header.content-range" format="none">Content-Range</xref> header field (<xref target="header.content-range"/>), since
   the payload is likely to be partial content that has been mistakenly PUT as
   a full representation.
   Partial content updates are possible by targeting a separately identified
   resource with state that overlaps a portion of the larger resource, or by
   using a different method that has been specifically defined for partial
   updates (for example, the PATCH method defined in
   <xref target="RFC5789"/>).
</t>
               <t>
   Responses to the PUT method are not cacheable. If a successful PUT request
   passes through a cache that has one or more stored responses for the
   effective request URI, those stored responses will be invalidated
   (see <xref target="Caching" section="4.4" relative="#invalidation"/>).
</t>
            </section>
            <section anchor="DELETE" title="DELETE">
               <iref primary="true" item="DELETE method"/>
               <t>
   The DELETE method requests that the origin server remove the association
   between the <xref target="target.resource" format="none">target resource</xref> and its current functionality.
   In effect, this method is similar to the rm command in UNIX: it expresses a
   deletion operation on the URI mapping of the origin server rather than an
   expectation that the previously associated information be deleted.
</t>
               <t>
   If the target resource has one or more current representations, they might
   or might not be destroyed by the origin server, and the associated storage
   might or might not be reclaimed, depending entirely on the nature of the
   resource and its implementation by the origin server (which are beyond the
   scope of this specification). Likewise, other implementation aspects of a
   resource might need to be deactivated or archived as a result of a DELETE,
   such as database or gateway connections. In general, it is assumed that the
   origin server will only allow DELETE on resources for which it has a
   prescribed mechanism for accomplishing the deletion.
</t>
               <t>
   Relatively few resources allow the DELETE method — its primary use
   is for remote authoring environments, where the user has some direction
   regarding its effect. For example, a resource that was previously created
   using a PUT request, or identified via the Location header field after a
   <xref target="status.201" format="none">201 (Created)</xref> response to a POST request, might allow a
   corresponding DELETE request to undo those actions.  Similarly, custom
   user agent implementations that implement an authoring function, such as
   revision control clients using HTTP for remote operations, might use
   DELETE based on an assumption that the server's URI space has been crafted
   to correspond to a version repository.
</t>
               <t>
   If a DELETE method is successfully applied, the origin server <bcp14>SHOULD</bcp14> send
</t>
               <ul>
                  <li>a <xref target="status.202" format="none">202 (Accepted)</xref> status code if the action will likely succeed but
   has not yet been enacted,</li>
                  <li>a <xref target="status.204" format="none">204 (No Content)</xref> status code if the action has been
   enacted and no further information is to be supplied, or</li>
                  <li>a <xref target="status.200" format="none">200 (OK)</xref> status code if the action has been enacted and
   the response message includes a representation describing the status.</li>
               </ul>
               <t>
   A payload within a DELETE request message has no defined semantics;
   sending a payload body on a DELETE request might cause some existing
   implementations to reject the request.
</t>
               <t>
   Responses to the DELETE method are not cacheable. If a successful DELETE
   request passes through a cache that has one or more stored responses for
   the effective request URI, those stored responses will be invalidated (see
   <xref target="Caching" section="4.4" relative="#invalidation"/>).
</t>
            </section>
            <section anchor="CONNECT" title="CONNECT">
               <iref primary="true" item="CONNECT method"/>
               <t>
   The CONNECT method requests that the recipient establish a tunnel to the
   destination origin server identified by the request-target and, if
   successful, thereafter restrict its behavior to blind forwarding of
   packets, in both directions, until the tunnel is closed.
   Tunnels are commonly used to create an end-to-end virtual connection,
   through one or more proxies, which can then be secured using TLS
   (Transport Layer Security, <xref target="RFC8446"/>).
</t>
               <t>
   CONNECT is intended only for use in requests to a proxy.
   An origin server that receives a CONNECT request for itself <bcp14>MAY</bcp14>
   respond with a <xref target="status.2xx" format="none">2xx (Successful)</xref> status code to indicate that a connection
   is established.  However, most origin servers do not implement CONNECT.
</t>
               <t>
   A client sending a CONNECT request <bcp14>MUST</bcp14> send the authority form of
   request-target (<xref target="Messaging" section="3.2" relative="#request.target"/>); i.e., the request-target consists
   of only the host name and port number of the tunnel destination, separated
   by a colon. For example,
</t>
               <artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
  CONNECT server.example.com:80 HTTP/1.1
  Host: server.example.com:80
  
  ]]></artwork>
               <t>
   The recipient proxy can establish a tunnel either by directly connecting to
   the request-target or, if configured to use another proxy, by forwarding
   the CONNECT request to the next inbound proxy.
   Any <xref target="status.2xx" format="none">2xx (Successful)</xref> response indicates
   that the sender (and all inbound proxies) will switch to tunnel mode
   immediately after the blank line that concludes the successful response's
   header section; data received after that blank line is from the server
   identified by the request-target.
   Any response other than a successful response indicates that the tunnel
   has not yet been formed and that the connection remains governed by HTTP.
</t>
               <t>
   A tunnel is closed when a tunnel intermediary detects that either side
   has closed its connection: the intermediary <bcp14>MUST</bcp14> attempt to send any
   outstanding data that came from the closed side to the other side, close
   both connections, and then discard any remaining data left undelivered.
</t>
               <t>
   Proxy authentication might be used to establish the
   authority to create a tunnel.  For example,
</t>
               <artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
  CONNECT server.example.com:80 HTTP/1.1
  Host: server.example.com:80
  Proxy-Authorization: basic aGVsbG86d29ybGQ=
  
  ]]></artwork>
               <t>
   There are significant risks in establishing a tunnel to arbitrary servers,
   particularly when the destination is a well-known or reserved TCP port that
   is not intended for Web traffic. For example, a CONNECT to a request-target
   of "example.com:25" would suggest that the proxy connect to the reserved
   port for SMTP traffic; if allowed, that could trick the proxy into
   relaying spam email. Proxies that support CONNECT <bcp14>SHOULD</bcp14> restrict its
   use to a limited set of known ports or a configurable whitelist of safe
   request targets.
</t>
               <t>
   A server <bcp14>MUST NOT</bcp14> send any Transfer-Encoding or
   <xref target="header.content-length" format="none">Content-Length</xref> header fields in a
   <xref target="status.2xx" format="none">2xx (Successful)</xref> response to CONNECT.
   A client <bcp14>MUST</bcp14> ignore any Content-Length or Transfer-Encoding header
   fields received in a successful response to CONNECT.
</t>
               <t>
   A payload within a CONNECT request message has no defined semantics;
   sending a payload body on a CONNECT request might cause some existing
   implementations to reject the request.
</t>
               <t>
   Responses to the CONNECT method are not cacheable.
</t>
            </section>
            <section anchor="OPTIONS" title="OPTIONS">
               <iref primary="true" item="OPTIONS method"/>
               <t>
   The OPTIONS method requests information about the communication options
   available for the target resource, at either the origin server or an
   intervening intermediary. This method allows a client to determine the
   options and/or requirements associated with a resource, or the capabilities
   of a server, without implying a resource action.
</t>
               <t>
   An OPTIONS request with an asterisk ("*") as the request-target
   (<xref target="Messaging" section="3.2" relative="#request.target"/>) applies to the server in general rather than to a
   specific resource. Since a server's communication options typically depend
   on the resource, the "*" request is only useful as a "ping" or "no-op"
   type of method; it does nothing beyond allowing the client to test
   the capabilities of the server. For example, this can be used to test
   a proxy for HTTP/1.1 conformance (or lack thereof).
</t>
               <t>
   If the request-target is not an asterisk, the OPTIONS request applies
   to the options that are available when communicating with the target
   resource.
</t>
               <t>
   A server generating a successful response to OPTIONS <bcp14>SHOULD</bcp14> send any
   header fields that might indicate optional features implemented by the
   server and applicable to the target resource (e.g., <xref target="header.allow" format="none">Allow</xref>),
   including potential extensions not defined by this specification.
   The response payload, if any, might also describe the communication options
   in a machine or human-readable representation. A standard format for such a
   representation is not defined by this specification, but might be defined by
   future extensions to HTTP.
</t>
               <t>
   A client <bcp14>MAY</bcp14> send a <xref target="header.max-forwards" format="none">Max-Forwards</xref> header field in an
   OPTIONS request to target a specific recipient in the request chain (see
   <xref target="header.max-forwards"/>). A proxy <bcp14>MUST NOT</bcp14> generate a
   Max-Forwards header field while forwarding a request unless that request
   was received with a Max-Forwards field.
</t>
               <t>
   A client that generates an OPTIONS request containing a payload body
   <bcp14>MUST</bcp14> send a valid <xref target="header.content-type" format="none">Content-Type</xref> header field describing
   the representation media type. Note that this specification does not define
   any use for such a payload.
</t>
               <t>
   Responses to the OPTIONS method are not cacheable.
</t>
            </section>
            <section anchor="TRACE" title="TRACE">
               <iref primary="true" item="TRACE method"/>
               <t>
   The TRACE method requests a remote, application-level loop-back of the
   request message. The final recipient of the request <bcp14>SHOULD</bcp14> reflect the
   message received, excluding some fields described below, back to the client
   as the message body of a <xref target="status.200" format="none">200 (OK)</xref> response with a
   <xref target="header.content-type" format="none">Content-Type</xref> of "message/http" (<xref target="Messaging" section="10.1" relative="#media.type.message.http"/>).
   The final recipient is either the origin server or the first server to
   receive a <xref target="header.max-forwards" format="none">Max-Forwards</xref> value of zero (0) in the request
   (<xref target="header.max-forwards"/>).
</t>
               <t>
   A client <bcp14>MUST NOT</bcp14> generate header fields in a TRACE request containing
   sensitive data that might be disclosed by the response. For example, it
   would be foolish for a user agent to send stored user credentials
   <xref target="request.auth"/> or cookies <xref target="RFC6265"/> in a TRACE
   request. The final recipient of the request <bcp14>SHOULD</bcp14> exclude any request
   header fields that are likely to contain sensitive data when that recipient
   generates the response body.
</t>
               <t>
   TRACE allows the client to see what is being received at the other
   end of the request chain and use that data for testing or diagnostic
   information. The value of the <xref target="header.via" format="none">Via</xref> header field (<xref target="header.via"/>)
   is of particular interest, since it acts as a trace of the request chain.
   Use of the <xref target="header.max-forwards" format="none">Max-Forwards</xref> header field allows the client to
   limit the length of the request chain, which is useful for testing a chain
   of proxies forwarding messages in an infinite loop.
</t>
               <t>
   A client <bcp14>MUST NOT</bcp14> send a message body in a TRACE request.
</t>
               <t>
   Responses to the TRACE method are not cacheable.
</t>
            </section>
         </section>
         <section anchor="method.extensibility" title="Method Extensibility">
            <t>
   Additional methods, outside the scope of this specification, have been
   specified for use in HTTP. All such methods ought to be registered
   within the "Hypertext Transfer Protocol (HTTP) Method Registry".
</t>
            <section anchor="method.registry" title="Method Registry">
               <t>
  The "Hypertext Transfer Protocol (HTTP) Method Registry", maintained by
  IANA at <eref target="https://www.iana.org/assignments/http-methods"/>,
  registers <xref target="method.overview" format="none">method</xref> names.
</t>
               <t>
  HTTP method registrations <bcp14>MUST</bcp14> include the following fields:
</t>
               <ul>
                  <li>Method Name (see <xref target="methods"/>)</li>
                  <li>Safe ("yes" or "no", see <xref target="safe.methods"/>)</li>
                  <li>Idempotent ("yes" or "no", see <xref target="idempotent.methods"/>)</li>
                  <li>Pointer to specification text</li>
               </ul>
               <t>
  Values to be added to this namespace require IETF Review
  (see <xref target="RFC8126" sectionFormat="comma" section="4.8"/>).
</t>
            </section>
            <section anchor="considerations.for.new.methods" title="Considerations for New Methods">
               <t>
   Standardized methods are generic; that is, they are potentially
   applicable to any resource, not just one particular media type, kind of
   resource, or application. As such, it is preferred that new methods
   be registered in a document that isn't specific to a single application or
   data format, since orthogonal technologies deserve orthogonal specification.
</t>
               <t>
   Since message parsing (<xref target="Messaging" section="6" relative="#message.body"/>) needs to be independent of method
   semantics (aside from responses to HEAD), definitions of new methods
   cannot change the parsing algorithm or prohibit the presence of a message
   body on either the request or the response message.
   Definitions of new methods can specify that only a zero-length message body
   is allowed by requiring a Content-Length header field with a value of "0".
</t>
               <t>
   A new method definition needs to indicate whether it is safe (<xref target="safe.methods"/>), idempotent (<xref target="idempotent.methods"/>),
   cacheable (<xref target="cacheable.methods"/>), what
   semantics are to be associated with the payload body if any is present
   in the request and what refinements the method makes to header field
   or status code semantics.
   If the new method is cacheable, its definition ought to describe how, and
   under what conditions, a cache can store a response and use it to satisfy a
   subsequent request.
   The new method ought to describe whether it can be made conditional
   (<xref target="preconditions"/>) and, if so, how a server responds
   when the condition is false.
   Likewise, if the new method might have some use for partial response
   semantics (<xref target="header.range"/>), it ought to document this, too.
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> Avoid defining a method name that starts with "M-", since that
    prefix might be misinterpreted as having the semantics assigned to it
    by <xref target="RFC2774"/>.
  </t>
               </aside>
            </section>
         </section>
      </section>
      <section anchor="request.header.fields" title="Request Header Fields">
         <t>
   A client sends request header fields to provide more information about
   the request context, make the request conditional based on the target
   resource state, suggest preferred formats for the response, supply
   authentication credentials, or modify the expected request processing.
   These fields act as request modifiers, similar to the parameters on a
   programming language method invocation.
</t>
         <section anchor="request.controls" title="Controls">
            <t>
   Controls are request header fields that direct specific handling of the
   request.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Cache-Control</td>
                     <td>
                        <xref target="Caching" section="5.2" relative="#header.cache-control"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Expect</td>
                     <td>
                        <xref target="header.expect"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Host</td>
                     <td>
                        <xref target="header.host"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Max-Forwards</td>
                     <td>
                        <xref target="header.max-forwards"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Pragma</td>
                     <td>
                        <xref target="Caching" section="5.4" relative="#header.pragma"/>
                     </td>
                  </tr>
                  <tr>
                     <td>TE</td>
                     <td>
                        <xref target="Messaging" section="7.4" relative="#header.te"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="header.expect" title="Expect">
               <iref primary="true" item="Expect header field"/>
               <iref primary="true" item="100-continue (expect value)"/>
               <t>
   The "Expect" header field in a request indicates a certain set of
   behaviors (expectations) that need to be supported by the server in
   order to properly handle this request. The only such expectation defined
   by this specification is <xref target="header.expect" format="none">100-continue</xref>.
</t>
               <iref primary="true" item="Grammar" subitem="Expect"/>
               <sourcecode type="abnf7230"><![CDATA[  Expect  = "100-continue"
]]></sourcecode>
               <t>
   The Expect field-value is case-insensitive.
</t>
               <t>
   A server that receives an Expect field-value other than
   <xref target="header.expect" format="none">100-continue</xref> 
                  <bcp14>MAY</bcp14> respond with a
   <xref target="status.417" format="none">417 (Expectation Failed)</xref> status code to indicate that the
   unexpected expectation cannot be met.
</t>
               <t>
   A 100-continue expectation informs recipients that the
   client is about to send a (presumably large) message body in this request
   and wishes to receive a <xref target="status.100" format="none">100 (Continue)</xref> interim response if
   the request-line and header fields are not sufficient to cause an immediate
   success, redirect, or error response. This allows the client to wait for an
   indication that it is worthwhile to send the message body before actually
   doing so, which can improve efficiency when the message body is huge or
   when the client anticipates that an error is likely (e.g., when sending a
   state-changing method, for the first time, without previously verified
   authentication credentials).
</t>
               <t>
   For example, a request that begins with
</t>
               <artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
  PUT /somewhere/fun HTTP/1.1
  Host: origin.example.com
  Content-Type: video/h264
  Content-Length: 1234567890987
  Expect: 100-continue
  
  ]]></artwork>
               <t>
   allows the origin server to immediately respond with an error message, such
   as <xref target="status.401" format="none">401 (Unauthorized)</xref> or <xref target="status.405" format="none">405 (Method Not Allowed)</xref>,
   before the client starts filling the pipes with an unnecessary data
   transfer.
</t>
               <t>
   Requirements for clients:
</t>
               <ul>
                  <li>
    A client <bcp14>MUST NOT</bcp14> generate a 100-continue expectation in a request that
    does not include a message body.
   </li>
                  <li>
    A client that will wait for a <xref target="status.100" format="none">100 (Continue)</xref> response
    before sending the request message body <bcp14>MUST</bcp14> send an
    <xref target="header.expect" format="none">Expect</xref> header field containing a 100-continue expectation.
   </li>
                  <li>
    A client that sends a 100-continue expectation is not required to wait
    for any specific length of time; such a client <bcp14>MAY</bcp14> proceed to send the
    message body even if it has not yet received a response. Furthermore,
    since <xref target="status.100" format="none">100 (Continue)</xref> responses cannot be sent through an
    HTTP/1.0 intermediary, such a client <bcp14>SHOULD NOT</bcp14> wait for an indefinite
    period before sending the message body.
   </li>
                  <li>
    A client that receives a <xref target="status.417" format="none">417 (Expectation Failed)</xref> status
    code in response to a request containing a 100-continue expectation
    <bcp14>SHOULD</bcp14> repeat that request without a 100-continue expectation, since
    the 417 response merely indicates that the response chain does not
    support expectations (e.g., it passes through an HTTP/1.0 server).
   </li>
               </ul>
               <t>
   Requirements for servers:
</t>
               <ul>
                  <li>
    A server that receives a 100-continue expectation in an HTTP/1.0 request
    <bcp14>MUST</bcp14> ignore that expectation.
   </li>
                  <li>
    A server <bcp14>MAY</bcp14> omit sending a <xref target="status.100" format="none">100 (Continue)</xref> response if
    it has already received some or all of the message body for the
    corresponding request, or if the framing indicates that there is no
    message body.
   </li>
                  <li>
    A server that sends a <xref target="status.100" format="none">100 (Continue)</xref> response <bcp14>MUST</bcp14>
    ultimately send a final status code, once the message body is received
    and processed, unless the connection is closed prematurely.
   </li>
                  <li>
    A server that responds with a final status code before reading the
    entire request payload body <bcp14>SHOULD</bcp14> indicate whether it intends to
    close the connection (see <xref target="Messaging" section="9.7" relative="#persistent.tear-down"/>) or
    continue reading the payload body.
   </li>
               </ul>
               <t>
   An origin server <bcp14>MUST</bcp14>, upon receiving an HTTP/1.1 (or later) request-line
   and a complete header section that contains a 100-continue expectation and
   indicates a request message body will follow, either send an immediate
   response with a final status code, if that status can be determined by
   examining just the request-line and header fields, or send an immediate
   <xref target="status.100" format="none">100 (Continue)</xref> response to encourage the client to send the
   request's message body. The origin server <bcp14>MUST NOT</bcp14> wait for the message
   body before sending the <xref target="status.100" format="none">100 (Continue)</xref> response.
</t>
               <t>
   A proxy <bcp14>MUST</bcp14>, upon receiving an HTTP/1.1 (or later) request-line
   and a complete header section that contains a 100-continue expectation and
   indicates a request message body will follow, either send an immediate
   response with a final status code, if that status can be determined by
   examining just the request-line and header fields, or begin forwarding the
   request toward the origin server by sending a corresponding request-line
   and header section to the next inbound server. If the proxy believes (from
   configuration or past interaction) that the next inbound server only
   supports HTTP/1.0, the proxy <bcp14>MAY</bcp14> generate an immediate
   <xref target="status.100" format="none">100 (Continue)</xref> response to encourage the client to begin
   sending the message body.
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> The Expect header field was added after the original publication of
    HTTP/1.1 <xref target="RFC2068"/> as both the means to request an interim
    <xref target="status.100" format="none">100 (Continue)</xref> response and the general mechanism for indicating must-understand
    extensions. However, the extension mechanism has not been used by clients
    and the must-understand requirements have not been implemented by many
    servers, rendering the extension mechanism useless. This specification has
    removed the extension mechanism in order to simplify the definition and
    processing of 100-continue.
  </t>
               </aside>
            </section>
            <section anchor="header.max-forwards" title="Max-Forwards">
               <iref primary="true" item="Max-Forwards header field"/>
               <t>
   The "Max-Forwards" header field provides a mechanism with the
   TRACE (<xref target="TRACE"/>) and OPTIONS (<xref target="OPTIONS"/>)
   request methods to limit the number of times that the request is forwarded by
   proxies. This can be useful when the client is attempting to
   trace a request that appears to be failing or looping mid-chain.
</t>
               <iref primary="true" item="Grammar" subitem="Max-Forwards"/>
               <sourcecode type="abnf7230"><![CDATA[  Max-Forwards = 1*DIGIT
]]></sourcecode>
               <t>
   The Max-Forwards value is a decimal integer indicating the remaining
   number of times this request message can be forwarded.
</t>
               <t>
   Each intermediary that receives a TRACE or OPTIONS request containing a
   Max-Forwards header field <bcp14>MUST</bcp14> check and update its value prior to
   forwarding the request. If the received value is zero (0), the intermediary
   <bcp14>MUST NOT</bcp14> forward the request; instead, the intermediary <bcp14>MUST</bcp14> respond as
   the final recipient. If the received Max-Forwards value is greater than
   zero, the intermediary <bcp14>MUST</bcp14> generate an updated Max-Forwards field in the
   forwarded message with a field-value that is the lesser of a) the received
   value decremented by one (1) or b) the recipient's maximum supported value
   for Max-Forwards.
</t>
               <t>
   A recipient <bcp14>MAY</bcp14> ignore a Max-Forwards header field received with any
   other request methods.
</t>
            </section>
         </section>
         <section anchor="preconditions" title="Preconditions">
            <iref item="conditional request" primary="true"/>
            <t>
   A conditional request is an HTTP request with one or more request header
   fields that indicate a precondition to be tested before
   applying the request method to the target resource.
   <xref target="evaluation"/> defines when preconditions are applied.
   <xref target="precedence"/> defines the order of evaluation when more than
   one precondition is present.
</t>
            <t>
   Conditional GET requests are the most efficient mechanism for HTTP
   cache updates <xref target="Caching"/>.  Conditionals can also be
   applied to state-changing methods, such as PUT and DELETE, to prevent
   the "lost update" problem: one client accidentally overwriting
   the work of another client that has been acting in parallel.
</t>
            <t>
               <iref primary="true" item="selected representation"/>
   Conditional request preconditions are based on the state of the target
   resource as a whole (its current value set) or the state as observed
   in a previously obtained representation (one value in that set).
   A resource might have multiple current representations, each with its
   own observable state.  The conditional request mechanisms assume that
   the mapping of requests to a "selected representation" (<xref target="representations"/>)
   will be consistent over time if the server intends to take advantage of
   conditionals. Regardless, if the mapping is inconsistent and the server is
   unable to select the appropriate representation, then no harm will result
   when the precondition evaluates to false.
</t>
            <t>
   The following request header fields allow a
   client to place a precondition on the state of the target resource, so that
   the action corresponding to the method semantics will not be applied if the
   precondition evaluates to false. Each precondition defined by this
   specification consists of a comparison between a set of validators obtained
   from prior representations of the target resource to the current state of
   validators for the <xref target="representations" format="none">selected representation</xref>
   (<xref target="response.validator"/>). Hence, these preconditions evaluate
   whether the state of the target resource has changed since a given state
   known by the client. The effect of such an evaluation depends on the method
   semantics and choice of conditional, as defined in <xref target="evaluation"/>.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>If-Match</td>
                     <td>
                        <xref target="header.if-match"/>
                     </td>
                  </tr>
                  <tr>
                     <td>If-None-Match</td>
                     <td>
                        <xref target="header.if-none-match"/>
                     </td>
                  </tr>
                  <tr>
                     <td>If-Modified-Since</td>
                     <td>
                        <xref target="header.if-modified-since"/>
                     </td>
                  </tr>
                  <tr>
                     <td>If-Unmodified-Since</td>
                     <td>
                        <xref target="header.if-unmodified-since"/>
                     </td>
                  </tr>
                  <tr>
                     <td>If-Range</td>
                     <td>
                        <xref target="header.if-range"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="evaluation" title="Evaluation">
               <t>
   Except when excluded below, a recipient cache or origin server <bcp14>MUST</bcp14>
   evaluate received request preconditions after it has successfully performed
   its normal request checks and just before it would perform the action
   associated with the request method.
   A server <bcp14>MUST</bcp14> ignore all received preconditions if its response to the
   same request without those conditions would have been a status code other
   than a <xref target="status.2xx" format="none">2xx (Successful)</xref> or <xref target="status.412" format="none">412 (Precondition Failed)</xref>.
   In other words, redirects and failures take precedence over the evaluation
   of preconditions in conditional requests.
</t>
               <t>
   A server that is not the origin server for the target resource and cannot
   act as a cache for requests on the target resource <bcp14>MUST NOT</bcp14> evaluate the
   conditional request header fields defined by this specification, and it
   <bcp14>MUST</bcp14> forward them if the request is forwarded, since the generating
   client intends that they be evaluated by a server that can provide a
   current representation.
   Likewise, a server <bcp14>MUST</bcp14> ignore the conditional request header fields
   defined by this specification when received with a request method that does
   not involve the selection or modification of a
   <xref target="representations" format="none">selected representation</xref>, such as CONNECT, OPTIONS, or TRACE.
</t>
               <t>
   Note that protocol extensions can modify the conditions under which
   revalidation is triggered. For example, the "immutable" cache directive
   (defined by <xref target="RFC8246"/>) instructs caches to forgo
   revalidation of fresh responses even when requested by the client.
</t>
               <t>
   Conditional request header fields that are defined by extensions to HTTP
   might place conditions on all recipients, on the state of the target
   resource in general, or on a group of resources. For instance, the "If"
   header field in WebDAV can make a request conditional on various aspects
   of multiple resources, such as locks, if the recipient understands and
   implements that field (<xref target="RFC4918" sectionFormat="comma" section="10.4"/>).
</t>
               <t>
   Although conditional request header fields are defined as being usable with
   the HEAD method (to keep HEAD's semantics consistent with those of GET),
   there is no point in sending a conditional HEAD because a successful
   response is around the same size as a <xref target="status.304" format="none">304 (Not Modified)</xref>
   response and more useful than a <xref target="status.412" format="none">412 (Precondition Failed)</xref>
   response.
</t>
            </section>
            <section anchor="precedence" title="Precedence">
               <t>
   When more than one conditional request header field is present in a request,
   the order in which the fields are evaluated becomes important. In practice,
   the fields defined in this document are consistently implemented in a
   single, logical order, since "lost update" preconditions have more strict
   requirements than cache validation, a validated cache is more efficient
   than a partial response, and entity tags are presumed to be more accurate
   than date validators.
</t>
               <t>
   A recipient cache or origin server <bcp14>MUST</bcp14> evaluate the request
   preconditions defined by this specification in the following order:
</t>
               <ol>
                  <li anchor="precedence1">
                     <t>When recipient is the origin server and
     <xref target="header.if-match" format="none">If-Match</xref> is present,
     evaluate the <xref target="header.if-match" format="none">If-Match</xref> precondition:</t>
     
                     <ul>
                        <li>if true, continue to step <xref target="precedence3" format="counter"/>
                        </li>
                        <li>if false, respond <xref target="status.412" format="none">412 (Precondition Failed)</xref> unless
           it can be determined that the state-changing request has already
           succeeded (see <xref target="header.if-match"/>)</li>
                     </ul>
   
                  </li>
                  <li anchor="precedence2">
                     <t>When recipient is the origin server,
     <xref target="header.if-match" format="none">If-Match</xref> is not present, and
     <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> is present,
     evaluate the <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> precondition:</t>
     
                     <ul>
                        <li>if true, continue to step <xref target="precedence3" format="counter"/>
                        </li>
                        <li>if false, respond <xref target="status.412" format="none">412 (Precondition Failed)</xref> unless
           it can be determined that the state-changing request has already
           succeeded (see <xref target="header.if-unmodified-since"/>)</li>
                     </ul>
   
                  </li>
                  <li anchor="precedence3">
                     <t>When <xref target="header.if-none-match" format="none">If-None-Match</xref> is present,
     evaluate the <xref target="header.if-none-match" format="none">If-None-Match</xref> precondition:</t>
     
                     <ul>
                        <li>if true, continue to step <xref target="precedence5" format="counter"/>
                        </li>
                        <li>if false for GET/HEAD, respond <xref target="status.304" format="none">304 (Not Modified)</xref>
                        </li>
                        <li>if false for other methods, respond <xref target="status.412" format="none">412 (Precondition Failed)</xref>
                        </li>
                     </ul>
   
                  </li>
                  <li anchor="precedence4">
                     <t>When the method is GET or HEAD,
     <xref target="header.if-none-match" format="none">If-None-Match</xref> is not present, and
     <xref target="header.if-modified-since" format="none">If-Modified-Since</xref> is present,
     evaluate the <xref target="header.if-modified-since" format="none">If-Modified-Since</xref> precondition:</t>
     
                     <ul>
                        <li>if true, continue to step <xref target="precedence5" format="counter"/>
                        </li>
                        <li>if false, respond <xref target="status.304" format="none">304 (Not Modified)</xref>
                        </li>
                     </ul>
   
                  </li>
                  <li anchor="precedence5">
                     <t>When the method is GET and both
     <xref target="header.range" format="none">Range</xref> and <xref target="header.if-range" format="none">If-Range</xref> are present,
     evaluate the <xref target="header.if-range" format="none">If-Range</xref> precondition:</t>
     
                     <ul>
                        <li>if the validator matches and the Range specification is
           applicable to the selected representation, respond
           <xref target="status.206" format="none">206 (Partial Content)</xref>
                        </li>
                     </ul>
   
                  </li>
                  <li anchor="precedencelast">
                     <t>Otherwise,</t>
     
                     <ul>
                        <li>all conditions are met, so perform the requested action and
           respond according to its success or failure.</li>
                     </ul>
   
                  </li>
               </ol>
               <t>
   Any extension to HTTP/1.1 that defines additional conditional request
   header fields ought to define its own expectations regarding the order
   for evaluating such fields in relation to those defined in this document
   and other conditionals that might be found in practice.
</t>
            </section>
            <section anchor="header.if-match" title="If-Match">
               <iref primary="true" item="If-Match header field"/>
               <t>
   The "If-Match" header field makes the request method conditional on the
   recipient origin server either having at least one current
   representation of the target resource, when the field-value is "*", or
   having a current representation of the target resource that has an
   entity-tag matching a member of the list of entity-tags provided in the
   field-value.
</t>
               <t>
   An origin server <bcp14>MUST</bcp14> use the strong comparison function when comparing
   entity-tags for If-Match (<xref target="entity.tag.comparison"/>), since
   the client intends this precondition to prevent the method from being
   applied if there have been any changes to the representation data.
</t>
               <iref primary="true" item="Grammar" subitem="If-Match"/>
               <sourcecode type="abnf7230"><![CDATA[  If-Match = "*" / 1#entity-tag
]]></sourcecode>
               <t>
   Examples:
</t>
               <artwork type="example"><![CDATA[
  If-Match: "xyzzy"
  If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
  If-Match: *
]]></artwork>
               <t>
   If-Match is most often used with state-changing methods (e.g., POST, PUT,
   DELETE) to prevent accidental overwrites when multiple user agents might be
   acting in parallel on the same resource (i.e., to prevent the "lost update"
   problem). It can also be used with safe methods to abort a request if the
   <xref target="representations" format="none">selected representation</xref> does not match one already stored
   (or partially stored) from a prior request.
</t>
               <t>
   An origin server that receives an If-Match header field <bcp14>MUST</bcp14> evaluate the
   condition prior to performing the method (<xref target="evaluation"/>).
   If the field-value is "*", the condition is false if the origin server
   does not have a current representation for the target resource.
   If the field-value is a list of entity-tags, the condition is false if
   none of the listed tags match the entity-tag of the selected representation.
</t>
               <t>
   An origin server <bcp14>MUST NOT</bcp14> perform the requested method if a received
   If-Match condition evaluates to false; instead, the origin server <bcp14>MUST</bcp14>
   respond with either
   a) the <xref target="status.412" format="none">412 (Precondition Failed)</xref> status code or
   b) one of the <xref target="status.2xx" format="none">2xx (Successful)</xref> status codes if the origin
   server has verified that a state change is being requested and the final
   state is already reflected in the current state of the target resource
   (i.e., the change requested by the user agent has already succeeded, but
   the user agent might not be aware of it, perhaps because the prior response
   was lost or a compatible change was made by some other user agent).
   In the latter case, the origin server <bcp14>MUST NOT</bcp14> send a validator header
   field in the response unless it can verify that the request is a duplicate
   of an immediately prior change made by the same user agent.
</t>
               <t>
   The If-Match header field can be ignored by caches and intermediaries
   because it is not applicable to a stored response.
</t>
            </section>
            <section anchor="header.if-none-match" title="If-None-Match">
               <iref primary="true" item="If-None-Match header field"/>
               <t>
   The "If-None-Match" header field makes the request method conditional on
   a recipient cache or origin server either not having any current
   representation of the target resource, when the field-value is "*", or
   having a selected representation with an entity-tag that does not match any
   of those listed in the field-value.
</t>
               <t>
   A recipient <bcp14>MUST</bcp14> use the weak comparison function when comparing
   entity-tags for If-None-Match (<xref target="entity.tag.comparison"/>),
   since weak entity-tags can be used for cache validation even if there have
   been changes to the representation data.
</t>
               <iref primary="true" item="Grammar" subitem="If-None-Match"/>
               <sourcecode type="abnf7230"><![CDATA[  If-None-Match = "*" / 1#entity-tag
]]></sourcecode>
               <t>
   Examples:
</t>
               <artwork type="example"><![CDATA[
  If-None-Match: "xyzzy"
  If-None-Match: W/"xyzzy"
  If-None-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
  If-None-Match: W/"xyzzy", W/"r2d2xxxx", W/"c3piozzzz"
  If-None-Match: *
]]></artwork>
               <t>
   If-None-Match is primarily used in conditional GET requests to enable
   efficient updates of cached information with a minimum amount of
   transaction overhead. When a client desires to update one or more stored
   responses that have entity-tags, the client <bcp14>SHOULD</bcp14> generate an
   If-None-Match header field containing a list of those entity-tags when
   making a GET request; this allows recipient servers to send a
   <xref target="status.304" format="none">304 (Not Modified)</xref> response to indicate when one of those
   stored responses matches the selected representation.
</t>
               <t>
   If-None-Match can also be used with a value of "*" to prevent an unsafe
   request method (e.g., PUT) from inadvertently modifying an existing
   representation of the target resource when the client believes that
   the resource does not have a current representation (<xref target="safe.methods"/>).
   This is a variation on the "lost update" problem that might arise if more
   than one client attempts to create an initial representation for the target
   resource.
</t>
               <t>
   An origin server that receives an If-None-Match header field <bcp14>MUST</bcp14>
   evaluate the condition prior to performing the method
   (<xref target="evaluation"/>).
   If the field-value is "*", the condition is false if the origin server
   has a current representation for the target resource.
   If the field-value is a list of entity-tags, the condition is false if
   one of the listed tags match the entity-tag of the selected representation.
</t>
               <t>
   An origin server <bcp14>MUST NOT</bcp14> perform the requested method if the condition
   evaluates to false; instead, the origin server <bcp14>MUST</bcp14> respond with either
   a) the <xref target="status.304" format="none">304 (Not Modified)</xref> status code if the request method
   is GET or HEAD or b) the <xref target="status.412" format="none">412 (Precondition Failed)</xref> status
   code for all other request methods.
</t>
               <t>
   Requirements on cache handling of a received If-None-Match header field
   are defined in <xref target="Caching" section="4.3.2" relative="#validation.received"/>.
</t>
            </section>
            <section anchor="header.if-modified-since" title="If-Modified-Since">
               <iref primary="true" item="If-Modified-Since header field"/>
               <t>
   The "If-Modified-Since" header field makes a GET or HEAD request method
   conditional on the selected representation's modification date being more
   recent than the date provided in the field-value. Transfer of the selected
   representation's data is avoided if that data has not changed.
</t>
               <iref primary="true" item="Grammar" subitem="If-Modified-Since"/>
               <sourcecode type="abnf7230"><![CDATA[  If-Modified-Since = HTTP-date
]]></sourcecode>
               <t>
   An example of the field is:
</t>
               <artwork type="example"><![CDATA[
  If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
]]></artwork>
               <t>
   A recipient <bcp14>MUST</bcp14> ignore If-Modified-Since if the request contains an
   <xref target="header.if-none-match" format="none">If-None-Match</xref> header field; the condition in
   <xref target="header.if-none-match" format="none">If-None-Match</xref> is considered to be a more accurate
   replacement for the condition in If-Modified-Since, and the two are only
   combined for the sake of interoperating with older intermediaries that
   might not implement <xref target="header.if-none-match" format="none">If-None-Match</xref>.
</t>
               <t>
   A recipient <bcp14>MUST</bcp14> ignore the If-Modified-Since header field if the
   received field-value is not a valid HTTP-date, or if the request method
   is neither GET nor HEAD.
</t>
               <t>
   A recipient <bcp14>MUST</bcp14> interpret an If-Modified-Since field-value's timestamp
   in terms of the origin server's clock.
</t>
               <t>
   If-Modified-Since is typically used for two distinct purposes:
   1) to allow efficient updates of a cached representation that does not
   have an entity-tag and 2) to limit the scope of a web traversal to resources 
   that have recently changed.
</t>
               <t>
   When used for cache updates, a cache will typically use the value of the
   cached message's <xref target="header.last-modified" format="none">Last-Modified</xref> field to generate the field
   value of If-Modified-Since. This behavior is most interoperable for cases
   where clocks are poorly synchronized or when the server has chosen to only
   honor exact timestamp matches (due to a problem with Last-Modified dates
   that appear to go "back in time" when the origin server's clock is
   corrected or a representation is restored from an archived backup).
   However, caches occasionally generate the field value based on other data,
   such as the <xref target="header.date" format="none">Date</xref> header field of the cached message or the
   local clock time that the message was received, particularly when the
   cached message does not contain a <xref target="header.last-modified" format="none">Last-Modified</xref> field.
</t>
               <t>
   When used for limiting the scope of retrieval to a recent time window, a
   user agent will generate an If-Modified-Since field value based on either
   its own local clock or a <xref target="header.date" format="none">Date</xref> header field received from the
   server in a prior response. Origin servers that choose an exact timestamp
   match based on the selected representation's <xref target="header.last-modified" format="none">Last-Modified</xref>
   field will not be able to help the user agent limit its data transfers to
   only those changed during the specified window.
</t>
               <t>
   An origin server that receives an If-Modified-Since header field <bcp14>SHOULD</bcp14>
   evaluate the condition prior to performing the method
   (<xref target="evaluation"/>).
   The origin server <bcp14>SHOULD NOT</bcp14> perform the requested method if the selected
   representation's last modification date is earlier than or equal to the
   date provided in the field-value; instead, the origin server <bcp14>SHOULD</bcp14>
   generate a <xref target="status.304" format="none">304 (Not Modified)</xref> response, including only those
   metadata that are useful for identifying or updating a previously cached
   response.
</t>
               <t>
   Requirements on cache handling of a received If-Modified-Since header field
   are defined in <xref target="Caching" section="4.3.2" relative="#validation.received"/>.
</t>
            </section>
            <section anchor="header.if-unmodified-since" title="If-Unmodified-Since">
               <iref primary="true" item="If-Unmodified-Since header field"/>
               <t>
   The "If-Unmodified-Since" header field makes the request method conditional
   on the selected representation's last modification date being earlier than or
   equal to the date provided in the field-value. This field accomplishes the
   same purpose as <xref target="header.if-match" format="none">If-Match</xref> for cases where the user agent does
   not have an entity-tag for the representation.
</t>
               <iref primary="true" item="Grammar" subitem="If-Unmodified-Since"/>
               <sourcecode type="abnf7230"><![CDATA[  If-Unmodified-Since = HTTP-date
]]></sourcecode>
               <t>
   An example of the field is:
</t>
               <artwork type="example"><![CDATA[
  If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT
]]></artwork>
               <t>
   A recipient <bcp14>MUST</bcp14> ignore If-Unmodified-Since if the request contains an
   <xref target="header.if-match" format="none">If-Match</xref> header field; the condition in
   <xref target="header.if-match" format="none">If-Match</xref> is considered to be a more accurate replacement for
   the condition in If-Unmodified-Since, and the two are only combined for the
   sake of interoperating with older intermediaries that might not implement
   <xref target="header.if-match" format="none">If-Match</xref>.
</t>
               <t>
   A recipient <bcp14>MUST</bcp14> ignore the If-Unmodified-Since header field if the
   received field-value is not a valid HTTP-date.
</t>
               <t>
   A recipient <bcp14>MUST</bcp14> interpret an If-Unmodified-Since field-value's timestamp
   in terms of the origin server's clock.
</t>
               <t>
   If-Unmodified-Since is most often used with state-changing methods
   (e.g., POST, PUT, DELETE) to prevent accidental overwrites when multiple
   user agents might be acting in parallel on a resource that does
   not supply entity-tags with its representations (i.e., to prevent the
   "lost update" problem). It can also be used with safe methods to abort a
   request if the <xref target="representations" format="none">selected representation</xref> does not match one
   already stored (or partially stored) from a prior request.
</t>
               <t>
   An origin server that receives an If-Unmodified-Since header field <bcp14>MUST</bcp14>
   evaluate the condition prior to performing the method
   (<xref target="evaluation"/>).
   The origin server <bcp14>MUST NOT</bcp14> perform the requested method if the selected
   representation's last modification date is more recent than the date
   provided in the field-value; instead the origin server <bcp14>MUST</bcp14> respond with either
   a) the <xref target="status.412" format="none">412 (Precondition Failed)</xref> status code or
   b) one of the <xref target="status.2xx" format="none">2xx (Successful)</xref> status codes if the origin
   server has verified that a state change is being requested and the final
   state is already reflected in the current state of the target resource
   (i.e., the change requested by the user agent has already succeeded, but
   the user agent might not be aware of that because the prior response message
   was lost or a compatible change was made by some other user agent).
   In the latter case, the origin server <bcp14>MUST NOT</bcp14> send a validator header
   field in the response unless it can verify that the request is a duplicate
   of an immediately prior change made by the same user agent.
</t>
               <t>
   The If-Unmodified-Since header field can be ignored by caches and
   intermediaries because it is not applicable to a stored response.
</t>
            </section>
            <section anchor="header.if-range" title="If-Range">
               <iref primary="true" item="If-Range header field"/>
               <t>
   The "If-Range" header field provides a special conditional request
   mechanism that is similar to the <xref target="header.if-match" format="none">If-Match</xref> and
   <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> header fields but that instructs the
   recipient to ignore the <xref target="header.range" format="none">Range</xref> header field if the validator
   doesn't match, resulting in transfer of the new selected representation
   instead of a <xref target="status.412" format="none">412 (Precondition Failed)</xref> response.
</t>
               <t>
   If a client has a partial copy of a representation and wishes
   to have an up-to-date copy of the entire representation, it could use the
   <xref target="header.range" format="none">Range</xref> header field with a conditional GET (using
   either or both of <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> and
   <xref target="header.if-match" format="none">If-Match</xref>.) However, if the precondition fails because the
   representation has been modified, the client would then have to make a
   second request to obtain the entire current representation.
</t>
               <t>
   The "If-Range" header field allows a client to "short-circuit" the second
   request. Informally, its meaning is as follows: if the representation is unchanged,
   send me the part(s) that I am requesting in Range; otherwise, send me the
   entire representation.
</t>
               <iref primary="true" item="Grammar" subitem="If-Range"/>
               <sourcecode type="abnf7230"><![CDATA[  If-Range = entity-tag / HTTP-date
]]></sourcecode>
               <t>
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field in a request that
   does not contain a <xref target="header.range" format="none">Range</xref> header field.
   A server <bcp14>MUST</bcp14> ignore an If-Range header field received in a request that
   does not contain a <xref target="header.range" format="none">Range</xref> header field.
   An origin server <bcp14>MUST</bcp14> ignore an If-Range header field received in a
   request for a target resource that does not support Range requests.
</t>
               <t>
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field containing an
   entity-tag that is marked as weak.
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field containing an
   <xref target="http.date" format="none">HTTP-date</xref> unless the client has no entity-tag for
   the corresponding representation and the date is a strong validator
   in the sense defined by <xref target="lastmod.comparison"/>.
</t>
               <t>
   A server that evaluates an If-Range precondition <bcp14>MUST</bcp14> use the strong
   comparison function when comparing entity-tags (<xref target="entity.tag.comparison"/>)
   and <bcp14>MUST</bcp14> evaluate the condition as false if an <xref target="http.date" format="none">HTTP-date</xref>
   validator is provided that is not a strong validator in the sense defined
   by <xref target="lastmod.comparison"/>.
   A valid <xref target="header.etag" format="none">entity-tag</xref> can be distinguished from a valid
   <xref target="http.date" format="none">HTTP-date</xref> by examining the first two characters for a
   DQUOTE.
</t>
               <t>
   If the validator given in the If-Range header field matches the current
   validator for the selected representation of the target resource, then
   the server <bcp14>SHOULD</bcp14> process the <xref target="header.range" format="none">Range</xref> header field as
   requested. If the validator does not match, the server <bcp14>MUST</bcp14> ignore the
   <xref target="header.range" format="none">Range</xref> header field. Note that this comparison by exact
   match, including when the validator is an <xref target="http.date" format="none">HTTP-date</xref>, differs
   from the "earlier than or equal to" comparison used when evaluating an
   <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> conditional.
</t>
            </section>
         </section>
         <section anchor="header.range" title="Range">
            <iref primary="true" item="Range header field"/>
            <t>
   The "Range" header field on a GET request modifies the method semantics to
   request transfer of only one or more subranges of the selected
   representation data, rather than the entire selected representation data.
</t>
            <iref primary="true" item="Grammar" subitem="Range"/>
            <sourcecode type="abnf7230"><![CDATA[  Range = ranges-specifier
]]></sourcecode>
            <t>
   Clients often encounter interrupted data
   transfers as a result of canceled requests or dropped connections. When a
   client has stored a partial representation, it is desirable to request the
   remainder of that representation in a subsequent request rather than
   transfer the entire representation. Likewise, devices with limited local
   storage might benefit from being able to request only a subset of a larger
   representation, such as a single page of a very large document, or the
   dimensions of an embedded image.
</t>
            <t>
   Range requests are an <bcp14>OPTIONAL</bcp14> feature
   of HTTP, designed so that recipients not implementing this feature (or not
   supporting it for the target resource) can respond as if it is a normal
   GET request without impacting interoperability. Partial responses are
   indicated by a distinct status code to not be mistaken for full responses
   by caches that might not implement the feature.
</t>
            <t>
   A server <bcp14>MAY</bcp14> ignore the Range header field. However, origin servers and
   intermediate caches ought to support byte ranges when possible, since they
   support efficient recovery from partially failed transfers and partial
   retrieval of large representations. A server <bcp14>MUST</bcp14> ignore a Range header
   field received with a request method other than GET.
</t>
            <t>
   Although the range request mechanism is designed to allow for
   extensible range types, this specification only defines requests for
   byte ranges.
</t>
            <t>
   An origin server <bcp14>MUST</bcp14> ignore a Range header field that contains a range
   unit it does not understand. A proxy <bcp14>MAY</bcp14> discard a Range header
   field that contains a range unit it does not understand.
</t>
            <t>
   A server that supports range requests <bcp14>MAY</bcp14> ignore or reject a
   <xref target="header.range" format="none">Range</xref> header field that consists of more than two
   overlapping ranges, or a set of many small ranges that are not listed
   in ascending order, since both are indications of either a broken client or
   a deliberate denial-of-service attack (<xref target="overlapping.ranges"/>).
   A client <bcp14>SHOULD NOT</bcp14> request multiple ranges that are inherently less
   efficient to process and transfer than a single range that encompasses the
   same data.
</t>
            <t>
   A client that is requesting multiple ranges <bcp14>SHOULD</bcp14> list those ranges in
   ascending order (the order in which they would typically be received in a
   complete representation) unless there is a specific need to request a later
   part earlier. For example, a user agent processing a large representation
   with an internal catalog of parts might need to request later parts first,
   particularly if the representation consists of pages stored in reverse
   order and the user agent wishes to transfer one page at a time.
</t>
            <t>
   The Range header field is evaluated after evaluating the precondition header
   fields defined in <xref target="preconditions"/>, and only if the result in absence
   of the Range header field would be a <xref target="status.200" format="none">200 (OK)</xref> response. In
   other words, Range is ignored when a conditional GET would result in a
   <xref target="status.304" format="none">304 (Not Modified)</xref> response.
</t>
            <t>
   The If-Range header field (<xref target="header.if-range"/>) can be used as
   a precondition to applying the Range header field.
</t>
            <t>
   If all of the preconditions are true, the server supports the Range header
   field for the target resource, and the specified range(s) are valid and
   satisfiable (as defined in <xref target="byte.ranges"/>), the
   server <bcp14>SHOULD</bcp14> send a <xref target="status.206" format="none">206 (Partial Content)</xref> response with a
   payload containing one or more partial representations that correspond to
   the satisfiable ranges requested.
</t>
            <t>
   If all of the preconditions are true, the server supports the Range header
   field for the target resource, and the specified range(s) are invalid or
   unsatisfiable, the server <bcp14>SHOULD</bcp14> send a
   <xref target="status.416" format="none">416 (Range Not Satisfiable)</xref> response.
</t>
         </section>
         <section anchor="request.conneg" title="Content Negotiation">
            <t>
   The following request header fields are sent by a user agent to engage in
   <xref target="proactive.negotiation" format="none">proactive negotiation</xref> of the response content, as defined in
   <xref target="proactive.negotiation"/>. The preferences sent in these
   fields apply to any content in the response, including representations of
   the target resource, representations of error or processing status, and
   potentially even the miscellaneous text strings that might appear within
   the protocol.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Accept</td>
                     <td>
                        <xref target="header.accept"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Accept-Charset</td>
                     <td>
                        <xref target="header.accept-charset"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Accept-Encoding</td>
                     <td>
                        <xref target="header.accept-encoding"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Accept-Language</td>
                     <td>
                        <xref target="header.accept-language"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <t>
   For each of these header fields, a request that does not contain it
   implies that the user agent has no preference on that axis of negotiation.
   If the header field is present in a request and none of the available
   representations for the response can be considered acceptable according to
   it, the origin server can either honor the header field by sending a
   <xref target="status.406" format="none">406 (Not Acceptable)</xref> response or disregard the header field
   by treating the response as if it is not subject to content negotiation
   for that request header field. This does not imply, however, that the
   client will be able to use the representation.
</t>
            <t>
   
               <strong>Note:</strong> Sending these header fields makes it easier for a server to
   identify an individual by virtue of the user agent's request
   characteristics (<xref target="fingerprinting"/>).
</t>
            <t>
   Each of these header fields defines a wildcard value (often, "*") to
   select unspecified values. If no wildcard is present, all values not
   explicitly mentioned in the field are considered "not acceptable" to the
   client.
</t>
            <t>
   
               <strong>Note:</strong> In practice, using wildcards in content negotiation has limited
   practical value, because it is seldom useful to say, for example, "I
   prefer image/* more or less than (some other specific value)". Clients can
   explicitly request a <xref target="status.406" format="none">406 (Not Acceptable)</xref> response if a
   more preferred format is not available by sending Accept: */*;q=0, but
   they still need to be able to handle a different response, since the
   server is allowed to ignore their preference.
</t>
            <section anchor="quality.values" title="Quality Values">
               <t>
   Many of the request header fields for <xref target="proactive.negotiation" format="none">proactive negotiation</xref>
   use a common parameter, named "q" (case-insensitive), to assign a relative
   "weight" to the preference for that associated kind of content.
   This weight is referred to as a "quality value" (or "qvalue") because
   the same parameter name is often used within server configurations to
   assign a weight to the relative quality of the various representations
   that can be selected for a resource.
</t>
               <t>
   The weight is normalized to a real number in the range 0 through 1,
   where 0.001 is the least preferred and 1 is the most preferred;
   a value of 0 means "not acceptable". If no "q" parameter is present,
   the default weight is 1.
</t>
               <iref primary="true" item="Grammar" subitem="weight"/>
               <iref primary="true" item="Grammar" subitem="qvalue"/>
               <sourcecode type="abnf7230"><![CDATA[  weight = OWS ";" OWS "q=" qvalue
  qvalue = ( "0" [ "." 0*3DIGIT ] )
         / ( "1" [ "." 0*3("0") ] )
]]></sourcecode>
               <t>
   A sender of qvalue <bcp14>MUST NOT</bcp14> generate more than three digits after the
   decimal point. User configuration of these values ought to be limited in
   the same fashion.
</t>
            </section>
            <section anchor="header.accept" title="Accept">
               <iref primary="true" item="Accept header field"/>
               <t>
   The "Accept" header field can be used by user agents to specify their
   preferences regarding response media types. For example, Accept header
   fields can be used to indicate that the request is specifically limited to
   a small set of desired types, as in the case of a request for an in-line
   image.
</t>
               <iref primary="true" item="Grammar" subitem="Accept"/>
               <iref primary="true" item="Grammar" subitem="media-range"/>
               <iref primary="true" item="Grammar" subitem="accept-params"/>
               <iref primary="true" item="Grammar" subitem="accept-ext"/>
               <sourcecode type="abnf7230"><![CDATA[  Accept = #( media-range [ accept-params ] )
  
  media-range    = ( "*/*"
                   / ( type "/" "*" )
                   / ( type "/" subtype )
                   ) *( OWS ";" OWS parameter )
  accept-params  = weight *( accept-ext )
  accept-ext = OWS ";" OWS token [ "=" ( token / quoted-string ) ]
]]></sourcecode>
               <t>
   The asterisk "*" character is used to group media types into ranges,
   with "*/*" indicating all media types and "type/*" indicating all
   subtypes of that type. The media-range can include media type
   parameters that are applicable to that range.
</t>
               <t>
   Each media-range might be followed by zero or more applicable media type
   parameters (e.g., <xref target="charset" format="none">charset</xref>), an optional "q" parameter for
   indicating a relative weight (<xref target="quality.values"/>), and then zero or more extension
   parameters. The "q" parameter is necessary if any extensions (accept-ext) are present,
   since it acts as a separator between the two parameter sets.
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> Use of the "q" parameter name to separate media type
    parameters from Accept extension parameters is due to historical
    practice. Although this prevents any media type parameter named
    "q" from being used with a media range, such an event is believed
    to be unlikely given the lack of any "q" parameters in the IANA
    media type registry and the rare usage of any media type
    parameters in Accept. Future media types are discouraged from
    registering any parameter named "q".
  </t>
               </aside>
               <t>
   The example
</t>
               <artwork type="example"><![CDATA[
  Accept: audio/*; q=0.2, audio/basic
]]></artwork>
               <t>
   is interpreted as "I prefer audio/basic, but send me any audio
   type if it is the best available after an 80% markdown in quality".
</t>
               <t>
   A more elaborate example is
</t>
               <artwork type="example"><![CDATA[
  Accept: text/plain; q=0.5, text/html,
          text/x-dvi; q=0.8, text/x-c
]]></artwork>
               <t>
   Verbally, this would be interpreted as "text/html and text/x-c are
   the equally preferred media types, but if they do not exist, then send the
   text/x-dvi representation, and if that does not exist, send the text/plain
   representation".
</t>
               <t>
   Media ranges can be overridden by more specific media ranges or
   specific media types. If more than one media range applies to a given
   type, the most specific reference has precedence. For example,
</t>
               <artwork type="example"><![CDATA[
  Accept: text/*, text/plain, text/plain;format=flowed, */*
]]></artwork>
               <t>
   have the following precedence:
</t>
               <ol>
                  <li>text/plain;format=flowed</li>
                  <li>text/plain</li>
                  <li>text/*</li>
                  <li>*/*</li>
               </ol>
               <t>
   The media type quality factor associated with a given type is
   determined by finding the media range with the highest precedence
   that matches the type. For example,
</t>
               <artwork type="example"><![CDATA[
  Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,
          text/html;level=2;q=0.4, */*;q=0.5
]]></artwork>
               <t>
   would cause the following values to be associated:
</t>
               <table align="left">
                  <thead>
                     <tr>
                        <th>Media Type</th>
                        <th>Quality Value</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>text/html;level=1</td>
                        <td>1</td>
                     </tr>
                     <tr>
                        <td>text/html</td>
                        <td>0.7</td>
                     </tr>
                     <tr>
                        <td>text/plain</td>
                        <td>0.3</td>
                     </tr>
                     <tr>
                        <td>image/jpeg</td>
                        <td>0.5</td>
                     </tr>
                     <tr>
                        <td>text/html;level=2</td>
                        <td>0.4</td>
                     </tr>
                     <tr>
                        <td>text/html;level=3</td>
                        <td>0.7</td>
                     </tr>
                  </tbody>
               </table>
               <t>
   
                  <strong>Note:</strong> A user agent might be provided with a default set of quality
   values for certain media ranges. However, unless the user agent is
   a closed system that cannot interact with other rendering agents,
   this default set ought to be configurable by the user.
</t>
            </section>
            <section anchor="header.accept-charset" title="Accept-Charset">
               <iref primary="true" item="Accept-Charset header field"/>
               <t>
   The "Accept-Charset" header field can be sent by a user agent to indicate
   its preferences for charsets in textual response content. For example,
   this field allows user agents capable of understanding more comprehensive
   or special-purpose charsets to signal that capability to an origin server
   that is capable of representing information in those charsets.
</t>
               <iref primary="true" item="Grammar" subitem="Accept-Charset"/>
               <sourcecode type="abnf7230"><![CDATA[  Accept-Charset = 1#( ( charset / "*" ) [ weight ] )
]]></sourcecode>
               <t>
   Charset names are defined in <xref target="charset"/>.
   A user agent <bcp14>MAY</bcp14> associate a quality value with each charset to indicate
   the user's relative preference for that charset, as defined in <xref target="quality.values"/>.
   An example is
</t>
               <artwork type="example"><![CDATA[
  Accept-Charset: iso-8859-5, unicode-1-1;q=0.8
]]></artwork>
               <t>
   The special value "*", if present in the Accept-Charset field,
   matches every charset that is not mentioned elsewhere in the
   Accept-Charset field.
</t>
               <t>
   
                  <strong>Note:</strong> Accept-Charset is deprecated because UTF-8 has become nearly
   ubiquitous and sending a detailed list of user-preferred charsets wastes
   bandwidth, increases latency, and makes passive fingerprinting far too
   easy (<xref target="fingerprinting"/>). Most general-purpose user agents
   do not send Accept-Charset, unless specifically configured to do so.
</t>
            </section>
            <section anchor="header.accept-encoding" title="Accept-Encoding">
               <iref primary="true" item="Accept-Encoding header field"/>
               <t>
   The "Accept-Encoding" header field can be used by user agents to indicate
   their preferences regarding response content-codings (<xref target="content.codings"/>). An "identity" token is used as a synonym for
   "no encoding" in order to communicate when no encoding is preferred.
</t>
               <iref primary="true" item="Grammar" subitem="Accept-Encoding"/>
               <iref primary="true" item="Grammar" subitem="codings"/>
               <sourcecode type="abnf7230"><![CDATA[  Accept-Encoding  = #( codings [ weight ] )
  codings          = content-coding / "identity" / "*"
]]></sourcecode>
               <t>
   Each codings value <bcp14>MAY</bcp14> be given an associated quality value
   representing the preference for that encoding, as defined in <xref target="quality.values"/>.
   The asterisk "*" symbol in an Accept-Encoding field matches any available
   content-coding not explicitly listed in the header field.
</t>
               <t>
   For example,
</t>
               <artwork type="example"><![CDATA[
  Accept-Encoding: compress, gzip
  Accept-Encoding:
  Accept-Encoding: *
  Accept-Encoding: compress;q=0.5, gzip;q=1.0
  Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0
]]></artwork>
               <t>
   A server tests whether a content-coding for a given representation is
   acceptable using these rules:
</t>
               <ol>
                  <li>If no Accept-Encoding field is in the request, any content-coding is
       considered acceptable by the user agent.</li>
                  <li>If the representation has no content-coding, then it is acceptable
       by default unless specifically excluded by the Accept-Encoding field
       stating either "identity;q=0" or "*;q=0" without a more specific
       entry for "identity".</li>
                  <li>If the representation's content-coding is one of the content-codings
       listed in the Accept-Encoding field, then it is acceptable unless
       it is accompanied by a qvalue of 0. (As defined in <xref target="quality.values"/>, a
       qvalue of 0 means "not acceptable".)</li>
                  <li>If multiple content-codings are acceptable, then the acceptable
       content-coding with the highest non-zero qvalue is preferred.</li>
               </ol>
               <t>
   An Accept-Encoding header field with a combined field-value that is empty
   implies that the user agent does not want any content-coding in response.
   If an Accept-Encoding header field is present in a request and none of the
   available representations for the response have a content-coding that
   is listed as acceptable, the origin server <bcp14>SHOULD</bcp14> send a response
   without any content-coding.
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> Most HTTP/1.0 applications do not recognize or obey qvalues
    associated with content-codings. This means that qvalues might not
    work and are not permitted with x-gzip or x-compress.
  </t>
               </aside>
            </section>
            <section anchor="header.accept-language" title="Accept-Language">
               <iref primary="true" item="Accept-Language header field"/>
               <t>
   The "Accept-Language" header field can be used by user agents to
   indicate the set of natural languages that are preferred in the response.
   Language tags are defined in <xref target="language.tags"/>.
</t>
               <iref primary="true" item="Grammar" subitem="Accept-Language"/>
               <iref primary="true" item="Grammar" subitem="language-range"/>
               <sourcecode type="abnf7230"><![CDATA[  Accept-Language = 1#( language-range [ weight ] )
  language-range  = 
            <language-range, see [RFC4647], Section 2.1>
]]></sourcecode>
               <t>
   Each language-range can be given an associated quality value
   representing an estimate of the user's preference for the languages
   specified by that range, as defined in <xref target="quality.values"/>. For example,
</t>
               <artwork type="example"><![CDATA[
  Accept-Language: da, en-gb;q=0.8, en;q=0.7
]]></artwork>
               <t>
   would mean: "I prefer Danish, but will accept British English and
   other types of English".
</t>
               <t>
   Note that some recipients treat the order in which language tags are listed
   as an indication of descending priority, particularly for tags that are
   assigned equal quality values (no value is the same as q=1). However, this
   behavior cannot be relied upon. For consistency and to maximize
   interoperability, many user agents assign each language tag a unique
   quality value while also listing them in order of decreasing quality.
   Additional discussion of language priority lists can be found in
   <xref target="RFC4647" section="2.3"/>.
</t>
               <t>
   For matching, <xref target="RFC4647" section="3"/> defines 
   several matching schemes. Implementations can offer the most appropriate
   matching scheme for their requirements. The "Basic Filtering" scheme
   (<xref target="RFC4647" sectionFormat="comma" section="3.3.1"/>) is identical to the
   matching scheme that was previously defined for HTTP in
   <xref target="RFC2616" section="14.4"/>.
</t>
               <t>
   It might be contrary to the privacy expectations of the user to send
   an Accept-Language header field with the complete linguistic preferences of
   the user in every request (<xref target="fingerprinting"/>).
</t>
               <t>
   Since intelligibility is highly dependent on the individual user, user
   agents need to allow user control over the linguistic preference (either
   through configuration of the user agent itself or by defaulting to a user
   controllable system setting).
   A user agent that does not provide such control to the user <bcp14>MUST NOT</bcp14>
   send an Accept-Language header field.
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> User agents ought to provide guidance to users when setting a
    preference, since users are rarely familiar with the details of language
    matching as described above. For example, users might assume that on
    selecting "en-gb", they will be served any kind of English document if
    British English is not available. A user agent might suggest, in such a
    case, to add "en" to the list for better matching behavior.
  </t>
               </aside>
            </section>
         </section>
         <section anchor="request.auth" title="Authentication Credentials">
            <t>
   HTTP provides a general framework for access control and authentication,
   via an extensible set of challenge-response authentication schemes, which
   can be used by a server to challenge a client request and by a client to
   provide authentication information.
</t>
            <t>
   Two header fields are used for carrying authentication credentials.
   Note that various custom mechanisms for
   user authentication use the Cookie header field for this purpose, as
   defined in <xref target="RFC6265"/>.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Authorization</td>
                     <td>
                        <xref target="header.authorization"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Proxy-Authorization</td>
                     <td>
                        <xref target="header.proxy-authorization"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="challenge.and.response" title="Challenge and Response">
               <t>
   HTTP provides a simple challenge-response authentication framework
   that can be used by a server to challenge a client request and by a
   client to provide authentication information. It uses a case-insensitive
   token as a means to identify the authentication scheme, followed
   by additional information necessary for achieving authentication via that
   scheme. The latter can be either a comma-separated list of parameters or a
   single sequence of characters capable of holding base64-encoded
   information.
</t>
               <t>
   Authentication parameters are name=value pairs, where the name token is
   matched case-insensitively,
   and each parameter name <bcp14>MUST</bcp14> only occur once per challenge.
</t>
               <iref primary="true" item="Grammar" subitem="auth-scheme"/>
               <iref primary="true" item="Grammar" subitem="auth-param"/>
               <iref primary="true" item="Grammar" subitem="token68"/>
               <sourcecode type="abnf7230"><![CDATA[  auth-scheme    = token

  auth-param     = token BWS "=" BWS ( token / quoted-string )

  token68        = 1*( ALPHA / DIGIT /
                       "-" / "." / "_" / "~" / "+" / "/" ) *"="
]]></sourcecode>
               <t>
   The token68 syntax allows the 66 unreserved URI characters
   (<xref target="RFC3986"/>), plus a few others, so that it can hold a
   base64, base64url (URL and filename safe alphabet), base32, or base16 (hex)
   encoding, with or without padding, but excluding whitespace
   (<xref target="RFC4648"/>).
</t>
               <t>
   A <xref target="status.401" format="none">401 (Unauthorized)</xref> response message is used by an origin
   server to challenge the authorization of a user agent, including a
   <xref target="header.www-authenticate" format="none">WWW-Authenticate</xref> header field containing at least one
   challenge applicable to the requested resource.
</t>
               <t>
   A <xref target="status.407" format="none">407 (Proxy Authentication Required)</xref> response message is
   used by a proxy to challenge the authorization of a client, including a
   <xref target="header.proxy-authenticate" format="none">Proxy-Authenticate</xref> header field containing at least one
   challenge applicable to the proxy for the requested resource.
</t>
               <iref primary="true" item="Grammar" subitem="challenge"/>
               <sourcecode type="abnf7230"><![CDATA[  challenge   = auth-scheme [ 1*SP ( token68 / #auth-param ) ]
]]></sourcecode>
               <aside>
                  <t>
     
                     <strong>Note:</strong> Many clients fail to parse a challenge that contains an unknown
     scheme. A workaround for this problem is to list well-supported schemes
     (such as "basic") first.<!-- see https://greenbytes.de/tech/tc/httpauth/#multibasicunknown2 -->
  </t>
               </aside>
               <t>
   A user agent that wishes to authenticate itself with an origin server
   — usually, but not necessarily, after receiving a
   <xref target="status.401" format="none">401 (Unauthorized)</xref> — can do so by including an
   <xref target="header.authorization" format="none">Authorization</xref> header field with the request.
</t>
               <t>
   A client that wishes to authenticate itself with a proxy — usually,
   but not necessarily, after receiving a
   <xref target="status.407" format="none">407 (Proxy Authentication Required)</xref> — can do so by
   including a <xref target="header.proxy-authorization" format="none">Proxy-Authorization</xref> header field with the
   request.
</t>
               <t>
   Both the <xref target="header.authorization" format="none">Authorization</xref> field value and the
   <xref target="header.proxy-authorization" format="none">Proxy-Authorization</xref> field value contain the client's
   credentials for the realm of the resource being requested, based upon a
   challenge received in a response (possibly at some point in the past).
   When creating their values, the user agent ought to do so by selecting the
   challenge with what it considers to be the most secure auth-scheme that it
   understands, obtaining credentials from the user as appropriate.
   Transmission of credentials within header field values implies significant
   security considerations regarding the confidentiality of the underlying
   connection, as described in
   <xref target="confidentiality.of.credentials"/>.
</t>
               <iref primary="true" item="Grammar" subitem="credentials"/>
               <sourcecode type="abnf7230"><![CDATA[  credentials = auth-scheme [ 1*SP ( token68 / #auth-param ) ]
]]></sourcecode>
               <t>
   Upon receipt of a request for a protected resource that omits credentials,
   contains invalid credentials (e.g., a bad password) or partial credentials
   (e.g., when the authentication scheme requires more than one round trip),
   an origin server <bcp14>SHOULD</bcp14> send a <xref target="status.401" format="none">401 (Unauthorized)</xref> response
   that contains a <xref target="header.www-authenticate" format="none">WWW-Authenticate</xref> header field with at least
   one (possibly new) challenge applicable to the requested resource.
</t>
               <t>
   Likewise, upon receipt of a request that omits proxy credentials or
   contains invalid or partial proxy credentials, a proxy that requires
   authentication <bcp14>SHOULD</bcp14> generate a
   <xref target="status.407" format="none">407 (Proxy Authentication Required)</xref> response that contains
   a <xref target="header.proxy-authenticate" format="none">Proxy-Authenticate</xref> header field with at least one
   (possibly new) challenge applicable to the proxy.
</t>
               <t>
   A server that receives valid credentials that are not adequate to gain
   access ought to respond with the <xref target="status.403" format="none">403 (Forbidden)</xref> status
   code (<xref target="status.403"/>).
</t>
               <t>
   HTTP does not restrict applications to this simple challenge-response
   framework for access authentication. Additional mechanisms can be used,
   such as authentication at the transport level or via message encapsulation,
   and with additional header fields specifying authentication information.
   However, such additional mechanisms are not defined by this specification.
</t>
            </section>
            <section anchor="protection.space" title="Protection Space (Realm)">
               <iref item="Protection Space"/>
               <iref item="Realm"/>
               <iref item="Canonical Root URI"/>
               <t>
   The "realm" authentication parameter is reserved for use by
   authentication schemes that wish to indicate a scope of protection.
</t>
               <t>
   A protection space is defined by the canonical root URI (the
   scheme and authority components of the effective request URI; see
   <xref target="effective.request.uri"/>) of the
   server being accessed, in combination with the realm value if present.
   These realms allow the protected resources on a server to be
   partitioned into a set of protection spaces, each with its own
   authentication scheme and/or authorization database. The realm value
   is a string, generally assigned by the origin server, that can have
   additional semantics specific to the authentication scheme. Note that a
   response can have multiple challenges with the same auth-scheme but
   with different realms.
</t>
               <t>
   The protection space determines the domain over which credentials can
   be automatically applied. If a prior request has been authorized, the
   user agent <bcp14>MAY</bcp14> reuse the same credentials for all other requests within
   that protection space for a period of time determined by the authentication
   scheme, parameters, and/or user preferences (such as a configurable
   inactivity timeout). Unless specifically allowed by the authentication
   scheme, a single protection space cannot extend outside the scope of its
   server.
</t>
               <t>
   For historical reasons, a sender <bcp14>MUST</bcp14> only generate the quoted-string syntax.
   Recipients might have to support both token and quoted-string syntax for
   maximum interoperability with existing clients that have been accepting both
   notations for a long time.
</t>
            </section>
            <section anchor="header.authorization" title="Authorization">
               <iref primary="true" item="Authorization header field"/>
               <t>
   The "Authorization" header field allows a user agent to authenticate itself
   with an origin server — usually, but not necessarily, after receiving
   a <xref target="status.401" format="none">401 (Unauthorized)</xref> response. Its value consists of
   credentials containing the authentication information of the user agent for
   the realm of the resource being requested.
</t>
               <iref primary="true" item="Grammar" subitem="Authorization"/>
               <sourcecode type="abnf7230"><![CDATA[  Authorization = credentials
]]></sourcecode>
               <t>
   If a request is authenticated and a realm specified, the same credentials
   are presumed to be valid for all other requests within this realm (assuming
   that the authentication scheme itself does not require otherwise, such as
   credentials that vary according to a challenge value or using synchronized
   clocks).
</t>
               <t>
   A proxy forwarding a request <bcp14>MUST NOT</bcp14> modify any
   <xref target="header.authorization" format="none">Authorization</xref> fields in that request.
   See <xref target="Caching" section="3.2" relative="#caching.authenticated.responses"/> for details of and requirements
   pertaining to handling of the Authorization field by HTTP caches.
</t>
            </section>
            <section anchor="header.proxy-authorization" title="Proxy-Authorization">
               <iref primary="true" item="Proxy-Authorization header field"/>
               <t>
   The "Proxy-Authorization" header field allows the client to
   identify itself (or its user) to a proxy that requires
   authentication. Its value consists of credentials containing the
   authentication information of the client for the proxy and/or realm of the
   resource being requested.
</t>
               <iref primary="true" item="Grammar" subitem="Proxy-Authorization"/>
               <sourcecode type="abnf7230"><![CDATA[  Proxy-Authorization = credentials
]]></sourcecode>
               <t>
   Unlike <xref target="header.authorization" format="none">Authorization</xref>, the Proxy-Authorization header field
   applies only to the next inbound proxy that demanded authentication using
   the <xref target="header.proxy-authenticate" format="none">Proxy-Authenticate</xref> field. When multiple proxies are used
   in a chain, the Proxy-Authorization header field is consumed by the first
   inbound proxy that was expecting to receive credentials. A proxy <bcp14>MAY</bcp14>
   relay the credentials from the client request to the next proxy if that is
   the mechanism by which the proxies cooperatively authenticate a given
   request.
</t>
            </section>
            <section anchor="auth.scheme.extensibility" title="Authentication Scheme Extensibility">
               <t>
   Aside from the general framework, this document does not specify any
   authentication schemes. New and existing authentication schemes are
   specified independently and ought to be registered within the
   "Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry".
   For example, the "basic" and "digest" authentication schemes are defined by
   RFC 7617 and
   RFC 7616, respectively.
</t>
               <section anchor="auth.scheme.registry" title="Authentication Scheme Registry">
                  <t>
   The "Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry"
   defines the namespace for the authentication schemes in challenges and
   credentials. It is maintained
   at <eref target="https://www.iana.org/assignments/http-authschemes"/>.
</t>
                  <t>
  Registrations <bcp14>MUST</bcp14> include the following fields:
</t>
                  <ul>
                     <li>Authentication Scheme Name</li>
                     <li>Pointer to specification text</li>
                     <li>Notes (optional)</li>
                  </ul>
                  <t>
  Values to be added to this namespace require IETF Review
  (see <xref target="RFC8126" sectionFormat="comma" section="4.8"/>).
</t>
               </section>
               <section anchor="considerations.for.new.auth.schemes" title="Considerations for New Authentication Schemes">
                  <t>
  There are certain aspects of the HTTP Authentication framework that put
  constraints on how new authentication schemes can work:
</t>
                  <ul>
                     <li>
                        <t>
    HTTP authentication is presumed to be stateless: all of the information
    necessary to authenticate a request <bcp14>MUST</bcp14> be provided in the request,
    rather than be dependent on the server remembering prior requests.
    Authentication based on, or bound to, the underlying connection is
    outside the scope of this specification and inherently flawed unless
    steps are taken to ensure that the connection cannot be used by any
    party other than the authenticated user
    (see <xref target="intermediaries"/>).
  </t>
  
                     </li>
                     <li>
    
                        <t>
      The authentication parameter "realm" is reserved for defining protection
      spaces as described in <xref target="protection.space"/>. New schemes
      <bcp14>MUST NOT</bcp14> use it in a way incompatible with that definition.
    </t>
  
                     </li>
                     <li>
    
                        <t>
      The "token68" notation was introduced for compatibility with existing
      authentication schemes and can only be used once per challenge or credential.
      Thus, new schemes ought to use the auth-param syntax instead, because
      otherwise future extensions will be impossible.
    </t>
  
                     </li>
                     <li>
    
                        <t>
      The parsing of challenges and credentials is defined by this specification
      and cannot be modified by new authentication schemes. When the auth-param
      syntax is used, all parameters ought to support both token and
      quoted-string syntax, and syntactical constraints ought to be defined on
      the field value after parsing (i.e., quoted-string processing). This is
      necessary so that recipients can use a generic parser that applies to
      all authentication schemes.
    </t>
    
                        <t>
      
                           <strong>Note:</strong> The fact that the value syntax for the "realm" parameter
      is restricted to quoted-string was a bad design choice not to be repeated
      for new parameters.
    </t>
  
                     </li>
                     <li>
    
                        <t>
      Definitions of new schemes ought to define the treatment of unknown
      extension parameters. In general, a "must-ignore" rule is preferable
      to a "must-understand" rule, because otherwise it will be hard to introduce
      new parameters in the presence of legacy recipients. Furthermore,
      it's good to describe the policy for defining new parameters (such
      as "update the specification" or "use this registry").
    </t>
  
                     </li>
                     <li>
    
                        <t>
      Authentication schemes need to document whether they are usable in
      origin-server authentication (i.e., using <xref target="header.www-authenticate" format="none">WWW-Authenticate</xref>),
      and/or proxy authentication (i.e., using <xref target="header.proxy-authenticate" format="none">Proxy-Authenticate</xref>).
    </t>
  
                     </li>
                     <li>
    
                        <t>
      The credentials carried in an <xref target="header.authorization" format="none">Authorization</xref> header field are specific to
      the user agent and, therefore, have the same effect on HTTP caches as the
      "private" Cache-Control response directive (<xref target="Caching" section="5.2.2.6" relative="#cache-response-directive.private"/>),
      within the scope of the request in which they appear.
    </t>
    
                        <t>
      Therefore, new authentication schemes that choose not to carry
      credentials in the <xref target="header.authorization" format="none">Authorization</xref> header field (e.g., using a newly defined
      header field) will need to explicitly disallow caching, by mandating the use of
      Cache-Control response directives (e.g., "private").
    </t>
  
                     </li>
                     <li>
    
                        <t>
      Schemes using <xref target="header.authentication-info" format="none">Authentication-Info</xref>, <xref target="header.proxy-authentication-info" format="none">Proxy-Authentication-Info</xref>,
      or any other authentication related response header field need to
      consider and document the related security considerations (see 
      <xref target="security.auth.add.resp"/>). 
    </t>
  
                     </li>
                  </ul>
               </section>
            </section>
         </section>
         <section anchor="request.context" title="Request Context">
            <t>
   The following request header fields provide additional information about the
   request context, including information about the user, user agent, and
   resource behind the request.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>From</td>
                     <td>
                        <xref target="header.from"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Referer</td>
                     <td>
                        <xref target="header.referer"/>
                     </td>
                  </tr>
                  <tr>
                     <td>User-Agent</td>
                     <td>
                        <xref target="header.user-agent"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="header.from" title="From">
               <iref primary="true" item="From header field"/>
               <t>
   The "From" header field contains an Internet email address for a human
   user who controls the requesting user agent. The address ought to be
   machine-usable, as defined by "mailbox"
   in <xref target="RFC5322" section="3.4"/>:
</t>
               <iref primary="true" item="Grammar" subitem="From"/>
               <sourcecode type="abnf7230"><![CDATA[  From    = mailbox
  
  mailbox = <mailbox, see [RFC5322], Section 3.4>
]]></sourcecode>
               <t>
   An example is:
</t>
               <artwork type="example"><![CDATA[
  From: webmaster@example.org
]]></artwork>
               <t>
   The From header field is rarely sent by non-robotic user agents.
   A user agent <bcp14>SHOULD NOT</bcp14> send a From header field without explicit
   configuration by the user, since that might conflict with the user's
   privacy interests or their site's security policy.
</t>
               <t>
   A robotic user agent <bcp14>SHOULD</bcp14> send a valid From header field so that the
   person responsible for running the robot can be contacted if problems
   occur on servers, such as if the robot is sending excessive, unwanted,
   or invalid requests.
</t>
               <t>
   A server <bcp14>SHOULD NOT</bcp14> use the From header field for access control or
   authentication, since most recipients will assume that the field value is
   public information.
</t>
            </section>
            <section anchor="header.referer" title="Referer">
               <iref primary="true" item="Referer header field"/>
               <t>
   The "Referer" [sic] header field allows the user agent to specify a URI
   reference for the resource from which the <xref target="target.resource" format="none">target URI</xref> was
   obtained (i.e., the "referrer", though the field name is misspelled).
   A user agent <bcp14>MUST NOT</bcp14> include the fragment and userinfo components
   of the URI reference <xref target="RFC3986"/>, if any, when generating the
   Referer field value.
</t>
               <iref primary="true" item="Grammar" subitem="Referer"/>
               <sourcecode type="abnf7230"><![CDATA[  Referer = absolute-URI / partial-URI
]]></sourcecode>
               <t>
   The Referer header field allows servers to generate back-links to other
   resources for simple analytics, logging, optimized caching, etc. It also
   allows obsolete or mistyped links to be found for maintenance. Some servers
   use the Referer header field as a means of denying links from other sites
   (so-called "deep linking") or restricting cross-site request forgery (CSRF),
   but not all requests contain it.
</t>
               <t>
   Example:
</t>
               <artwork type="example"><![CDATA[
  Referer: http://www.example.org/hypertext/Overview.html
]]></artwork>
               <t>
   If the target URI was obtained from a source that does not have its own
   URI (e.g., input from the user keyboard, or an entry within the user's
   bookmarks/favorites), the user agent <bcp14>MUST</bcp14> either exclude the Referer field
   or send it with a value of "about:blank".
</t>
               <t>
   The Referer field has the potential to reveal information about the request
   context or browsing history of the user, which is a privacy concern if the
   referring resource's identifier reveals personal information (such as an
   account name) or a resource that is supposed to be confidential (such as
   behind a firewall or internal to a secured service). Most general-purpose
   user agents do not send the Referer header field when the referring
   resource is a local "file" or "data" URI. A user agent <bcp14>MUST NOT</bcp14> send a
   <xref target="header.referer" format="none">Referer</xref> header field in an unsecured HTTP request if the
   referring page was received with a secure protocol.
   See <xref target="sensitive.information.in.uris"/> for additional
   security considerations.
</t>
               <t>
   Some intermediaries have been known to indiscriminately remove Referer
   header fields from outgoing requests. This has the unfortunate side effect
   of interfering with protection against CSRF attacks, which can be far
   more harmful to their users. Intermediaries and user agent extensions that
   wish to limit information disclosure in Referer ought to restrict their
   changes to specific edits, such as replacing internal domain names with
   pseudonyms or truncating the query and/or path components.
   An intermediary <bcp14>SHOULD NOT</bcp14> modify or delete the Referer header field when
   the field value shares the same scheme and host as the request target.
</t>
            </section>
            <section anchor="header.user-agent" title="User-Agent">
               <iref primary="true" item="User-Agent header field"/>
               <t>
   The "User-Agent" header field contains information about the user agent
   originating the request, which is often used by servers to help identify
   the scope of reported interoperability problems, to work around or tailor
   responses to avoid particular user agent limitations, and for analytics
   regarding browser or operating system use. A user agent <bcp14>SHOULD</bcp14> send
   a User-Agent field in each request unless specifically configured not
   to do so.
</t>
               <iref primary="true" item="Grammar" subitem="User-Agent"/>
               <sourcecode type="abnf7230"><![CDATA[  User-Agent = product *( RWS ( product / comment ) )
]]></sourcecode>
               <t>
   The User-Agent field-value consists of one or more product identifiers,
   each followed by zero or more comments (<xref target="comments"/>), which together
   identify the user agent software and its significant subproducts.
   By convention, the product identifiers are listed in decreasing order of
   their significance for identifying the user agent software. Each product
   identifier consists of a name and optional version.
</t>
               <iref primary="true" item="Grammar" subitem="product"/>
               <iref primary="true" item="Grammar" subitem="product-version"/>
               <sourcecode type="abnf7230"><![CDATA[  product         = token ["/" product-version]
  product-version = token
]]></sourcecode>
               <t>
   A sender <bcp14>SHOULD</bcp14> limit generated product identifiers to what is necessary
   to identify the product; a sender <bcp14>MUST NOT</bcp14> generate advertising or other
   nonessential information within the product identifier.
   A sender <bcp14>SHOULD NOT</bcp14> generate information in <xref target="header.user-agent" format="none">product-version</xref>
   that is not a version identifier (i.e., successive versions of the same
   product name ought to differ only in the product-version portion of the
   product identifier).
</t>
               <t>
   Example:
</t>
               <artwork type="example"><![CDATA[
  User-Agent: CERN-LineMode/2.15 libwww/2.17b3
]]></artwork>
               <t>
   A user agent <bcp14>SHOULD NOT</bcp14> generate a User-Agent field containing needlessly
   fine-grained detail and <bcp14>SHOULD</bcp14> limit the addition of subproducts by third
   parties. Overly long and detailed User-Agent field values increase request
   latency and the risk of a user being identified against their wishes
   ("fingerprinting").
</t>
               <t>
   Likewise, implementations are encouraged not to use the product tokens of
   other implementations in order to declare compatibility with them, as this
   circumvents the purpose of the field. If a user agent masquerades as a
   different user agent, recipients can assume that the user intentionally
   desires to see responses tailored for that identified user agent, even
   if they might not work as well for the actual user agent being used.
</t>
            </section>
         </section>
      </section>
      <section anchor="status.codes" title="Response Status Codes">
         <t>
   The (response) status code is a three-digit integer code giving the result of the
   attempt to understand and satisfy the request.
</t>
         <t>
   HTTP status codes are extensible. HTTP clients are not required
   to understand the meaning of all registered status codes, though such
   understanding is obviously desirable. However, a client <bcp14>MUST</bcp14>
   understand the class of any status code, as indicated by the first
   digit, and treat an unrecognized status code as being equivalent to the
   x00 status code of that class, with the exception that
   a recipient <bcp14>MUST NOT</bcp14> cache a response with an unrecognized status code.
</t>
         <t>
   For example, if an unrecognized status code of 471 is received by a client,
   the client can assume that there was something wrong with its request and
   treat the response as if it had received a <xref target="status.400" format="none">400 (Bad Request)</xref> status code. The response
   message will usually contain a representation that explains the status.
</t>
         <t>
   The first digit of the status code defines the class of response. The
   last two digits do not have any categorization role. There are five
   values for the first digit:
</t>
         <ul>
            <li>
    
               <xref target="status.1xx" format="none">1xx (Informational)</xref>: The request was received, continuing
    process
   </li>
            <li>
    
               <xref target="status.2xx" format="none">2xx (Successful)</xref>: The request was successfully received,
    understood, and accepted
   </li>
            <li>
    
               <xref target="status.3xx" format="none">3xx (Redirection)</xref>: Further action needs to be taken in order to
    complete the request
   </li>
            <li>
    
               <xref target="status.4xx" format="none">4xx (Client Error)</xref>: The request contains bad syntax or cannot
    be fulfilled
   </li>
            <li>
    
               <xref target="status.5xx" format="none">5xx (Server Error)</xref>: The server failed to fulfill an apparently
    valid request
   </li>
         </ul>
         <section anchor="overview.of.status.codes" title="Overview of Status Codes">
            <t>  
   The status codes listed below are defined in this specification.
   The reason phrases listed here are only recommendations — they can be
   replaced by local equivalents without affecting the protocol.
</t>
            <t>
   Responses with status codes that are defined as heuristically cacheable
   (e.g., 200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501 in this
   specification) can be reused by a cache with heuristic expiration unless
   otherwise indicated by the method definition or explicit cache controls
   <xref target="Caching"/>; all other status codes are not heuristically cacheable.
</t><!--AUTOGENERATED FROM extract-status-code-defs.xslt, do not edit manually-->
            <table anchor="iana.status.code.registration.table">
               <thead>
                  <tr>
                     <th>Value</th>
                     <th>Description</th>
                     <th>Reference</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>100</td>
                     <td>Continue</td>
                     <td>
            
                        <xref target="status.100"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>101</td>
                     <td>Switching Protocols</td>
                     <td>
            
                        <xref target="status.101"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>200</td>
                     <td>OK</td>
                     <td>
            
                        <xref target="status.200"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>201</td>
                     <td>Created</td>
                     <td>
            
                        <xref target="status.201"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>202</td>
                     <td>Accepted</td>
                     <td>
            
                        <xref target="status.202"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>203</td>
                     <td>Non-Authoritative Information</td>
                     <td>
            
                        <xref target="status.203"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>204</td>
                     <td>No Content</td>
                     <td>
            
                        <xref target="status.204"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>205</td>
                     <td>Reset Content</td>
                     <td>
            
                        <xref target="status.205"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>206</td>
                     <td>Partial Content</td>
                     <td>
            
                        <xref target="status.206"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>300</td>
                     <td>Multiple Choices</td>
                     <td>
            
                        <xref target="status.300"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>301</td>
                     <td>Moved Permanently</td>
                     <td>
            
                        <xref target="status.301"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>302</td>
                     <td>Found</td>
                     <td>
            
                        <xref target="status.302"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>303</td>
                     <td>See Other</td>
                     <td>
            
                        <xref target="status.303"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>304</td>
                     <td>Not Modified</td>
                     <td>
            
                        <xref target="status.304"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>305</td>
                     <td>Use Proxy</td>
                     <td>
            
                        <xref target="status.305"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>306</td>
                     <td>(Unused)</td>
                     <td>
            
                        <xref target="status.306"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>307</td>
                     <td>Temporary Redirect</td>
                     <td>
            
                        <xref target="status.307"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>308</td>
                     <td>Permanent Redirect</td>
                     <td>
            
                        <xref target="status.308"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>400</td>
                     <td>Bad Request</td>
                     <td>
            
                        <xref target="status.400"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>401</td>
                     <td>Unauthorized</td>
                     <td>
            
                        <xref target="status.401"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>402</td>
                     <td>Payment Required</td>
                     <td>
            
                        <xref target="status.402"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>403</td>
                     <td>Forbidden</td>
                     <td>
            
                        <xref target="status.403"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>404</td>
                     <td>Not Found</td>
                     <td>
            
                        <xref target="status.404"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>405</td>
                     <td>Method Not Allowed</td>
                     <td>
            
                        <xref target="status.405"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>406</td>
                     <td>Not Acceptable</td>
                     <td>
            
                        <xref target="status.406"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>407</td>
                     <td>Proxy Authentication Required</td>
                     <td>
            
                        <xref target="status.407"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>408</td>
                     <td>Request Timeout</td>
                     <td>
            
                        <xref target="status.408"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>409</td>
                     <td>Conflict</td>
                     <td>
            
                        <xref target="status.409"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>410</td>
                     <td>Gone</td>
                     <td>
            
                        <xref target="status.410"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>411</td>
                     <td>Length Required</td>
                     <td>
            
                        <xref target="status.411"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>412</td>
                     <td>Precondition Failed</td>
                     <td>
            
                        <xref target="status.412"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>413</td>
                     <td>Payload Too Large</td>
                     <td>
            
                        <xref target="status.413"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>414</td>
                     <td>URI Too Long</td>
                     <td>
            
                        <xref target="status.414"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>415</td>
                     <td>Unsupported Media Type</td>
                     <td>
            
                        <xref target="status.415"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>416</td>
                     <td>Range Not Satisfiable</td>
                     <td>
            
                        <xref target="status.416"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>417</td>
                     <td>Expectation Failed</td>
                     <td>
            
                        <xref target="status.417"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>418</td>
                     <td>(Unused)</td>
                     <td>
            
                        <xref target="status.418"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>422</td>
                     <td>Unprocessable Payload</td>
                     <td>
            
                        <xref target="status.422"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>426</td>
                     <td>Upgrade Required</td>
                     <td>
            
                        <xref target="status.426"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>500</td>
                     <td>Internal Server Error</td>
                     <td>
            
                        <xref target="status.500"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>501</td>
                     <td>Not Implemented</td>
                     <td>
            
                        <xref target="status.501"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>502</td>
                     <td>Bad Gateway</td>
                     <td>
            
                        <xref target="status.502"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>503</td>
                     <td>Service Unavailable</td>
                     <td>
            
                        <xref target="status.503"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>504</td>
                     <td>Gateway Timeout</td>
                     <td>
            
                        <xref target="status.504"/>
         
                     </td>
                  </tr>
                  <tr>
                     <td>505</td>
                     <td>HTTP Version Not Supported</td>
                     <td>
            
                        <xref target="status.505"/>
         
                     </td>
                  </tr>
               </tbody>
            </table><!--(END)-->
            <t>
   Note that this list is not exhaustive — it does not include
   extension status codes defined in other specifications
   (<xref target="status.code.extensibility"/>).
</t>
         </section>
         <section anchor="status.1xx" title="Informational 1xx">
            <iref primary="true" item="1xx Informational (status code class)"/>
            <iref primary="true" item="Status Codes Classes" subitem="1xx Informational"/>
            <t>
   The 1xx (Informational) class of status code indicates an
   interim response for communicating connection status or request progress
   prior to completing the requested action and sending a final response.
   1xx responses are terminated by the first empty line after the
   status-line (the empty line signaling the end of the header section).
   Since HTTP/1.0 did not define any 1xx status codes, a server <bcp14>MUST NOT</bcp14> send
   a 1xx response to an HTTP/1.0 client.
</t>
            <t>
   A client <bcp14>MUST</bcp14> be able to parse one or more 1xx responses received
   prior to a final response, even if the client does not expect one.
   A user agent <bcp14>MAY</bcp14> ignore unexpected 1xx responses.
</t>
            <t>
   A proxy <bcp14>MUST</bcp14> forward 1xx responses unless the proxy itself
   requested the generation of the 1xx response. For example, if a
   proxy adds an "Expect: 100-continue" field when it forwards a request,
   then it need not forward the corresponding <xref target="status.100" format="none">100 (Continue)</xref>
   response(s).
</t>
            <section anchor="status.100" title="100 Continue">
               <iref primary="true" item="100 Continue (status code)"/>
               <t>
   The 100 (Continue) status code indicates that the initial
   part of a request has been received and has not yet been rejected by the
   server. The server intends to send a final response after the request has
   been fully received and acted upon.
</t>
               <t>
   When the request contains an <xref target="header.expect" format="none">Expect</xref> header field that
   includes a <xref target="header.expect" format="none">100-continue</xref> expectation, the 100 response
   indicates that the server wishes to receive the request payload body,
   as described in <xref target="header.expect"/>.  The client
   ought to continue sending the request and discard the 100 response.
</t>
               <t>
   If the request did not contain an <xref target="header.expect" format="none">Expect</xref> header field
   containing the <xref target="header.expect" format="none">100-continue</xref> expectation,
   the client can simply discard this interim response.
</t>
            </section>
            <section anchor="status.101" title="101 Switching Protocols">
               <iref primary="true" item="101 Switching Protocols (status code)"/>
               <t>
   The 101 (Switching Protocols) status code indicates that the
   server understands and is willing to comply with the client's request,
   via the Upgrade header field (<xref target="Messaging" section="9.9" relative="#header.upgrade"/>), for
   a change in the application protocol being used on this connection.
   The server <bcp14>MUST</bcp14> generate an Upgrade header field in the response that
   indicates which protocol(s) will be switched to immediately after the empty
   line that terminates the 101 response.
</t>
               <t>
   It is assumed that the server will only agree to switch protocols when
   it is advantageous to do so. For example, switching to a newer version of
   HTTP might be advantageous over older versions, and switching to a
   real-time, synchronous protocol might be advantageous when delivering
   resources that use such features.
</t>
            </section>
         </section>
         <section anchor="status.2xx" title="Successful 2xx">
            <iref primary="true" item="2xx Successful (status code class)"/>
            <iref primary="true" item="Status Codes Classes" subitem="2xx Successful"/>
            <t>
   The 2xx (Successful) class of status code indicates that
   the client's request was successfully received, understood, and accepted.
</t>
            <section anchor="status.200" title="200 OK">
               <iref primary="true" item="200 OK (status code)"/>
               <t>
   The 200 (OK) status code indicates that the request has
   succeeded. The payload sent in a 200 response depends on the request
   method. For the methods defined by this specification, the intended meaning
   of the payload can be summarized as:
</t>
               <dl>
                  <dt>GET</dt>
                  <dd>
    a representation of the <xref target="target.resource" format="none">target resource</xref>;
  </dd>
                  <dt>HEAD</dt>
                  <dd>
    the same representation as GET, but without the representation data;
  </dd>
                  <dt>POST</dt>
                  <dd>
    a representation of the status of, or results obtained from, the action;
  </dd>
                  <dt>PUT, DELETE</dt>
                  <dd>
    a representation of the status of the action;
  </dd>
                  <dt>OPTIONS</dt>
                  <dd>
    a representation of the communications options;
  </dd>
                  <dt>TRACE</dt>
                  <dd>
    a representation of the request message as received by the
    end server.
  </dd>
               </dl>
               <t>
   Aside from responses to CONNECT, a 200 response always has a payload,
   though an origin server <bcp14>MAY</bcp14> generate a payload body of zero length.
   If no payload is desired, an origin server ought to send
   204 (No Content) instead.
   For CONNECT, no payload is allowed because the successful result is a
   tunnel, which begins immediately after the 200 response header section.
</t>
               <t>
   A 200 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.201" title="201 Created">
               <iref primary="true" item="201 Created (status code)"/>
               <t>
   The 201 (Created) status code indicates that the request has
   been fulfilled and has resulted in one or more new resources being created.
   The primary resource created by the request is identified by either a
   <xref target="header.location" format="none">Location</xref> header field in the response or, if no
   <xref target="header.location" format="none">Location</xref> field is received, by the effective request URI.
</t>
               <t>
   The 201 response payload typically describes and links to the resource(s)
   created. See <xref target="response.validator"/> for a discussion of the
   meaning and purpose of validator header fields, such as
   <xref target="header.etag" format="none">ETag</xref> and <xref target="header.last-modified" format="none">Last-Modified</xref>, in a 201 response.
</t>
            </section>
            <section anchor="status.202" title="202 Accepted">
               <iref primary="true" item="202 Accepted (status code)"/>
               <t>
   The 202 (Accepted) status code indicates that the request
   has been accepted for processing, but the processing has not been
   completed. The request might or might not eventually be acted upon, as it
   might be disallowed when processing actually takes place. There is no
   facility in HTTP for re-sending a status code from an asynchronous
   operation.
</t>
               <t>
   The 202 response is intentionally noncommittal. Its purpose is to
   allow a server to accept a request for some other process (perhaps a
   batch-oriented process that is only run once per day) without
   requiring that the user agent's connection to the server persist
   until the process is completed. The representation sent with this
   response ought to describe the request's current status and point to
   (or embed) a status monitor that can provide the user with an estimate of
   when the request will be fulfilled.
</t>
            </section>
            <section anchor="status.203" title="203 Non-Authoritative Information">
               <iref primary="true" item="203 Non-Authoritative Information (status code)"/>
               <t>
   The 203 (Non-Authoritative Information) status code
   indicates that the request was successful but the enclosed payload has been
   modified from that of the origin server's <xref target="status.200" format="none">200 (OK)</xref> response
   by a transforming proxy (<xref target="message.transformations"/>). This status code allows the
   proxy to notify recipients when a transformation has been applied, since
   that knowledge might impact later decisions regarding the content. For
   example, future cache validation requests for the content might only be
   applicable along the same request path (through the same proxies).
</t>
               <t>
   The 203 response is similar to the Warning code of 214 Transformation
   Applied (<xref target="Caching" section="5.5" relative="#header.warning"/>), which has the advantage of being applicable
   to responses with any status code.
</t>
               <t>
   A 203 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.204" title="204 No Content">
               <iref primary="true" item="204 No Content (status code)"/>
               <t>
   The 204 (No Content) status code indicates that the server
   has successfully fulfilled the request and that there is no additional
   content to send in the response payload body. Metadata in the response
   header fields refer to the <xref target="target.resource" format="none">target resource</xref> and its
   <xref target="representations" format="none">selected representation</xref> after the requested action was applied.
</t>
               <t>
   For example, if a 204 status code is received in response to a PUT
   request and the response contains an <xref target="header.etag" format="none">ETag</xref> header field, then
   the PUT was successful and the ETag field-value contains the entity-tag for
   the new representation of that target resource.
</t>
               <t>
   The 204 response allows a server to indicate that the action has been
   successfully applied to the target resource, while implying that the
   user agent does not need to traverse away from its current "document view"
   (if any).  The server assumes that the user agent will provide some
   indication of the success to its user, in accord with its own interface,
   and apply any new or updated metadata in the response to its active
   representation.
</t>
               <t>
   For example, a 204 status code is commonly used with document editing
   interfaces corresponding to a "save" action, such that the document
   being saved remains available to the user for editing. It is also
   frequently used with interfaces that expect automated data transfers
   to be prevalent, such as within distributed version control systems.
</t>
               <t>
   A 204 response is terminated by the first empty line after the header
   fields because it cannot contain a message body.
</t>
               <t>
   A 204 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.205" title="205 Reset Content">
               <iref primary="true" item="205 Reset Content (status code)"/>
               <t>
   The 205 (Reset Content) status code indicates that the
   server has fulfilled the request and desires that the user agent reset the
   "document view", which caused the request to be sent, to its original state
   as received from the origin server.
</t>
               <t>   
   This response is intended to support a common data entry use case where
   the user receives content that supports data entry (a form, notepad,
   canvas, etc.), enters or manipulates data in that space, causes the entered
   data to be submitted in a request, and then the data entry mechanism is
   reset for the next entry so that the user can easily initiate another
   input action.
</t>
               <t>
   Since the 205 status code implies that no additional content will be
   provided, a server <bcp14>MUST NOT</bcp14> generate a payload in a 205 response.
   In other words, a server <bcp14>MUST</bcp14> do one of the following for a 205 response:
   a) indicate a zero-length body for the response by including a
   <xref target="header.content-length" format="none">Content-Length</xref> header field with a value of 0;
   b) indicate a zero-length payload for the response by including a
   Transfer-Encoding header field with a value of chunked and
   a message body consisting of a single chunk of zero-length; or,
   c) close the connection immediately after sending the blank line
   terminating the header section.
</t>
            </section>
            <section anchor="status.206" title="206 Partial Content">
               <iref primary="true" item="206 Partial Content (status code)"/>
               <t>
   The 206 (Partial Content) status code indicates that the
   server is successfully fulfilling a range request for the target resource
   by transferring one or more parts of the selected representation.
</t>
               <t>
   When a 206 response is generated, the server <bcp14>MUST</bcp14> generate the following
   header fields, in addition to those required in the subsections below, if the field would
   have been sent in a <xref target="status.200" format="none">200 (OK)</xref> response to the same request:
   <xref target="header.date" format="none">Date</xref>, Cache-Control, <xref target="header.etag" format="none">ETag</xref>,
   Expires, <xref target="header.content-location" format="none">Content-Location</xref>, and
   <xref target="header.vary" format="none">Vary</xref>.
</t>
               <t>
   If a 206 is generated in response to a request with an <xref target="header.if-range" format="none">If-Range</xref>
   header field, the sender <bcp14>SHOULD NOT</bcp14> generate other representation header
   fields beyond those required, because the client is understood to
   already have a prior response containing those header fields.
   Otherwise, the sender <bcp14>MUST</bcp14> generate all of the representation header
   fields that would have been sent in a <xref target="status.200" format="none">200 (OK)</xref> response
   to the same request.
</t>
               <t>
   A 206 response is heuristically cacheable; i.e., unless otherwise indicated by
   explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
               <section anchor="partial.single" title="Single Part">
                  <t>
   If a single part is being transferred, the server generating the 206
   response <bcp14>MUST</bcp14> generate a <xref target="header.content-range" format="none">Content-Range</xref> header field,
   describing what range of the selected representation is enclosed, and a
   payload consisting of the range. For example:
</t>
                  <artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 206 Partial Content
  Date: Wed, 15 Nov 1995 06:25:24 GMT
  Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT
  Content-Range: bytes 21010-47021/47022
  Content-Length: 26012
  Content-Type: image/gif
  
  ... 26012 bytes of partial image data ...
  ]]></artwork>
               </section>
               <section anchor="partial.multipart" title="Multiple Parts">
                  <t>
   If multiple parts are being transferred, the server generating the 206
   response <bcp14>MUST</bcp14> generate a "multipart/byteranges" payload, as defined
   in <xref target="multipart.byteranges"/>, and a
   <xref target="header.content-type" format="none">Content-Type</xref> header field containing the
   multipart/byteranges media type and its required boundary parameter.
   To avoid confusion with single-part responses, a server <bcp14>MUST NOT</bcp14> generate
   a <xref target="header.content-range" format="none">Content-Range</xref> header field in the HTTP header section of a
   multiple part response (this field will be sent in each part instead).
</t>
                  <t>
   Within the header area of each body part in the multipart payload, the
   server <bcp14>MUST</bcp14> generate a <xref target="header.content-range" format="none">Content-Range</xref> header field
   corresponding to the range being enclosed in that body part.
   If the selected representation would have had a <xref target="header.content-type" format="none">Content-Type</xref>
   header field in a <xref target="status.200" format="none">200 (OK)</xref> response, the server <bcp14>SHOULD</bcp14>
   generate that same <xref target="header.content-type" format="none">Content-Type</xref> field in the header area of
   each body part. For example:
</t>
                  <artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 206 Partial Content
  Date: Wed, 15 Nov 1995 06:25:24 GMT
  Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT
  Content-Length: 1741
  Content-Type: multipart/byteranges; boundary=THIS_STRING_SEPARATES
  
  --THIS_STRING_SEPARATES
  Content-Type: application/pdf
  Content-Range: bytes 500-999/8000
  
  ...the first range...
  --THIS_STRING_SEPARATES
  Content-Type: application/pdf
  Content-Range: bytes 7000-7999/8000
  
  ...the second range
  --THIS_STRING_SEPARATES--
  ]]></artwork>
                  <t>
   When multiple ranges are requested, a server <bcp14>MAY</bcp14> coalesce any of the
   ranges that overlap, or that are separated by a gap that is smaller than the
   overhead of sending multiple parts, regardless of the order in which the
   corresponding range-spec appeared in the received <xref target="header.range" format="none">Range</xref>
   header field. Since the typical overhead between parts of a
   multipart/byteranges payload is around 80 bytes, depending on the selected
   representation's media type and the chosen boundary parameter length, it
   can be less efficient to transfer many small disjoint parts than it is to
   transfer the entire selected representation.
</t>
                  <t>
   A server <bcp14>MUST NOT</bcp14> generate a multipart response to a request for a single
   range, since a client that does not request multiple parts might not
   support multipart responses. However, a server <bcp14>MAY</bcp14> generate a
   multipart/byteranges payload with only a single body part if multiple
   ranges were requested and only one range was found to be satisfiable or
   only one range remained after coalescing.
   A client that cannot process a multipart/byteranges response <bcp14>MUST NOT</bcp14> 
   generate a request that asks for multiple ranges.
</t>
                  <t>
   When a multipart response payload is generated, the server <bcp14>SHOULD</bcp14> send
   the parts in the same order that the corresponding range-spec appeared
   in the received <xref target="header.range" format="none">Range</xref> header field, excluding those ranges
   that were deemed unsatisfiable or that were coalesced into other ranges.
   A client that receives a multipart response <bcp14>MUST</bcp14> inspect the
   <xref target="header.content-range" format="none">Content-Range</xref> header field present in each body part in
   order to determine which range is contained in that body part; a client
   cannot rely on receiving the same ranges that it requested, nor the same
   order that it requested.
</t>
               </section>
               <section anchor="combining.byte.ranges" title="Combining Parts">
                  <t>
   A response might transfer only a subrange of a representation if the
   connection closed prematurely or if the request used one or more Range
   specifications.  After several such transfers, a client might have
   received several ranges of the same representation.  These ranges can only
   be safely combined if they all have in common the same strong validator
   (<xref target="weak.and.strong.validators"/>).
</t>
                  <t>
   A client that has received multiple partial responses to GET requests on a
   target resource <bcp14>MAY</bcp14> combine those responses into a larger continuous
   range if they share the same strong validator.
</t>
                  <t>
   If the most recent response is an incomplete <xref target="status.200" format="none">200 (OK)</xref>
   response, then the header fields of that response are used for any
   combined response and replace those of the matching stored responses.
</t>
                  <t>
   If the most recent response is a <xref target="status.206" format="none">206 (Partial Content)</xref>
   response and at least one of the matching stored responses is a
   <xref target="status.200" format="none">200 (OK)</xref>, then the combined response header fields consist
   of the most recent 200 response's header fields. If all of the matching
   stored responses are 206 responses, then the stored response with the most
   recent header fields is used as the source of header fields for the
   combined response, except that the client <bcp14>MUST</bcp14> use other header fields
   provided in the new response, aside from <xref target="header.content-range" format="none">Content-Range</xref>, to
   replace all instances of the corresponding header fields in the stored
   response.
</t>
                  <t>
   The combined response message body consists of the union of partial
   content ranges in the new response and each of the selected responses.
   If the union consists of the entire range of the representation, then the
   client <bcp14>MUST</bcp14> process the combined response as if it were a complete
   <xref target="status.200" format="none">200 (OK)</xref> response, including a <xref target="header.content-length" format="none">Content-Length</xref>
   header field that reflects the complete length.
   Otherwise, the client <bcp14>MUST</bcp14> process the set of continuous ranges as one of
   the following:
   an incomplete <xref target="status.200" format="none">200 (OK)</xref> response if the combined response is
   a prefix of the representation,
   a single <xref target="status.206" format="none">206 (Partial Content)</xref> response containing a
   multipart/byteranges body, or
   multiple <xref target="status.206" format="none">206 (Partial Content)</xref> responses, each with one
   continuous range that is indicated by a <xref target="header.content-range" format="none">Content-Range</xref> header
   field.
</t>
               </section>
            </section>
         </section>
         <section anchor="status.3xx" title="Redirection 3xx">
            <iref primary="true" item="3xx Redirection (status code class)"/>
            <iref primary="true" item="Status Codes Classes" subitem="3xx Redirection"/>
            <t>
   The 3xx (Redirection) class of status code indicates that
   further action needs to be taken by the user agent in order to fulfill the
   request. If a <xref target="header.location" format="none">Location</xref> header field
   (<xref target="header.location"/>) is provided, the user agent <bcp14>MAY</bcp14>
   automatically redirect its request to the URI referenced by the Location
   field value, even if the specific status code is not understood.
   Automatic redirection needs to be done with care for methods not known to be
   <xref target="safe.methods" format="none">safe</xref>, as defined in <xref target="safe.methods"/>, since
   the user might not wish to redirect an unsafe request.
</t>
            <t>
   There are several types of redirects:
</t>
            <ol>
               <li>
    
                  <t>
      Redirects that indicate the resource might be available at a
      different URI, as provided by the <xref target="header.location" format="none">Location</xref> field,
      as in the status codes <xref target="status.301" format="none">301 (Moved Permanently)</xref>,
      <xref target="status.302" format="none">302 (Found)</xref>, <xref target="status.307" format="none">307 (Temporary Redirect)</xref>, and
      <xref target="status.308" format="none">308 (Permanent Redirect)</xref>.
    </t>
  
               </li>
               <li>
    
                  <t>
      Redirection that offers a choice of matching resources, each capable
      of representing the original request target, as in the
      <xref target="status.300" format="none">300 (Multiple Choices)</xref> status code.
    </t>
  
               </li>
               <li>
    
                  <t>
      Redirection to a different resource, identified by the
      <xref target="header.location" format="none">Location</xref> field, that can represent an indirect
      response to the request, as in the <xref target="status.303" format="none">303 (See Other)</xref>
      status code.
    </t>
  
               </li>
               <li>
    
                  <t>
      Redirection to a previously cached result, as in the
      <xref target="status.304" format="none">304 (Not Modified)</xref> status code.
    </t>
  
               </li>
            </ol>
            <aside>
               <t>
    
                  <strong>Note:</strong> In HTTP/1.0, the status codes <xref target="status.301" format="none">301 (Moved Permanently)</xref>
    and <xref target="status.302" format="none">302 (Found)</xref> were defined for the first type of redirect
    (<xref target="RFC1945" sectionFormat="comma" section="9.3"/>). Early user agents split
    on whether the method applied to the redirect target would be the same as
    the original request or would be rewritten as GET. Although HTTP
    originally defined the former semantics for <xref target="status.301" format="none">301</xref> and
    <xref target="status.302" format="none">302</xref> (to match its original implementation at CERN), and
    defined <xref target="status.303" format="none">303 (See Other)</xref> to match the latter semantics,
    prevailing practice gradually converged on the latter semantics for
    <xref target="status.301" format="none">301</xref> and <xref target="status.302" format="none">302</xref> as well. The first revision of
    HTTP/1.1 added <xref target="status.307" format="none">307 (Temporary Redirect)</xref> to indicate the
    former semantics of <xref target="status.302" format="none">302</xref> without being impacted by divergent practice.
    For the same reason, <xref target="status.308" format="none">308 (Permanent Redirect)</xref> was later on
    added in <xref target="RFC7538"/> to match <xref target="status.301" format="none">301</xref>.
    Over 10 years later, most user agents still do method rewriting for
    <xref target="status.301" format="none">301</xref> and <xref target="status.302" format="none">302</xref>; therefore, <xref target="RFC7231"/>
    made that behavior conformant when the original request is POST.
  </t>
            </aside>
            <t>
   A client <bcp14>SHOULD</bcp14> detect and intervene in cyclical redirections (i.e.,
   "infinite" redirection loops).
</t>
            <aside>
               <t>
    
                  <strong>Note:</strong> An earlier version of this specification recommended a
    maximum of five redirections (<xref target="RFC2068" sectionFormat="comma" section="10.3"/>).
    Content developers need to be aware that some clients might
    implement such a fixed limitation.
  </t>
            </aside>
            <section anchor="status.300" title="300 Multiple Choices">
               <iref primary="true" item="300 Multiple Choices (status code)"/>
               <t>
   The 300 (Multiple Choices) status code indicates that the
   <xref target="target.resource" format="none">target resource</xref> has more than one representation, each with
   its own more specific identifier, and information about the alternatives is
   being provided so that the user (or user agent) can select a preferred
   representation by redirecting its request to one or more of those
   identifiers. In other words, the server desires that the user agent engage
   in reactive negotiation to select the most appropriate representation(s)
   for its needs (<xref target="content.negotiation"/>).
</t>
               <t>
   If the server has a preferred choice, the server <bcp14>SHOULD</bcp14> generate a
   <xref target="header.location" format="none">Location</xref> header field containing a preferred choice's URI
   reference. The user agent <bcp14>MAY</bcp14> use the Location field value for automatic
   redirection.
</t>
               <t>
   For request methods other than HEAD, the server <bcp14>SHOULD</bcp14> generate a payload
   in the 300 response containing a list of representation metadata and URI
   reference(s) from which the user or user agent can choose the one most
   preferred. The user agent <bcp14>MAY</bcp14> make a selection from that list
   automatically if it understands the provided media type. A specific format
   for automatic selection is not defined by this specification because HTTP
   tries to remain orthogonal to the definition of its payloads.
   In practice, the representation is provided in some easily parsed format
   believed to be acceptable to the user agent, as determined by shared design
   or content negotiation, or in some commonly accepted hypertext format.
</t>
               <t>
   A 300 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
               <aside>
                  <t>
   
                     <strong>Note:</strong> The original proposal for the 300 status code defined the URI header field as
   providing a list of alternative representations, such that it would be
   usable for 200, 300, and 406 responses and be transferred in responses to
   the HEAD method. However, lack of deployment and disagreement over syntax
   led to both URI and Alternates (a subsequent proposal) being dropped from
   this specification. It is possible to communicate the list using a set of
   Link header fields <xref target="RFC8288"/>, each with a relationship of
   "alternate", though deployment is a chicken-and-egg problem.
  </t>
               </aside>
            </section>
            <section anchor="status.301" title="301 Moved Permanently">
               <iref primary="true" item="301 Moved Permanently (status code)"/>
               <t>
   The 301 (Moved Permanently) status code indicates that the
   <xref target="target.resource" format="none">target resource</xref> has been assigned a new permanent URI and
   any future references to this resource ought to use one of the enclosed
   URIs. Clients with link-editing capabilities ought to automatically re-link
   references to the effective request URI to one or more of the new
   references sent by the server, where possible.
</t>
               <t>
   The server <bcp14>SHOULD</bcp14> generate a <xref target="header.location" format="none">Location</xref> header field in the
   response containing a preferred URI reference for the new permanent URI.
   The user agent <bcp14>MAY</bcp14> use the Location field value for automatic redirection.
   The server's response payload usually contains a short hypertext note with
   a hyperlink to the new URI(s).
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> For historical reasons, a user agent <bcp14>MAY</bcp14> change the
    request method from POST to GET for the subsequent request. If this
    behavior is undesired, the <xref target="status.308" format="none">308 (Permanent Redirect)</xref>
    status code can be used instead.
  </t>
               </aside>
               <t>
   A 301 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.302" title="302 Found">
               <iref primary="true" item="302 Found (status code)"/>
               <t>
   The 302 (Found) status code indicates that the target
   resource resides temporarily under a different URI. Since the redirection
   might be altered on occasion, the client ought to continue to use the
   effective request URI for future requests.
</t>
               <t>
   The server <bcp14>SHOULD</bcp14> generate a <xref target="header.location" format="none">Location</xref> header field in the
   response containing a URI reference for the different URI.
   The user agent <bcp14>MAY</bcp14> use the Location field value for automatic redirection.
   The server's response payload usually contains a short hypertext note with
   a hyperlink to the different URI(s).
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> For historical reasons, a user agent <bcp14>MAY</bcp14> change the
    request method from POST to GET for the subsequent request. If this
    behavior is undesired, the <xref target="status.307" format="none">307 (Temporary Redirect)</xref>
    status code can be used instead.
  </t>
               </aside>
            </section>
            <section anchor="status.303" title="303 See Other">
               <iref primary="true" item="303 See Other (status code)"/>
               <t>
   The 303 (See Other) status code indicates that the server is
   redirecting the user agent to a different resource, as indicated by a URI
   in the <xref target="header.location" format="none">Location</xref> header field, which is intended to provide
   an indirect response to the original request. A user agent can perform a
   retrieval request targeting that URI (a GET or HEAD request if using HTTP),
   which might also be redirected, and present the eventual result as an
   answer to the original request. Note that the new URI in the Location
   header field is not considered equivalent to the effective request URI.
</t>
               <t>
   This status code is applicable to any HTTP method.  It is
   primarily used to allow the output of a POST action to redirect
   the user agent to a selected resource, since doing so provides the
   information corresponding to the POST response in a form that
   can be separately identified, bookmarked, and cached, independent
   of the original request.
</t>
               <t>
   A 303 response to a GET request indicates that the origin server does not
   have a representation of the <xref target="target.resource" format="none">target resource</xref> that can be
   transferred by the server over HTTP. However, the
   <xref target="header.location" format="none">Location</xref> field value refers to a resource that is
   descriptive of the target resource, such that making a retrieval request
   on that other resource might result in a representation that is useful to
   recipients without implying that it represents the original target resource.
   Note that answers to the questions of what can be represented, what
   representations are adequate, and what might be a useful description are
   outside the scope of HTTP.
</t>
               <t>
   Except for responses to a HEAD request, the representation of a 303 
   response ought to contain a short hypertext note with a hyperlink to the
   same URI reference provided in the <xref target="header.location" format="none">Location</xref> header field.
</t>
            </section>
            <section anchor="status.304" title="304 Not Modified">
               <iref primary="true" item="304 Not Modified (status code)"/>
               <t>
   The 304 (Not Modified) status code indicates that a
   conditional GET or HEAD request has been
   received and would have resulted in a <xref target="status.200" format="none">200 (OK)</xref> response
   if it were not for the fact that the condition evaluated to false.
   In other words, there is no need for the server to transfer a
   representation of the target resource because the request indicates that
   the client, which made the request conditional, already has a valid
   representation; the server is therefore redirecting the client to make
   use of that stored representation as if it were the payload of a
   <xref target="status.200" format="none">200 (OK)</xref> response.
</t>
               <t>
   The server generating a 304 response <bcp14>MUST</bcp14> generate any of the following
   header fields that would have been sent in a <xref target="status.200" format="none">200 (OK)</xref>
   response to the same request:
   Cache-Control,
   <xref target="header.content-location" format="none">Content-Location</xref>,
   <xref target="header.date" format="none">Date</xref>,
   <xref target="header.etag" format="none">ETag</xref>,
   Expires, and
   <xref target="header.vary" format="none">Vary</xref>.
</t>
               <t>
   Since the goal of a 304 response is to minimize information transfer
   when the recipient already has one or more cached representations,
   a sender <bcp14>SHOULD NOT</bcp14> generate representation metadata other
   than the above listed fields unless said metadata exists for the
   purpose of guiding cache updates (e.g., <xref target="header.last-modified" format="none">Last-Modified</xref> might
   be useful if the response does not have an <xref target="header.etag" format="none">ETag</xref> field).
</t>
               <t>
   Requirements on a cache that receives a 304 response are defined in
   <xref target="Caching" section="4.3.4" relative="#freshening.responses"/>. If the conditional request originated with an
   outbound client, such as a user agent with its own cache sending a
   conditional GET to a shared proxy, then the proxy <bcp14>SHOULD</bcp14> forward the
   304 response to that client.
</t>
               <t>
   A 304 response cannot contain a message-body; it is always
   terminated by the first empty line after the header fields.
</t>
            </section>
            <section anchor="status.305" title="305 Use Proxy">
               <iref primary="true" item="305 Use Proxy (status code)"/>
               <t>
   The 305 (Use Proxy) status code was defined in a previous
   version of this specification and is now deprecated (<xref target="RFC7231" section="B"/>).
</t>
            </section>
            <section anchor="status.306" title="306 (Unused)">
               <iref primary="true" item="306 (Unused) (status code)"/>
               <t>
   The 306 status code was defined in a previous version of this
   specification, is no longer used, and the code is reserved.
</t>
            </section>
            <section anchor="status.307" title="307 Temporary Redirect">
               <iref primary="true" item="307 Temporary Redirect (status code)"/>
               <t>
   The 307 (Temporary Redirect) status code indicates that the
   <xref target="target.resource" format="none">target resource</xref> resides temporarily under a different URI
   and the user agent <bcp14>MUST NOT</bcp14> change the request method if it performs an
   automatic redirection to that URI.
   Since the redirection can change over time, the client ought to continue
   using the original effective request URI for future requests.
</t>
               <t>
   The server <bcp14>SHOULD</bcp14> generate a <xref target="header.location" format="none">Location</xref> header field in the
   response containing a URI reference for the different URI.
   The user agent <bcp14>MAY</bcp14> use the Location field value for automatic redirection.
   The server's response payload usually contains a short hypertext note with
   a hyperlink to the different URI(s).
</t>
            </section>
            <section anchor="status.308" title="308 Permanent Redirect">
               <iref primary="true" item="308 Permanent Redirect (status code)"/>
               <t>
   The 308 (Permanent Redirect) status code indicates that the
   <xref target="target.resource" format="none">target resource</xref> has been assigned a new permanent URI and
   any future references to this resource ought to use one of the enclosed
   URIs. Clients with link editing capabilities ought to automatically re-link
   references to the effective request URI
   to one or more of the new references sent by the server, where possible.
</t>
               <t>
   The server <bcp14>SHOULD</bcp14> generate a <xref target="header.location" format="none">Location</xref> header field in the
   response containing a preferred URI reference for the new permanent URI.
   The user agent <bcp14>MAY</bcp14> use the Location field value for automatic redirection.
   The server's response payload usually contains a short hypertext note with
   a hyperlink to the new URI(s).
</t>
               <t>
   A 308 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> This status code is much younger (June 2014) than its sibling codes, and thus
    might not be recognized everywhere. See <xref target="RFC7538" section="4"/>
    for deployment considerations.
  </t>
               </aside>
            </section>
         </section>
         <section anchor="status.4xx" title="Client Error 4xx">
            <iref primary="true" item="4xx Client Error (status code class)"/>
            <iref primary="true" item="Status Codes Classes" subitem="4xx Client Error"/>
            <t>
   The 4xx (Client Error) class of status code indicates that
   the client seems to have erred. Except when responding to a HEAD request,
   the server <bcp14>SHOULD</bcp14> send a representation containing an explanation of
   the error situation, and whether it is a temporary or permanent condition.
   These status codes are applicable to any request method. User agents
   <bcp14>SHOULD</bcp14> display any included representation to the user.
</t>
            <section anchor="status.400" title="400 Bad Request">
               <iref primary="true" item="400 Bad Request (status code)"/>
               <t>
   The 400 (Bad Request) status code indicates that the server
   cannot or will not process the request due to something that is perceived
   to be a client error (e.g., malformed request syntax, invalid request
   message framing, or deceptive request routing).
</t>
            </section>
            <section anchor="status.401" title="401 Unauthorized">
               <iref primary="true" item="401 Unauthorized (status code)"/>
               <t>
   The 401 (Unauthorized) status code indicates that the
   request has not been applied because it lacks valid authentication
   credentials for the target resource.
   The server generating a 401 response <bcp14>MUST</bcp14> send a
   <xref target="header.www-authenticate" format="none">WWW-Authenticate</xref> header field
   (<xref target="header.www-authenticate"/>)
   containing at least one challenge applicable to the target resource.
</t>
               <t>
   If the request included authentication credentials, then the 401 response
   indicates that authorization has been refused for those credentials.
   The user agent <bcp14>MAY</bcp14> repeat the request with a new or replaced
   <xref target="header.authorization" format="none">Authorization</xref> header field (<xref target="header.authorization"/>).
   If the 401 response contains the same challenge as the prior response, and
   the user agent has already attempted authentication at least once, then the
   user agent <bcp14>SHOULD</bcp14> present the enclosed representation to the user, since
   it usually contains relevant diagnostic information.
</t>
            </section>
            <section anchor="status.402" title="402 Payment Required">
               <iref primary="true" item="402 Payment Required (status code)"/>
               <t>
   The 402 (Payment Required) status code is reserved for
   future use.
</t>
            </section>
            <section anchor="status.403" title="403 Forbidden">
               <iref primary="true" item="403 Forbidden (status code)"/>
               <t>
   The 403 (Forbidden) status code indicates that the
   server understood the request but refuses to fulfill it.
   A server that wishes to make public why the request has been forbidden
   can describe that reason in the response payload (if any).
</t>
               <t>
   If authentication credentials were provided in the request, the
   server considers them insufficient to grant access.
   The client <bcp14>SHOULD NOT</bcp14> automatically repeat the request with the same
   credentials.
   The client <bcp14>MAY</bcp14> repeat the request with new or different credentials.
   However, a request might be forbidden for reasons unrelated to the
   credentials.
</t>
               <t>
   An origin server that wishes to "hide" the current existence of a forbidden
   <xref target="target.resource" format="none">target resource</xref> 
                  <bcp14>MAY</bcp14> instead respond with a status
   code of <xref target="status.404" format="none">404 (Not Found)</xref>.
</t>
            </section>
            <section anchor="status.404" title="404 Not Found">
               <iref primary="true" item="404 Not Found (status code)"/>
               <t>
   The 404 (Not Found) status code indicates that the origin
   server did not find a current representation for the
   <xref target="target.resource" format="none">target resource</xref> or is not willing to disclose that one
   exists. A 404 status code does not indicate whether this lack of representation
   is temporary or permanent; the <xref target="status.410" format="none">410 (Gone)</xref> status code is
   preferred over 404 if the origin server knows, presumably through some
   configurable means, that the condition is likely to be permanent.
</t>
               <t>
   A 404 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.405" title="405 Method Not Allowed">
               <iref primary="true" item="405 Method Not Allowed (status code)"/>
               <t>
   The 405 (Method Not Allowed) status code indicates that the
   method received in the request-line is known by the origin server but
   not supported by the <xref target="target.resource" format="none">target resource</xref>.
   The origin server <bcp14>MUST</bcp14> generate an <xref target="header.allow" format="none">Allow</xref> header field in
   a 405 response containing a list of the target resource's currently
   supported methods.
</t>
               <t>
   A 405 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.406" title="406 Not Acceptable">
               <iref primary="true" item="406 Not Acceptable (status code)"/>
               <t>
   The 406 (Not Acceptable) status code indicates that the
   <xref target="target.resource" format="none">target resource</xref> does not have a current representation that
   would be acceptable to the user agent, according to the
   <xref target="proactive.negotiation" format="none">proactive negotiation</xref> header fields received in the request
   (<xref target="request.conneg"/>), and the server is unwilling to supply a
   default representation.
</t>
               <t>
   The server <bcp14>SHOULD</bcp14> generate a payload containing a list of available
   representation characteristics and corresponding resource identifiers from
   which the user or user agent can choose the one most appropriate.
   A user agent <bcp14>MAY</bcp14> automatically select the most appropriate choice from
   that list. However, this specification does not define any standard for
   such automatic selection, as described in <xref target="status.300"/>.
</t>
            </section>
            <section anchor="status.407" title="407 Proxy Authentication Required">
               <iref primary="true" item="407 Proxy Authentication Required (status code)"/>
               <t>
   The 407 (Proxy Authentication Required) status code is
   similar to <xref target="status.401" format="none">401 (Unauthorized)</xref>, but it indicates that the client
   needs to authenticate itself in order to use a proxy.
   The proxy <bcp14>MUST</bcp14> send a <xref target="header.proxy-authenticate" format="none">Proxy-Authenticate</xref> header field
   (<xref target="header.proxy-authenticate"/>) containing a challenge
   applicable to that proxy for the target resource. The client <bcp14>MAY</bcp14> repeat
   the request with a new or replaced <xref target="header.proxy-authorization" format="none">Proxy-Authorization</xref>
   header field (<xref target="header.proxy-authorization"/>).
</t>
            </section>
            <section anchor="status.408" title="408 Request Timeout">
               <iref primary="true" item="408 Request Timeout (status code)"/>
               <t>
   The 408 (Request Timeout) status code indicates
   that the server did not receive a complete request message within the time
   that it was prepared to wait.
   A server <bcp14>SHOULD</bcp14> send the "close" connection option
   (<xref target="Messaging" section="9.1" relative="#header.connection"/>) in the response, since 408 implies that the server
   has decided to close the connection rather than continue waiting.
   If the client has an outstanding request in transit,
   the client <bcp14>MAY</bcp14> repeat that request on a new connection.
</t>
            </section>
            <section anchor="status.409" title="409 Conflict">
               <iref primary="true" item="409 Conflict (status code)"/>
               <t>
   The 409 (Conflict) status code indicates that the request
   could not be completed due to a conflict with the current state of the target
   resource. This code is used in situations where the user might be able to
   resolve the conflict and resubmit the request. The server <bcp14>SHOULD</bcp14> generate
   a payload that includes enough information for a user to recognize the
   source of the conflict.
</t>
               <t>
   Conflicts are most likely to occur in response to a PUT request. For
   example, if versioning were being used and the representation being PUT
   included changes to a resource that conflict with those made by an
   earlier (third-party) request, the origin server might use a 409 response
   to indicate that it can't complete the request. In this case, the response
   representation would likely contain information useful for merging the
   differences based on the revision history.
</t>
            </section>
            <section anchor="status.410" title="410 Gone">
               <iref primary="true" item="410 Gone (status code)"/>
               <t>
   The 410 (Gone) status code indicates that access to the
   <xref target="target.resource" format="none">target resource</xref> is no longer available at the origin
   server and that this condition is likely to be permanent. If the origin
   server does not know, or has no facility to determine, whether or not the
   condition is permanent, the status code <xref target="status.404" format="none">404 (Not Found)</xref>
   ought to be used instead.
</t>
               <t>
   The 410 response is primarily intended to assist the task of web
   maintenance by notifying the recipient that the resource is
   intentionally unavailable and that the server owners desire that
   remote links to that resource be removed. Such an event is common for
   limited-time, promotional services and for resources belonging to
   individuals no longer associated with the origin server's site. It is not
   necessary to mark all permanently unavailable resources as "gone" or
   to keep the mark for any length of time — that is left to the
   discretion of the server owner.
</t>
               <t>
   A 410 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.411" title="411 Length Required">
               <iref primary="true" item="411 Length Required (status code)"/>
               <t>
   The 411 (Length Required) status code indicates that the
   server refuses to accept the request without a defined
   <xref target="header.content-length" format="none">Content-Length</xref> (<xref target="header.content-length"/>).
   The client <bcp14>MAY</bcp14> repeat the request if it adds a valid Content-Length
   header field containing the length of the message body in the request
   message.
</t>
            </section>
            <section anchor="status.412" title="412 Precondition Failed">
               <iref primary="true" item="412 Precondition Failed (status code)"/>
               <t>
   The 412 (Precondition Failed) status code indicates that one
   or more conditions given in the request header fields evaluated to false
   when tested on the server. This response status code allows the client to place
   preconditions on the current resource state (its current representations
   and metadata) and, thus, prevent the request method from being applied if the
   target resource is in an unexpected state.
</t>
            </section>
            <section anchor="status.413" title="413 Payload Too Large">
               <iref primary="true" item="413 Payload Too Large (status code)"/>
               <t>
   The 413 (Payload Too Large) status code indicates
   that the server is refusing to process a request because the request
   payload is larger than the server is willing or able to process.
   The server <bcp14>MAY</bcp14> close the connection to prevent the client from continuing
   the request.
</t>
               <t>
   If the condition is temporary, the server <bcp14>SHOULD</bcp14> generate a
   <xref target="header.retry-after" format="none">Retry-After</xref> header field to indicate that it is temporary
   and after what time the client <bcp14>MAY</bcp14> try again.
</t>
            </section>
            <section anchor="status.414" title="414 URI Too Long">
               <iref primary="true" item="414 URI Too Long (status code)"/>
               <t>
   The 414 (URI Too Long) status code indicates that the server
   is refusing to service the request because the
   request-target (<xref target="Messaging" section="3.2" relative="#request.target"/>) is longer than the server is willing to
   interpret. This rare condition is only likely to occur when a client has
   improperly converted a POST request to a GET request with long query
   information, when the client has descended into a "black hole" of
   redirection (e.g., a redirected URI prefix that points to a suffix of
   itself) or when the server is under attack by a client attempting to
   exploit potential security holes.
</t>
               <t>
   A 414 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.415" title="415 Unsupported Media Type">
               <iref primary="true" item="415 Unsupported Media Type (status code)"/>
               <t>
   The 415 (Unsupported Media Type) status code indicates that
   the origin server is refusing to service the request because the payload is
   in a format not supported by this method on the <xref target="target.resource" format="none">target resource</xref>.
   The format problem might be due to the request's indicated
   <xref target="header.content-type" format="none">Content-Type</xref> or <xref target="header.content-encoding" format="none">Content-Encoding</xref>, or as a
   result of inspecting the data directly.
</t>
            </section>
            <section anchor="status.416" title="416 Range Not Satisfiable">
               <iref primary="true" item="416 Range Not Satisfiable (status code)"/>
               <t>
   The 416 (Range Not Satisfiable) status code indicates that
   none of the ranges in the request's <xref target="header.range" format="none">Range</xref> header field
   (<xref target="header.range"/>) overlap the current extent of the selected
   representation or that the set of ranges requested has been rejected due to
   invalid ranges or an excessive request of small or overlapping ranges.
</t>
               <t>
   For byte ranges, failing to overlap the current extent means that the
   <xref target="rule.int-range" format="none">first-pos</xref> of all of the <xref target="rule.ranges-specifier" format="none">range-spec</xref>
   values were greater than or equal to the current length of the selected representation.
   When this status code is generated in response to a byte-range request, the
   sender <bcp14>SHOULD</bcp14> generate a <xref target="header.content-range" format="none">Content-Range</xref> header field
   specifying the current length of the selected representation
   (<xref target="header.content-range"/>).
</t>
               <t>
   For example:
</t>
               <artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 416 Range Not Satisfiable
  Date: Fri, 20 Jan 2012 15:41:54 GMT
  Content-Range: bytes */47022
  ]]></artwork>
               <aside>
                  <t>
    
                     <strong>Note:</strong> Because servers are free to ignore <xref target="header.range" format="none">Range</xref>, many
    implementations will simply respond with the entire selected representation
    in a <xref target="status.200" format="none">200 (OK)</xref> response. That is partly because
    most clients are prepared to receive a <xref target="status.200" format="none">200 (OK)</xref> to
    complete the task (albeit less efficiently) and partly because clients
    might not stop making an invalid partial request until they have received
    a complete representation. Thus, clients cannot depend on receiving a
    <xref target="status.416" format="none">416 (Range Not Satisfiable)</xref> response even when it is most
    appropriate.
  </t>
               </aside>
            </section>
            <section anchor="status.417" title="417 Expectation Failed">
               <iref primary="true" item="417 Expectation Failed (status code)"/>
               <t>
   The 417 (Expectation Failed) status code indicates that the
   expectation given in the request's <xref target="header.expect" format="none">Expect</xref> header field
   (<xref target="header.expect"/>) could not be met by at least one of the
   inbound servers.
</t>
            </section>
            <section anchor="status.418" title="418 (Unused)">
               <iref primary="true" item="418 (Unused) (status code)"/>
               <t>
   
                  <xref target="RFC2324"/> was an April 1 RFC that lampooned the various
   ways HTTP was abused; one such abuse was the definition of an
   application-specific 418 status code. In the intervening years, this
   status code has been widely implemented as an "Easter Egg", and therefore
   is effectively consumed by this use.
</t>
               <t>
   Therefore, the 418 status code is reserved in the IANA HTTP Status Code
   registry. This indicates that the status code cannot be assigned to other
   applications currently. If future circumstances require its use (e.g.,
   exhaustion of 4NN status codes), it can be re-assigned to another use.
</t>
            </section>
            <section anchor="status.422" title="422 Unprocessable Payload">
               <iref primary="true" item="422 Unprocessable Payload (status code)"/>
               <t>
   The 422 (Unprocessable Payload) status code indicates that the server
   understands the content type of the request payload (hence a
   <xref target="status.415" format="none">415 (Unsupported Media Type)</xref> status code is inappropriate),
   and the syntax of the request payload is correct, but was unable to process
   the contained instructions. For example, this status code can be sent if
   an XML request payload contains well-formed (i.e., syntactically correct), but
   semantically erroneous XML instructions.
</t>
            </section>
            <section anchor="status.426" title="426 Upgrade Required">
               <iref primary="true" item="426 Upgrade Required (status code)"/>
               <t>
   The 426 (Upgrade Required) status code indicates that the
   server refuses to perform the request using the current protocol but might
   be willing to do so after the client upgrades to a different protocol.
   The server <bcp14>MUST</bcp14> send an Upgrade header field in a 426
   response to indicate the required protocol(s) (<xref target="Messaging" section="9.9" relative="#header.upgrade"/>).
</t>
               <t>
   Example:
</t>
               <artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 426 Upgrade Required
  Upgrade: HTTP/3.0
  Connection: Upgrade
  Content-Length: 53
  Content-Type: text/plain
  
  This service requires use of the HTTP/3.0 protocol.
  ]]></artwork>
            </section>
         </section>
         <section anchor="status.5xx" title="Server Error 5xx">
            <iref primary="true" item="5xx Server Error (status code class)"/>
            <iref primary="true" item="Status Codes Classes" subitem="5xx Server Error"/>
            <t>
   The 5xx (Server Error) class of status code indicates that
   the server is aware that it has erred or is incapable of performing the
   requested method.
   Except when responding to a HEAD request, the server <bcp14>SHOULD</bcp14> send a
   representation containing an explanation of the error situation, and
   whether it is a temporary or permanent condition.
   A user agent <bcp14>SHOULD</bcp14> display any included representation to the user.
   These response codes are applicable to any request method.
</t>
            <section anchor="status.500" title="500 Internal Server Error">
               <iref primary="true" item="500 Internal Server Error (status code)"/>
               <t>
   The 500 (Internal Server Error) status code indicates that
   the server encountered an unexpected condition that prevented it from
   fulfilling the request.
</t>
            </section>
            <section anchor="status.501" title="501 Not Implemented">
               <iref primary="true" item="501 Not Implemented (status code)"/>
               <t>
   The 501 (Not Implemented) status code indicates that the
   server does not support the functionality required to fulfill the request.
   This is the appropriate response when the server does not recognize the
   request method and is not capable of supporting it for any resource.
</t>
               <t>
   A 501 response is heuristically cacheable; i.e., unless otherwise indicated by
   the method definition or explicit cache controls (see <xref target="Caching" section="4.2.2" relative="#heuristic.freshness"/>).
</t>
            </section>
            <section anchor="status.502" title="502 Bad Gateway">
               <iref primary="true" item="502 Bad Gateway (status code)"/>
               <t>
   The 502 (Bad Gateway) status code indicates that the server,
   while acting as a gateway or proxy, received an invalid response from an
   inbound server it accessed while attempting to fulfill the request.
</t>
            </section>
            <section anchor="status.503" title="503 Service Unavailable">
               <iref primary="true" item="503 Service Unavailable (status code)"/>
               <t>
   The 503 (Service Unavailable) status code indicates that the
   server is currently unable to handle the request due to a temporary overload
   or scheduled maintenance, which will likely be alleviated after some delay.
   The server <bcp14>MAY</bcp14> send a <xref target="header.retry-after" format="none">Retry-After</xref> header field
   (<xref target="header.retry-after"/>) to suggest an appropriate
   amount of time for the client to wait before retrying the request.
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> The existence of the 503 status code does not imply that a
    server has to use it when becoming overloaded. Some servers might
    simply refuse the connection.
  </t>
               </aside>
            </section>
            <section anchor="status.504" title="504 Gateway Timeout">
               <iref primary="true" item="504 Gateway Timeout (status code)"/>
               <t>
   The 504 (Gateway Timeout) status code indicates that the
   server, while acting as a gateway or proxy, did not receive a timely
   response from an upstream server it needed to access in order to
   complete the request.
</t>
            </section>
            <section anchor="status.505" title="505 HTTP Version Not Supported">
               <iref primary="true" item="505 HTTP Version Not Supported (status code)"/>
               <t>
   The 505 (HTTP Version Not Supported) status code indicates
   that the server does not support, or refuses to support, the major version
   of HTTP that was used in the request message. The server is indicating that
   it is unable or unwilling to complete the request using the same major
   version as the client, as described in <xref target="protocol.version"/>, other than with this
   error message. The server <bcp14>SHOULD</bcp14> generate a representation for the 505
   response that describes why that version is not supported and what other
   protocols are supported by that server.
</t>
            </section>
         </section>
         <section anchor="status.code.extensibility" title="Status Code Extensibility">
            <t>
   Additional status codes, outside the scope of this specification, have been
   specified for use in HTTP. All such status codes ought to be registered
   within the "Hypertext Transfer Protocol (HTTP) Status Code Registry".
</t>
            <section anchor="status.code.registry" title="Status Code Registry">
               <t>
   The "Hypertext Transfer Protocol (HTTP) Status Code Registry", maintained
   by IANA at <eref target="https://www.iana.org/assignments/http-status-codes"/>,
   registers status code numbers.
</t>
               <t>
   A registration <bcp14>MUST</bcp14> include the following fields:
</t>
               <ul>
                  <li>Status Code (3 digits)</li>
                  <li>Short Description</li>
                  <li>Pointer to specification text</li>
               </ul>
               <t>
   Values to be added to the HTTP status code namespace require IETF Review
   (see <xref target="RFC8126" sectionFormat="comma" section="4.8"/>).
</t>
            </section>
            <section anchor="considerations.for.new.status.codes" title="Considerations for New Status Codes">
               <t>
   When it is necessary to express semantics for a response that are not
   defined by current status codes, a new status code can be registered.
   Status codes are generic; they are potentially applicable to any resource,
   not just one particular media type, kind of resource, or application of
   HTTP. As such, it is preferred that new status codes be registered in a
   document that isn't specific to a single application.
</t>
               <t>
   New status codes are required to fall under one of the categories
   defined in <xref target="status.codes"/>. To allow existing parsers to
   process the response message, new status codes cannot disallow a payload,
   although they can mandate a zero-length payload body.
</t>
               <t>
   Proposals for new status codes that are not yet widely deployed ought to
   avoid allocating a specific number for the code until there is clear
   consensus that it will be registered; instead, early drafts can use a
   notation such as "4NN", or "3N0" .. "3N9", to indicate the class
   of the proposed status code(s) without consuming a number prematurely.
</t>
               <t>
   The definition of a new status code ought to explain the request
   conditions that would cause a response containing that status code (e.g.,
   combinations of request header fields and/or method(s)) along with any 
   dependencies on response header fields (e.g., what fields are required,
   what fields can modify the semantics, and what header field semantics are
   further refined when used with the new status code).
</t>
               <t>
   The definition of a new status code ought to specify whether or not it is
   cacheable. Note that all status codes can be cached if the response they
   occur in has explicit freshness information; however, status codes that are
   defined as being cacheable are allowed to be cached without explicit
   freshness information. Likewise, the definition of a status code can place
   constraints upon cache behavior. See <xref target="Caching"/> for more information.
</t>
               <t>   
   Finally, the definition of a new status code ought to indicate whether the
   payload has any implied association with an identified resource (<xref target="identifying.payload"/>).
</t>
            </section>
         </section>
      </section>
      <section anchor="response.header.fields" title="Response Header Fields">
         <t>
   The response header fields allow the server to pass additional
   information about the response beyond what is placed in the status-line.
   These header fields give information about the server, about
   further access to the <xref target="target.resource" format="none">target resource</xref>, or about related
   resources.
</t>
         <t>
   Although each response header field has a defined meaning, in general,
   the precise semantics might be further refined by the semantics of the
   request method and/or response status code. 
</t>
         <section anchor="response.control.data" title="Control Data">
            <t>
   Response header fields can supply control data that supplements the
   status code, directs caching, or instructs the client where to go next.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Age</td>
                     <td>
                        <xref target="Caching" section="5.1" relative="#header.age"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Cache-Control</td>
                     <td>
                        <xref target="Caching" section="5.2" relative="#header.cache-control"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Expires</td>
                     <td>
                        <xref target="Caching" section="5.3" relative="#header.expires"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Date</td>
                     <td>
                        <xref target="header.date"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Location</td>
                     <td>
                        <xref target="header.location"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Retry-After</td>
                     <td>
                        <xref target="header.retry-after"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Vary</td>
                     <td>
                        <xref target="header.vary"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Warning</td>
                     <td>
                        <xref target="Caching" section="5.5" relative="#header.warning"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="origination.date" title="Origination Date">
               <section anchor="http.date" title="Date/Time Formats">
                  <t>
   Prior to 1995, there were three different formats commonly used by servers
   to communicate timestamps.  For compatibility with old implementations, all
   three are defined here. The preferred format is a fixed-length and
   single-zone subset of the date and time specification used by the
   Internet Message Format <xref target="RFC5322"/>.
</t>
                  <iref primary="true" item="Grammar" subitem="HTTP-date"/>
                  <sourcecode type="abnf7230"><![CDATA[  HTTP-date    = IMF-fixdate / obs-date
]]></sourcecode>
                  <t>
   An example of the preferred format is
</t>
                  <artwork type="example"><![CDATA[
  Sun, 06 Nov 1994 08:49:37 GMT    ; IMF-fixdate
  ]]></artwork>
                  <t>
   Examples of the two obsolete formats are
</t>
                  <artwork type="example"><![CDATA[
  Sunday, 06-Nov-94 08:49:37 GMT   ; obsolete RFC 850 format
  Sun Nov  6 08:49:37 1994         ; ANSI C's asctime() format
  ]]></artwork>
                  <t>
   A recipient that parses a timestamp value in an HTTP header field <bcp14>MUST</bcp14>
   accept all three HTTP-date formats. When a sender generates a header field
   that contains one or more timestamps defined as HTTP-date,
   the sender <bcp14>MUST</bcp14> generate those timestamps in the IMF-fixdate format.
</t>
                  <t>
   An HTTP-date value represents time as an instance of Coordinated Universal
   Time (UTC). The first two formats indicate UTC by the three-letter
   abbreviation for Greenwich Mean Time, "GMT", a predecessor of the UTC name;
   values in the asctime format are assumed to be in UTC.
   A sender that generates HTTP-date values from a local clock ought to use
   NTP (<xref target="RFC5905"/>) or some similar protocol to synchronize its
   clock to UTC.
</t>
                  <t anchor="preferred.date.format">
  
  
  
  
  
  
  
  
  
  
  Preferred format:
</t>
                  <iref primary="true" item="Grammar" subitem="IMF-fixdate"/>
                  <iref primary="true" item="Grammar" subitem="date1"/>
                  <iref primary="true" item="Grammar" subitem="time-of-day"/>
                  <iref primary="true" item="Grammar" subitem="hour"/>
                  <iref primary="true" item="Grammar" subitem="minute"/>
                  <iref primary="true" item="Grammar" subitem="second"/>
                  <iref primary="true" item="Grammar" subitem="day-name"/>
                  <iref primary="true" item="Grammar" subitem="day-name-l"/>
                  <iref primary="true" item="Grammar" subitem="day"/>
                  <iref primary="true" item="Grammar" subitem="month"/>
                  <iref primary="true" item="Grammar" subitem="year"/>
                  <iref primary="true" item="Grammar" subitem="GMT"/>
                  <sourcecode type="abnf7230"><![CDATA[  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
  ; fixed length/zone/capitalization subset of the format
  ; see Section 3.3 of [RFC5322]
  
  day-name     = %s"Mon" / %s"Tue" / %s"Wed"
               / %s"Thu" / %s"Fri" / %s"Sat" / %s"Sun"
               
  date1        = day SP month SP year
               ; e.g., 02 Jun 1982

  day          = 2DIGIT
  month        = %s"Jan" / %s"Feb" / %s"Mar" / %s"Apr"
               / %s"May" / %s"Jun" / %s"Jul" / %s"Aug"
               / %s"Sep" / %s"Oct" / %s"Nov" / %s"Dec"
  year         = 4DIGIT

  GMT          = %s"GMT"

  time-of-day  = hour ":" minute ":" second
               ; 00:00:00 - 23:59:60 (leap second)
                 
  hour         = 2DIGIT               
  minute       = 2DIGIT               
  second       = 2DIGIT               
]]></sourcecode>
                  <t anchor="obsolete.date.formats">
  
  
  
  
  
  
  
  Obsolete formats:
</t>
                  <iref primary="true" item="Grammar" subitem="obs-date"/>
                  <sourcecode type="abnf7230"><![CDATA[  obs-date     = rfc850-date / asctime-date 
]]></sourcecode>
                  <iref primary="true" item="Grammar" subitem="rfc850-date"/>
                  <sourcecode type="abnf7230"><![CDATA[  rfc850-date  = day-name-l "," SP date2 SP time-of-day SP GMT
  date2        = day "-" month "-" 2DIGIT
               ; e.g., 02-Jun-82

  day-name-l   = %s"Monday" / %s"Tuesday" / %s"Wednesday"
         / %s"Thursday" / %s"Friday" / %s"Saturday" / %s"Sunday"
]]></sourcecode>
                  <iref primary="true" item="Grammar" subitem="asctime-date"/>
                  <sourcecode type="abnf7230"><![CDATA[  asctime-date = day-name SP date3 SP time-of-day SP year
  date3        = month SP ( 2DIGIT / ( SP 1DIGIT ))
               ; e.g., Jun  2
]]></sourcecode>
                  <t>
   HTTP-date is case sensitive.
   A sender <bcp14>MUST NOT</bcp14> generate additional whitespace in an HTTP-date beyond
   that specifically included as SP in the grammar.
   The semantics of <xref target="preferred.date.format" format="none">day-name</xref>, <xref target="preferred.date.format" format="none">day</xref>,
   <xref target="preferred.date.format" format="none">month</xref>, <xref target="preferred.date.format" format="none">year</xref>, and <xref target="preferred.date.format" format="none">time-of-day</xref>
   are the same as those defined for the Internet Message Format constructs
   with the corresponding name (<xref target="RFC5322" sectionFormat="comma" section="3.3"/>).
</t>
                  <t>
   Recipients of a timestamp value in rfc850-date format, which uses a
   two-digit year, <bcp14>MUST</bcp14> interpret a timestamp that appears to be more
   than 50 years in the future as representing the most recent year in the
   past that had the same last two digits.
</t>
                  <t>
   Recipients of timestamp values are encouraged to be robust in parsing
   timestamps unless otherwise restricted by the field definition.
   For example, messages are occasionally forwarded over HTTP from a non-HTTP
   source that might generate any of the date and time specifications defined
   by the Internet Message Format.
</t>
                  <aside>
                     <t>
    
                        <strong>Note:</strong> HTTP requirements for the date/time stamp format apply only
    to their usage within the protocol stream. Implementations are
    not required to use these formats for user presentation, request
    logging, etc.
  </t>
                  </aside>
               </section>
               <section anchor="header.date" title="Date">
                  <iref primary="true" item="Date header field"/>
                  <t>
   The "Date" header field represents the date and time at which
   the message was originated, having the same semantics as the Origination
   Date Field (orig-date) defined in <xref target="RFC5322" section="3.6.1"/>.
   The field value is an HTTP-date, as defined in <xref target="http.date"/>.
</t>
                  <iref primary="true" item="Grammar" subitem="Date"/>
                  <sourcecode type="abnf7230"><![CDATA[  Date = HTTP-date
]]></sourcecode>
                  <t>
   An example is
</t>
                  <artwork type="example"><![CDATA[
  Date: Tue, 15 Nov 1994 08:12:31 GMT
]]></artwork>
                  <t>
   When a Date header field is generated, the sender <bcp14>SHOULD</bcp14> generate its
   field value as the best available approximation of the date and time of
   message generation. In theory, the date ought to represent the moment just
   before the payload is generated. In practice, the date can be generated at
   any time during message origination.
</t>
                  <t>
   An origin server <bcp14>MUST NOT</bcp14> send a Date header field if it does not have a
   clock capable of providing a reasonable approximation of the current
   instance in Coordinated Universal Time.
   An origin server <bcp14>MAY</bcp14> send a Date header field if the response is in the
   <xref target="status.1xx" format="none">1xx (Informational)</xref> or <xref target="status.5xx" format="none">5xx (Server Error)</xref>
   class of status codes.
   An origin server <bcp14>MUST</bcp14> send a Date header field in all other cases.
</t>
                  <t>
   A recipient with a clock that receives a response message without a Date
   header field <bcp14>MUST</bcp14> record the time it was received and append a
   corresponding Date header field to the message's header section if it is
   cached or forwarded downstream.
</t>
                  <t>
   A user agent <bcp14>MAY</bcp14> send a Date header field in a request, though generally
   will not do so unless it is believed to convey useful information to the
   server. For example, custom applications of HTTP might convey a Date if
   the server is expected to adjust its interpretation of the user's request
   based on differences between the user agent and server clocks.
</t>
               </section>
            </section>
            <section anchor="header.location" title="Location">
               <iref primary="true" item="Location header field"/>
               <t>
   The "Location" header field is used in some responses to refer to a
   specific resource in relation to the response. The type of relationship is
   defined by the combination of request method and status code semantics.
</t>
               <iref primary="true" item="Grammar" subitem="Location"/>
               <sourcecode type="abnf7230"><![CDATA[  Location = URI-reference
]]></sourcecode>
               <t>
   The field value consists of a single URI-reference. When it has the form
   of a relative reference (<xref target="RFC3986" sectionFormat="comma" section="4.2"/>),
   the final value is computed by resolving it against the effective request
   URI (<xref target="RFC3986" sectionFormat="comma" section="5"/>).
</t>
               <t>
   For <xref target="status.201" format="none">201 (Created)</xref> responses, the Location value refers to
   the primary resource created by the request.
   For <xref target="status.3xx" format="none">3xx (Redirection)</xref> responses, the Location value refers
   to the preferred target resource for automatically redirecting the request.
</t>
               <t>
   If the Location value provided in a <xref target="status.3xx" format="none">3xx (Redirection)</xref>
   response does not have a fragment component, a user agent <bcp14>MUST</bcp14> process the
   redirection as if the value inherits the fragment component of the URI
   reference used to generate the request target (i.e., the redirection
   inherits the original reference's fragment, if any).
</t>
               <t>
   For example, a GET request generated for the URI reference
   "http://www.example.org/~tim" might result in a
   <xref target="status.303" format="none">303 (See Other)</xref> response containing the header field:
</t>
               <artwork type="example"><![CDATA[
  Location: /People.html#tim
]]></artwork>
               <t>
   which suggests that the user agent redirect to
   "http://www.example.org/People.html#tim"
</t>
               <t>
   Likewise, a GET request generated for the URI reference
   "http://www.example.org/index.html#larry" might result in a
   <xref target="status.301" format="none">301 (Moved Permanently)</xref> response containing the header
   field:
</t>
               <artwork type="example"><![CDATA[
  Location: http://www.example.net/index.html
]]></artwork>
               <t>
   which suggests that the user agent redirect to
   "http://www.example.net/index.html#larry", preserving the original fragment
   identifier.
</t>
               <t>
   There are circumstances in which a fragment identifier in a Location
   value would not be appropriate. For example, the Location header field in a
   <xref target="status.201" format="none">201 (Created)</xref> response is supposed to provide a URI that is
   specific to the created resource.
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> Some recipients attempt to recover from Location fields
    that are not valid URI references. This specification does not mandate or
    define such processing, but does allow it for the sake of robustness.
  </t>
               </aside>
               <aside>
                  <t>
    
                     <strong>Note:</strong> The <xref target="header.content-location" format="none">Content-Location</xref> header field
    (<xref target="header.content-location"/>) differs from Location in that the
    Content-Location refers to the most specific resource corresponding to the
    enclosed representation. It is therefore possible for a response to contain
    both the Location and Content-Location header fields.
  </t>
               </aside>
            </section>
            <section anchor="header.retry-after" title="Retry-After">
               <iref primary="true" item="Retry-After header field"/>
               <t>
   Servers send the "Retry-After" header field to indicate how long the user
   agent ought to wait before making a follow-up request. When sent with a
   <xref target="status.503" format="none">503 (Service Unavailable)</xref> response, Retry-After indicates
   how long the service is expected to be unavailable to the client.
   When sent with any <xref target="status.3xx" format="none">3xx (Redirection)</xref> response, Retry-After
   indicates the minimum time that the user agent is asked to wait before
   issuing the redirected request.
</t>
               <t>
   The value of this field can be either an HTTP-date or a number
   of seconds to delay after the response is received.
</t>
               <iref primary="true" item="Grammar" subitem="Retry-After"/>
               <sourcecode type="abnf7230"><![CDATA[  Retry-After = HTTP-date / delay-seconds
]]></sourcecode>
               <t anchor="rule.delay-seconds">
  
   A delay-seconds value is a non-negative decimal integer, representing time
   in seconds.
</t>
               <iref primary="true" item="Grammar" subitem="delay-seconds"/>
               <sourcecode type="abnf7230"><![CDATA[  delay-seconds  = 1*DIGIT
]]></sourcecode>
               <t>
   Two examples of its use are
</t>
               <artwork type="example"><![CDATA[
  Retry-After: Fri, 31 Dec 1999 23:59:59 GMT
  Retry-After: 120
]]></artwork>
               <t>
   In the latter example, the delay is 2 minutes.
</t>
            </section>
            <section anchor="header.vary" title="Vary">
               <iref item="Vary header field" primary="true"/>
               <t>
   The "Vary" header field in a response describes what parts of a request
   message, aside from the method, Host header field, and request target,
   might influence the origin server's process for selecting and representing
   this response. The value consists of either a single asterisk ("*") or a
   list of header field names (case-insensitive).
</t>
               <iref primary="true" item="Grammar" subitem="Vary"/>
               <sourcecode type="abnf7230"><![CDATA[  Vary = "*" / 1#field-name
]]></sourcecode>
               <t>
   A Vary field value of "*" signals that anything about the request might
   play a role in selecting the response representation, possibly including
   elements outside the message syntax (e.g., the client's network address).
   A recipient will not be able to determine whether this response is
   appropriate for a later request without forwarding the request to the
   origin server. A proxy <bcp14>MUST NOT</bcp14> generate a Vary field with a "*" value.
</t>
               <t>
   A Vary field value consisting of a comma-separated list of names indicates
   that the named request header fields, known as the selecting header fields,
   might have a role in selecting the representation. The potential selecting
   header fields are not limited to those defined by this specification.
</t>
               <t>
  For example, a response that contains
</t>
               <artwork type="example"><![CDATA[
  Vary: accept-encoding, accept-language
]]></artwork>
               <t>
   indicates that the origin server might have used the
   request's <xref target="header.accept-encoding" format="none">Accept-Encoding</xref> and <xref target="header.accept-language" format="none">Accept-Language</xref>
   fields (or lack thereof) as determining factors while choosing the content
   for this response.
</t>
               <t>
   An origin server might send Vary with a list of fields for two purposes:
</t>
               <ol>
                  <li>
    
                     <t>
       To inform cache recipients that they <bcp14>MUST NOT</bcp14> use this response
       to satisfy a later request unless the later request has the
       same values for the listed fields as the original request
       (<xref target="Caching" section="4.1" relative="#caching.negotiated.responses"/>). In other words, Vary expands the cache key
       required to match a new request to the stored cache entry.
    </t>
  
                  </li>
                  <li>
    
                     <t>
       To inform user agent recipients that this response is subject to
       content negotiation (<xref target="request.conneg"/>) and that a
       different representation might be sent in a subsequent request if
       additional parameters are provided in the listed header fields
       (<xref target="proactive.negotiation" format="none">proactive negotiation</xref>).
    </t>
  
                  </li>
               </ol>
               <t>
   An origin server <bcp14>SHOULD</bcp14> send a Vary header field when its algorithm for
   selecting a representation varies based on aspects of the request message
   other than the method and request target, unless the variance cannot be
   crossed or the origin server has been deliberately configured to prevent
   cache transparency. For example, there is no need to send the Authorization
   field name in Vary because reuse across users is constrained by the field
   definition (<xref target="header.authorization"/>). Likewise, an origin server might use
   Cache-Control response directives (<xref target="Caching" section="5.2" relative="#header.cache-control"/>) to supplant Vary if it
   considers the variance less significant than the performance cost of Vary's
   impact on caching.
</t>
            </section>
         </section>
         <section anchor="response.validator" title="Validators">
            <iref primary="true" item="metadata"/>
            <iref primary="true" item="validator"/>
            <iref item="selected representation"/>
            <t>
   Validator header fields convey metadata about the
   <xref target="representations" format="none">selected representation</xref> (<xref target="representations"/>).
   In responses to safe requests, validator fields describe the selected
   representation chosen by the origin server while handling the response.
   Note that, depending on the status code semantics, the
   <xref target="representations" format="none">selected representation</xref> for a given response is not
   necessarily the same as the representation enclosed as response payload.
</t>
            <t>
   In a successful response to a state-changing request, validator fields
   describe the new representation that has replaced the prior
   <xref target="representations" format="none">selected representation</xref> as a result of processing the
   request.
</t>
            <t>
   For example, an ETag header field in a <xref target="status.201" format="none">201 (Created)</xref> response communicates the
   entity-tag of the newly created resource's representation, so that it can
   be used in later conditional requests to prevent the "lost update"
   problem <xref target="preconditions"/>.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>ETag</td>
                     <td>
                        <xref target="header.etag"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Last-Modified</td>
                     <td>
                        <xref target="header.last-modified"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <t>
   This specification defines two forms of metadata that are commonly used
   to observe resource state and test for preconditions: modification dates
   (<xref target="header.last-modified"/>) and opaque entity tags
   (<xref target="header.etag"/>).  Additional metadata that reflects resource state
   has been defined by various extensions of HTTP, such as Web Distributed
   Authoring and Versioning (WebDAV, <xref target="RFC4918"/>), that are beyond the scope of this specification.
   A resource metadata value is referred to as a "validator"
   when it is used within a precondition.
</t>
            <section anchor="weak.and.strong.validators" title="Weak versus Strong">
               <iref primary="true" item="validator" subitem="weak"/>
               <iref primary="true" item="validator" subitem="strong"/>
               <t>
   Validators come in two flavors: strong or weak.  Weak validators are easy
   to generate but are far less useful for comparisons.  Strong validators
   are ideal for comparisons but can be very difficult (and occasionally
   impossible) to generate efficiently.  Rather than impose that all forms
   of resource adhere to the same strength of validator, HTTP exposes the
   type of validator in use and imposes restrictions on when weak validators
   can be used as preconditions.
</t>
               <t>
   A "strong validator" is representation metadata that changes value whenever
   a change occurs to the representation data that would be observable in the
   payload body of a <xref target="status.200" format="none">200 (OK)</xref> response to GET.
</t>
               <t>   
   A strong validator might change for reasons other than a change to the
   representation data, such as when a
   semantically significant part of the representation metadata is changed
   (e.g., <xref target="header.content-type" format="none">Content-Type</xref>), but it is in the best interests of the
   origin server to only change the value when it is necessary to invalidate
   the stored responses held by remote caches and authoring tools.
</t>
               <t>
   Cache entries might persist for arbitrarily long periods, regardless
   of expiration times.  Thus, a cache might attempt to validate an
   entry using a validator that it obtained in the distant past.
   A strong validator is unique across all versions of all
   representations associated with a particular resource over time.
   However, there is no implication of uniqueness across representations
   of different resources (i.e., the same strong validator might be
   in use for representations of multiple resources at the same time
   and does not imply that those representations are equivalent).
</t>
               <t>
   There are a variety of strong validators used in practice.  The best are
   based on strict revision control, wherein each change to a representation
   always results in a unique node name and revision identifier being assigned
   before the representation is made accessible to GET.  A collision-resistant hash
   function applied to the representation data is also sufficient if the data
   is available prior to the response header fields being sent and the digest
   does not need to be recalculated every time a validation request is
   received.  However, if a resource has distinct representations that differ
   only in their metadata, such as might occur with content negotiation over
   media types that happen to share the same data format, then the origin
   server needs to incorporate additional information in the validator to
   distinguish those representations.
</t>
               <t>
   In contrast, a "weak validator" is representation metadata that
   might not change for every change to the representation data.  This
   weakness might be due to limitations in how the value is calculated, such
   as clock resolution, an inability to ensure uniqueness for all possible
   representations of the resource, or a desire of the resource owner
   to group representations by some self-determined set of equivalency
   rather than unique sequences of data.  An origin server <bcp14>SHOULD</bcp14> change a
   weak entity-tag whenever it considers prior representations to be
   unacceptable as a substitute for the current representation. In other words,
   a weak entity-tag ought to change whenever the origin server wants caches to
   invalidate old responses.
</t>
               <t>
   For example, the representation of a weather report that changes in
   content every second, based on dynamic measurements, might be grouped
   into sets of equivalent representations (from the origin server's
   perspective) with the same weak validator in order to allow cached
   representations to be valid for a reasonable period of time (perhaps
   adjusted dynamically based on server load or weather quality).
   Likewise, a representation's modification time, if defined with only
   one-second resolution, might be a weak validator if it is possible
   for the representation to be modified twice during a single second and
   retrieved between those modifications.
</t>
               <t>
   Likewise, a validator is weak if it is shared by two or more
   representations of a given resource at the same time, unless those
   representations have identical representation data. For example, if the
   origin server sends the same validator for a representation with a gzip
   content coding applied as it does for a representation with no content
   coding, then that validator is weak. However, two simultaneous
   representations might share the same strong validator if they differ only
   in the representation metadata, such as when two different media types are
   available for the same representation data.
</t>
               <t>
   Strong validators are usable for all conditional requests, including cache
   validation, partial content ranges, and "lost update" avoidance.
   Weak validators are only usable when the client does not require exact
   equality with previously obtained representation data, such as when
   validating a cache entry or limiting a web traversal to recent changes.
</t>
            </section>
            <section anchor="header.last-modified" title="Last-Modified">
               <iref primary="true" item="Last-Modified header field"/>
               <t>
   The "Last-Modified" header field in a response provides a timestamp
   indicating the date and time at which the origin server believes the
   selected representation was last modified, as determined at the conclusion
   of handling the request.
</t>
               <iref primary="true" item="Grammar" subitem="Last-Modified"/>
               <sourcecode type="abnf7230"><![CDATA[  Last-Modified = HTTP-date
]]></sourcecode>
               <t>
   An example of its use is
</t>
               <artwork type="example"><![CDATA[
  Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT
]]></artwork>
               <section anchor="lastmod.generation" title="Generation">
                  <t>
   An origin server <bcp14>SHOULD</bcp14> send Last-Modified for any selected
   representation for which a last modification date can be reasonably
   and consistently determined, since its use in conditional requests
   and evaluating cache freshness (<xref target="Caching"/>) results in a substantial
   reduction of HTTP traffic on the Internet and can be a significant
   factor in improving service scalability and reliability.
</t>
                  <t>
   A representation is typically the sum of many parts behind the
   resource interface.  The last-modified time would usually be
   the most recent time that any of those parts were changed.
   How that value is determined for any given resource is an
   implementation detail beyond the scope of this specification.
   What matters to HTTP is how recipients of the Last-Modified
   header field can use its value to make conditional requests
   and test the validity of locally cached responses.
</t>
                  <t>
   An origin server <bcp14>SHOULD</bcp14> obtain the Last-Modified value of the
   representation as close as possible to the time that it generates the
   <xref target="header.date" format="none">Date</xref> field value for its response. This allows a recipient to
   make an accurate assessment of the representation's modification time,
   especially if the representation changes near the time that the
   response is generated.
</t>
                  <t>
   An origin server with a clock <bcp14>MUST NOT</bcp14> send a Last-Modified date
   that is later than the server's time of message origination (<xref target="header.date" format="none">Date</xref>).
   If the last modification time is derived from implementation-specific
   metadata that evaluates to some time in the future, according to the
   origin server's clock, then the origin server <bcp14>MUST</bcp14> replace that
   value with the message origination date. This prevents a future
   modification date from having an adverse impact on cache validation.
</t>
                  <t>
   An origin server without a clock <bcp14>MUST NOT</bcp14> assign Last-Modified
   values to a response unless these values were associated
   with the resource by some other system or user with a reliable clock.
</t>
               </section>
               <section anchor="lastmod.comparison" title="Comparison">
                  <t>
   A Last-Modified time, when used as a validator in a request, is
   implicitly weak unless it is possible to deduce that it is strong,
   using the following rules:
</t>
                  <ul>
                     <li>The validator is being compared by an origin server to the
       actual current validator for the representation and,</li>
                     <li>That origin server reliably knows that the associated representation did
       not change twice during the second covered by the presented
       validator.</li>
                  </ul>
                  <t>
   or
</t>
                  <ul>
                     <li>The validator is about to be used by a client in an <xref target="header.if-modified-since" format="none">If-Modified-Since</xref>,
       <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref>, or <xref target="header.if-range" format="none">If-Range</xref> header
       field, because the client has a cache entry for the associated
       representation, and</li>
                     <li>That cache entry includes a <xref target="header.date" format="none">Date</xref> value, which gives the
       time when the origin server sent the original response, and</li>
                     <li>The presented Last-Modified time is at least 60 seconds before
       the Date value.</li>
                  </ul>
                  <t>
   or
</t>
                  <ul>
                     <li>The validator is being compared by an intermediate cache to the
       validator stored in its cache entry for the representation, and</li>
                     <li>That cache entry includes a <xref target="header.date" format="none">Date</xref> value, which gives the
       time when the origin server sent the original response, and</li>
                     <li>The presented Last-Modified time is at least 60 seconds before
       the Date value.</li>
                  </ul>
                  <t>
   This method relies on the fact that if two different responses were
   sent by the origin server during the same second, but both had the
   same Last-Modified time, then at least one of those responses would
   have a <xref target="header.date" format="none">Date</xref> value equal to its Last-Modified time. The
   arbitrary 60-second limit guards against the possibility that the Date and
   Last-Modified values are generated from different clocks or at somewhat
   different times during the preparation of the response. An
   implementation <bcp14>MAY</bcp14> use a value larger than 60 seconds, if it is
   believed that 60 seconds is too short.
</t>
               </section>
            </section>
            <section anchor="header.etag" title="ETag">
               <iref primary="true" item="ETag header field"/>
               <t>
   The "ETag" header field in a response provides the current entity-tag for
   the selected representation, as determined at the conclusion of handling
   the request.
   An entity-tag is an opaque validator for differentiating between
   multiple representations of the same resource, regardless of whether
   those multiple representations are due to resource state changes over
   time, content negotiation resulting in multiple representations being
   valid at the same time, or both. An entity-tag consists of an opaque
   quoted string, possibly prefixed by a weakness indicator.
</t>
               <iref primary="true" item="Grammar" subitem="ETag"/>
               <iref primary="true" item="Grammar" subitem="entity-tag"/>
               <iref primary="true" item="Grammar" subitem="weak"/>
               <iref primary="true" item="Grammar" subitem="opaque-tag"/>
               <iref primary="true" item="Grammar" subitem="etagc"/>
               <sourcecode type="abnf7230"><![CDATA[  ETag       = entity-tag

  entity-tag = [ weak ] opaque-tag
  weak       = %s"W/"
  opaque-tag = DQUOTE *etagc DQUOTE
  etagc      = %x21 / %x23-7E / obs-text
             ; VCHAR except double quotes, plus obs-text
]]></sourcecode>
               <aside>
                  <t>
    
                     <strong>Note:</strong> Previously, opaque-tag was defined to be a quoted-string
    (<xref target="RFC2616" sectionFormat="comma" section="3.11"/>); thus, some recipients
    might perform backslash unescaping. Servers therefore ought to avoid
    backslash characters in entity tags.
  </t>
               </aside>
               <t>
   An entity-tag can be more reliable for validation than a modification
   date in situations where it is inconvenient to store modification
   dates, where the one-second resolution of HTTP date values is not
   sufficient, or where modification dates are not consistently maintained.
</t>
               <t>
  Examples:
</t>
               <artwork type="example"><![CDATA[
  ETag: "xyzzy"
  ETag: W/"xyzzy"
  ETag: ""
]]></artwork>
               <t>
   An entity-tag can be either a weak or strong validator, with
   strong being the default.  If an origin server provides an entity-tag
   for a representation and the generation of that entity-tag does not satisfy
   all of the characteristics of a strong validator
   (<xref target="weak.and.strong.validators"/>), then the origin server
   <bcp14>MUST</bcp14> mark the entity-tag as weak by prefixing its opaque value
   with "W/" (case-sensitive).
</t>
               <section anchor="entity.tag.generation" title="Generation">
                  <t>
   The principle behind entity-tags is that only the service author
   knows the implementation of a resource well enough to select the
   most accurate and efficient validation mechanism for that resource,
   and that any such mechanism can be mapped to a simple sequence of
   octets for easy comparison.  Since the value is opaque, there is no
   need for the client to be aware of how each entity-tag is constructed.
</t>
                  <t>
   For example, a resource that has implementation-specific versioning
   applied to all changes might use an internal revision number, perhaps
   combined with a variance identifier for content negotiation, to
   accurately differentiate between representations.
   Other implementations might use a collision-resistant hash of
   representation content, a combination of various file attributes, or
   a modification timestamp that has sub-second resolution.
</t>
                  <t>
   An origin server <bcp14>SHOULD</bcp14> send an ETag for any selected representation
   for which detection of changes can be reasonably and consistently
   determined, since the entity-tag's use in conditional requests and
   evaluating cache freshness (<xref target="Caching"/>) can result in a substantial
   reduction of HTTP network traffic and can be a significant factor in
   improving service scalability and reliability.
</t>
               </section>
               <section anchor="entity.tag.comparison" title="Comparison">
                  <t>
   There are two entity-tag comparison functions, depending on whether or not
   the comparison context allows the use of weak validators:
</t>
                  <ul>
                     <li>Strong comparison: two entity-tags are equivalent if both
       are not weak and their opaque-tags match character-by-character.</li>
                     <li>Weak comparison: two entity-tags are equivalent if their opaque-tags
       match character-by-character, regardless of either or both
       being tagged as "weak".</li>
                  </ul>
                  <t>
   The example below shows the results for a set of entity-tag pairs and both
   the weak and strong comparison function results:
</t>
                  <table align="left">
                     <thead>
                        <tr>
                           <th>ETag 1</th>
                           <th>ETag 2</th>
                           <th>Strong Comparison</th>
                           <th>Weak Comparison</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td>W/"1"</td>
                           <td>W/"1"</td>
                           <td>no match</td>
                           <td>match</td>
                        </tr>
                        <tr>
                           <td>W/"1"</td>
                           <td>W/"2"</td>
                           <td>no match</td>
                           <td>no match</td>
                        </tr>
                        <tr>
                           <td>W/"1"</td>
                           <td>"1"</td>
                           <td>no match</td>
                           <td>match</td>
                        </tr>
                        <tr>
                           <td>"1"</td>
                           <td>"1"</td>
                           <td>match</td>
                           <td>match</td>
                        </tr>
                     </tbody>
                  </table>
               </section>
               <section anchor="example.entity.tag.vs.conneg" title="Example: Entity-Tags Varying on Content-Negotiated Resources">
                  <t>
   Consider a resource that is subject to content negotiation
   (<xref target="content.negotiation"/>), and where the representations sent in response to
   a GET request vary based on the <xref target="header.accept-encoding" format="none">Accept-Encoding</xref> request
   header field (<xref target="header.accept-encoding"/>):
</t>
                  <t>
   &gt;&gt; Request:
</t>
                  <artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
  GET /index HTTP/1.1
  Host: www.example.com
  Accept-Encoding: gzip
  
  ]]></artwork>
                  <t>
   In this case, the response might or might not use the gzip content coding.
   If it does not, the response might look like:
</t>
                  <t>
   &gt;&gt; Response:
</t>
                  <artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 200 OK
  Date: Fri, 26 Mar 2010 00:05:00 GMT
  ETag: "123-a"
  Content-Length: 70
  Vary: Accept-Encoding
  Content-Type: text/plain
  
  Hello World!
  Hello World!
  Hello World!
  Hello World!
  Hello World!
  ]]></artwork>
                  <t>
   An alternative representation that does use gzip content coding would be:
</t>
                  <t>
   &gt;&gt; Response:
</t>
                  <artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 200 OK
  Date: Fri, 26 Mar 2010 00:05:00 GMT
  ETag: "123-b"
  Content-Length: 43
  Vary: Accept-Encoding
  Content-Type: text/plain
  Content-Encoding: gzip
  
  ...binary data...]]></artwork>
                  <aside>
                     <t>
    
                        <strong>Note:</strong> Content codings are a property of the representation data,
    so a strong entity-tag for a content-encoded representation has to be
    distinct from the entity tag of an unencoded representation to prevent
    potential conflicts during cache updates and range requests. In contrast,
    transfer codings (<xref target="Messaging" section="7" relative="#transfer.codings"/>) apply only during message transfer
    and do not result in distinct entity-tags.
  </t>
                  </aside>
               </section>
            </section>
            <section anchor="when.to.use.entity.tags.and.last-modified.dates" title="When to Use Entity-Tags and Last-Modified Dates">
               <t>
   In <xref target="status.200" format="none">200 (OK)</xref> responses to GET or HEAD, an origin server:
</t>
               <ul>
                  <li>
                     <bcp14>SHOULD</bcp14> send an entity-tag validator unless it is not feasible to
       generate one.</li>
                  <li>
                     <bcp14>MAY</bcp14> send a weak entity-tag instead of a strong entity-tag, if
       performance considerations support the use of weak entity-tags,
       or if it is unfeasible to send a strong entity-tag.</li>
                  <li>
                     <bcp14>SHOULD</bcp14> send a <xref target="header.last-modified" format="none">Last-Modified</xref> value if it is feasible to
       send one.</li>
               </ul>
               <t>
   In other words, the preferred behavior for an origin server
   is to send both a strong entity-tag and a <xref target="header.last-modified" format="none">Last-Modified</xref>
   value in successful responses to a retrieval request.
</t>
               <t>
   A client:
</t>
               <ul>
                  <li>
                     <bcp14>MUST</bcp14> send that entity-tag in any cache validation request (using
       <xref target="header.if-match" format="none">If-Match</xref> or <xref target="header.if-none-match" format="none">If-None-Match</xref>) if an
       entity-tag has been provided by the origin server.</li>
                  <li>
                     <bcp14>SHOULD</bcp14> send the <xref target="header.last-modified" format="none">Last-Modified</xref> value in non-subrange
       cache validation requests (using <xref target="header.if-modified-since" format="none">If-Modified-Since</xref>)
       if only a Last-Modified value has been provided by the origin server.</li>
                  <li>
                     <bcp14>MAY</bcp14> send the <xref target="header.last-modified" format="none">Last-Modified</xref> value in subrange
       cache validation requests (using <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref>)
       if only a Last-Modified value has been provided by an HTTP/1.0 origin
       server. The user agent <bcp14>SHOULD</bcp14> provide a way to disable this, in case
       of difficulty.</li>
                  <li>
                     <bcp14>SHOULD</bcp14> send both validators in cache validation requests if both an
       entity-tag and a <xref target="header.last-modified" format="none">Last-Modified</xref> value have been provided
       by the origin server. This allows both HTTP/1.0 and HTTP/1.1 caches to
       respond appropriately.</li>
               </ul>
            </section>
         </section>
         <section anchor="response.auth" title="Authentication Challenges">
            <t>
   Authentication challenges indicate what mechanisms are available for the
   client to provide authentication credentials in future requests.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>WWW-Authenticate</td>
                     <td>
                        <xref target="header.www-authenticate"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Proxy-Authenticate</td>
                     <td>
                        <xref target="header.proxy-authenticate"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <t>
   Furthermore, the "Authentication-Info" and
   "Proxy-Authentication-Info" response header fields are defined
   for use in authentication schemes that need to return
   information once the client's authentication credentials have been accepted.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Authentication-Info</td>
                     <td>
                        <xref target="header.authentication-info"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Proxy-Authentication-Info</td>
                     <td>
                        <xref target="header.proxy-authentication-info"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="header.www-authenticate" title="WWW-Authenticate">
               <iref primary="true" item="WWW-Authenticate header field"/>
               <t>
   The "WWW-Authenticate" header field indicates the authentication scheme(s)
   and parameters applicable to the target resource.
</t>
               <iref primary="true" item="Grammar" subitem="WWW-Authenticate"/>
               <sourcecode type="abnf7230"><![CDATA[  WWW-Authenticate = 1#challenge
]]></sourcecode>
               <t>
   A server generating a <xref target="status.401" format="none">401 (Unauthorized)</xref> response
   <bcp14>MUST</bcp14> send a WWW-Authenticate header field containing at least one
   challenge.  A server <bcp14>MAY</bcp14> generate a WWW-Authenticate header field
   in other response messages to indicate that supplying credentials
   (or different credentials) might affect the response.
</t>
               <t>
   A proxy forwarding a response <bcp14>MUST NOT</bcp14> modify any
   <xref target="header.www-authenticate" format="none">WWW-Authenticate</xref> fields in that response.
</t>
               <t>
   User agents are advised to take special care in parsing the field value, as
   it might contain more than one challenge, and each challenge can contain a
   comma-separated list of authentication parameters. Furthermore, the header
   field itself can occur multiple times.
</t>
               <t>
  For instance:
</t>
               <artwork type="example"><![CDATA[
  WWW-Authenticate: Newauth realm="apps", type=1,
                    title="Login to \"apps\"", Basic realm="simple"
]]></artwork>
               <t>
  This header field contains two challenges; one for the "Newauth" scheme
  with a realm value of "apps", and two additional parameters "type" and
  "title", and another one for the "Basic" scheme with a realm value of
  "simple".
</t>
               <aside>
                  <t>
    
                     <strong>Note:</strong> The challenge grammar production uses the list syntax as
    well. Therefore, a sequence of comma, whitespace, and comma can be
    considered either as applying to the preceding challenge, or to be an
    empty entry in the list of challenges. In practice, this ambiguity
    does not affect the semantics of the header field value and thus is
    harmless.
  </t>
               </aside>
            </section>
            <section anchor="header.proxy-authenticate" title="Proxy-Authenticate">
               <iref primary="true" item="Proxy-Authenticate header field"/>
               <t>
   The "Proxy-Authenticate" header field consists of at least one
   challenge that indicates the authentication scheme(s) and parameters
   applicable to the proxy for this effective request URI
   (<xref target="effective.request.uri"/>).
   A proxy <bcp14>MUST</bcp14> send at least one Proxy-Authenticate header field in
   each <xref target="status.407" format="none">407 (Proxy Authentication Required)</xref> response that it
   generates.
</t>
               <iref primary="true" item="Grammar" subitem="Proxy-Authenticate"/>
               <sourcecode type="abnf7230"><![CDATA[  Proxy-Authenticate = 1#challenge
]]></sourcecode>
               <t>
   Unlike <xref target="header.www-authenticate" format="none">WWW-Authenticate</xref>, the Proxy-Authenticate header field
   applies only to the next outbound client on the response chain.
   This is because only the client that chose a given proxy is likely to have
   the credentials necessary for authentication.  However, when multiple
   proxies are used within the same administrative domain, such as office and
   regional caching proxies within a large corporate network, it is common
   for credentials to be generated by the user agent and passed through the
   hierarchy until consumed.  Hence, in such a configuration, it will appear
   as if Proxy-Authenticate is being forwarded because each proxy will send
   the same challenge set.
</t>
               <t>
   Note that the parsing considerations for <xref target="header.www-authenticate" format="none">WWW-Authenticate</xref>
   apply to this header field as well; see <xref target="header.www-authenticate"/>
   for details.
</t>
            </section>
            <section anchor="header.authentication-info" title="Authentication-Info">
               <iref primary="true" item="Authentication-Info header field"/>
               <t>
   HTTP authentication schemes can use the Authentication-Info response header
   field to communicate information after the client's authentication credentials have been accepted.
   This information can include a finalization message from the server (e.g., it can contain the
   server authentication).
</t>
               <t>
   The field value is a list of parameters (name/value pairs), using the "auth-param"
   syntax defined in <xref target="challenge.and.response"/>.
   This specification only describes the generic format; authentication schemes
   using Authentication-Info will define the individual parameters. The "Digest"
   Authentication Scheme, for instance, defines multiple parameters in
   <xref target="RFC7616" section="3.5"/>.
</t>
               <iref primary="true" item="Grammar" subitem="Authentication-Info"/>
               <sourcecode type="abnf7230"><![CDATA[  Authentication-Info = #auth-param
]]></sourcecode>
               <t>
   The Authentication-Info header field can be used in any HTTP response,
   independently of request method and status code. Its semantics are defined
   by the authentication scheme indicated by the <xref target="header.authorization" format="none">Authorization</xref> header field
   (<xref target="header.authorization"/>) of the corresponding request.
</t>
               <t>
   A proxy forwarding a response is not allowed to modify the field value in any
   way. 
</t>
               <t>  
   Authentication-Info can be used inside trailers (<xref target="Messaging" section="7.1.2" relative="#chunked.trailer.section"/>)
   when the authentication scheme explicitly allows this.
</t>
               <section title="Parameter Value Format">
                  <t>
   Parameter values can be expressed either as "token" or as "quoted-string"
   (<xref target="field.components"/>).
</t>
                  <t>
   Authentication scheme definitions need to allow both notations, both for
   senders and recipients. This allows recipients to use generic parsing
   components, independent of the authentication scheme in use.
</t>
                  <t>
   For backwards compatibility, authentication scheme definitions can restrict
   the format for senders to one of the two variants. This can be important
   when it is known that deployed implementations will fail when encountering
   one of the two formats.
</t>
               </section>
            </section>
            <section anchor="header.proxy-authentication-info" title="Proxy-Authentication-Info">
               <iref primary="true" item="Proxy-Authentication-Info header field"/>
               <t>
   The Proxy-Authentication-Info response header field is equivalent to
   <xref target="header.authentication-info" format="none">Authentication-Info</xref>, except that it applies to proxy authentication (<xref target="challenge.and.response"/>)
   and its semantics are defined by the
   authentication scheme indicated by the Proxy-Authorization header field
   (<xref target="header.proxy-authorization"/>)
   of the corresponding request:
</t>
               <iref primary="true" item="Grammar" subitem="Proxy-Authentication-Info"/>
               <sourcecode type="abnf7230"><![CDATA[  Proxy-Authentication-Info = #auth-param
]]></sourcecode>
               <t>
   However, unlike <xref target="header.authentication-info" format="none">Authentication-Info</xref>, the Proxy-Authentication-Info header
   field applies only to the next outbound client on the response chain. This is
   because only the client that chose a given proxy is likely to have the
   credentials necessary for authentication. However, when multiple proxies are
   used within the same administrative domain, such as office and regional
   caching proxies within a large corporate network, it is common for
   credentials to be generated by the user agent and passed through the
   hierarchy until consumed. Hence, in such a configuration, it will appear as
   if Proxy-Authentication-Info is being forwarded because each proxy will send
   the same field value.
</t>
            </section>
         </section>
         <section anchor="response.context" title="Response Context">
            <t>
   The remaining response header fields provide more information about
   the <xref target="target.resource" format="none">target resource</xref> for potential use in later requests.
</t>
            <table align="left">
               <thead>
                  <tr>
                     <th>Header Field Name</th>
                     <th>Defined in...</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>Accept-Ranges</td>
                     <td>
                        <xref target="header.accept-ranges"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Allow</td>
                     <td>
                        <xref target="header.allow"/>
                     </td>
                  </tr>
                  <tr>
                     <td>Server</td>
                     <td>
                        <xref target="header.server"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <section anchor="header.accept-ranges" title="Accept-Ranges">
               <iref primary="true" item="Accept-Ranges header field"/>
               <t>
   The "Accept-Ranges" header field allows a server to indicate that it
   supports range requests for the target resource.
</t>
               <iref primary="true" item="Grammar" subitem="Accept-Ranges"/>
               <iref primary="true" item="Grammar" subitem="acceptable-ranges"/>
               <sourcecode type="abnf7230"><![CDATA[  Accept-Ranges     = acceptable-ranges
  acceptable-ranges = 1#range-unit / "none"
]]></sourcecode>
               <t>
   An origin server that supports byte-range requests for a given target
   resource <bcp14>MAY</bcp14> send
</t>
               <artwork type="example"><![CDATA[
  Accept-Ranges: bytes
]]></artwork>
               <t>
   to indicate what range units are supported. A client <bcp14>MAY</bcp14> generate range
   requests without having received this header field for the resource
   involved. Range units are defined in <xref target="range.units"/>.
</t>
               <t>
   A server that does not support any kind of range request for the target
   resource <bcp14>MAY</bcp14> send
</t>
               <artwork type="example"><![CDATA[
  Accept-Ranges: none
]]></artwork>
               <t>
   to advise the client not to attempt a range request.
</t>
            </section>
            <section anchor="header.allow" title="Allow">
               <iref primary="true" item="Allow header field"/>
               <t>
   The "Allow" header field lists the set of methods advertised as
   supported by the <xref target="target.resource" format="none">target resource</xref>. The purpose of this field
   is strictly to inform the recipient of valid request methods associated
   with the resource.
</t>
               <iref primary="true" item="Grammar" subitem="Allow"/>
               <sourcecode type="abnf7230"><![CDATA[  Allow = #method
]]></sourcecode>
               <t>
   Example of use:
</t>
               <artwork type="example"><![CDATA[
  Allow: GET, HEAD, PUT
]]></artwork>
               <t>
   The actual set of allowed methods is defined by the origin server at the
   time of each request. An origin server <bcp14>MUST</bcp14> generate an Allow field in a
   <xref target="status.405" format="none">405 (Method Not Allowed)</xref> response and <bcp14>MAY</bcp14> do so in any
   other response. An empty Allow field value indicates that the resource
   allows no methods, which might occur in a 405 response if the resource has
   been temporarily disabled by configuration.
</t>
               <t>
   A proxy <bcp14>MUST NOT</bcp14> modify the Allow header field — it does not need
   to understand all of the indicated methods in order to handle them
   according to the generic message handling rules.
</t>
            </section>
            <section anchor="header.server" title="Server">
               <iref primary="true" item="Server header field"/>
               <t>
   The "Server" header field contains information about the
   software used by the origin server to handle the request, which is often
   used by clients to help identify the scope of reported interoperability
   problems, to work around or tailor requests to avoid particular server
   limitations, and for analytics regarding server or operating system use.
   An origin server <bcp14>MAY</bcp14> generate a Server field in its responses.
</t>
               <iref primary="true" item="Grammar" subitem="Server"/>
               <sourcecode type="abnf7230"><![CDATA[  Server = product *( RWS ( product / comment ) )
]]></sourcecode>
               <t>
   The Server field-value consists of one or more product identifiers, each
   followed by zero or more comments (<xref target="comments"/>), which together
   identify the origin server software and its significant subproducts.
   By convention, the product identifiers are listed in decreasing order of
   their significance for identifying the origin server software. Each product
   identifier consists of a name and optional version, as defined in
   <xref target="header.user-agent"/>.
</t>
               <t>
   Example:
</t>
               <artwork type="example"><![CDATA[
  Server: CERN/3.0 libwww/2.17
]]></artwork>
               <t>
   An origin server <bcp14>SHOULD NOT</bcp14> generate a Server field containing needlessly
   fine-grained detail and <bcp14>SHOULD</bcp14> limit the addition of subproducts by third
   parties. Overly long and detailed Server field values increase response
   latency and potentially reveal internal implementation details that might
   make it (slightly) easier for attackers to find and exploit known security
   holes.
</t>
            </section>
         </section>
      </section>
      <section anchor="generic.syntax" title="Generic Syntax">
         <section anchor="whitespace" title="Whitespace">
            <t>
   This specification uses three rules to denote the use of linear
   whitespace: OWS (optional whitespace), RWS (required whitespace), and
   BWS ("bad" whitespace).
</t>
            <t>
   The OWS rule is used where zero or more linear whitespace octets might
   appear. For protocol elements where optional whitespace is preferred to
   improve readability, a sender <bcp14>SHOULD</bcp14> generate the optional whitespace
   as a single SP; otherwise, a sender <bcp14>SHOULD NOT</bcp14> generate optional
   whitespace except as needed to white out invalid or unwanted protocol
   elements during in-place message filtering.
</t>
            <t>
   The RWS rule is used when at least one linear whitespace octet is required
   to separate field tokens. A sender <bcp14>SHOULD</bcp14> generate RWS as a single SP.
</t>
            <t>
   The BWS rule is used where the grammar allows optional whitespace only for
   historical reasons. A sender <bcp14>MUST NOT</bcp14> generate BWS in messages.
   A recipient <bcp14>MUST</bcp14> parse for such bad whitespace and remove it before
   interpreting the protocol element.
</t>
            <iref primary="true" item="Grammar" subitem="OWS"/>
            <iref primary="true" item="Grammar" subitem="RWS"/>
            <iref primary="true" item="Grammar" subitem="BWS"/>
            <sourcecode type="abnf7230"><![CDATA[  OWS            = *( SP / HTAB )
                 ; optional whitespace
  RWS            = 1*( SP / HTAB )
                 ; required whitespace
  BWS            = OWS
                 ; "bad" whitespace
]]></sourcecode>
         </section>
      </section>
      <section anchor="abnf.extension" title="ABNF List Extension: #rule">
         <t>
   A #rule extension to the ABNF rules of <xref target="RFC5234"/> is used to
   improve readability in the definitions of some header field values.
</t>
         <t>
   A construct "#" is defined, similar to "*", for defining comma-delimited
   lists of elements. The full form is "&lt;n&gt;#&lt;m&gt;element" indicating
   at least &lt;n&gt; and at most &lt;m&gt; elements, each separated by a single
   comma (",") and optional whitespace (OWS).   
</t>
         <section title="Sender Requirements">
            <t>
   In any production that uses the list construct, a sender <bcp14>MUST NOT</bcp14>
   generate empty list elements. In other words, a sender <bcp14>MUST</bcp14> generate
   lists that satisfy the following syntax:
</t>
            <artwork type="example"><![CDATA[
  1#element => element *( OWS "," OWS element )
]]></artwork>
            <t>
   and:
</t>
            <artwork type="example"><![CDATA[
  #element => [ 1#element ]
]]></artwork>
            <t>
   and for n &gt;= 1 and m &gt; 1:
</t>
            <artwork type="example"><![CDATA[
  <n>#<m>element => element <n-1>*<m-1>( OWS "," OWS element )
]]></artwork>
         </section>
         <section title="Recipient Requirements">
            <t>
   Empty elements do not contribute to the count of elements present.
   A recipient <bcp14>MUST</bcp14> parse and ignore
   a reasonable number of empty list elements: enough to handle common mistakes
   by senders that merge values, but not so much that they could be used as a
   denial-of-service mechanism. In other words, a recipient <bcp14>MUST</bcp14> accept lists
   that satisfy the following syntax:
</t>
            <artwork type="example"><![CDATA[
  #element => [ element ] *( OWS "," OWS [ element ] )
]]></artwork>
            <t>
   Note that because of the potential presence of empty list elements, the
   RFC 5234 ABNF cannot enforce the cardinality of list elements, and
   consequently all cases are mapped is if there was no cardinality specified.
</t>
            <t>
   For example, given these ABNF productions: 
</t>
            <artwork type="example"><![CDATA[
  example-list      = 1#example-list-elmt
  example-list-elmt = token ; see Section 4.2.3.1
]]></artwork>
            <t>
   Then the following are valid values for example-list (not including the
   double quotes, which are present for delimitation only):
</t>
            <artwork type="example"><![CDATA[
  "foo,bar"
  "foo ,bar,"
  "foo , ,bar,charlie"
]]></artwork>
            <t>
   In contrast, the following values would be invalid, since at least one
   non-empty element is required by the example-list production:
</t>
            <artwork type="example"><![CDATA[
  ""
  ","
  ",   ,"
]]></artwork>
            <t>
   
               <xref target="collected.abnf"/> shows the collected ABNF for recipients
   after the list constructs have been expanded.
</t>
         </section>
      </section>
      <section anchor="security.considerations" title="Security Considerations">
         <t>
   This section is meant to inform developers, information providers, and
   users of known security concerns relevant to HTTP semantics and its
   use for transferring information over the Internet. Considerations related
   to message syntax, parsing, and routing are discussed in
   <xref target="Messaging" section="11" relative="#security.considerations"/>.
</t>
         <t>
   The list of considerations below is not exhaustive. Most security concerns
   related to HTTP semantics are about securing server-side applications (code
   behind the HTTP interface), securing user agent processing of payloads
   received via HTTP, or secure use of the Internet in general, rather than
   security of the protocol. Various organizations maintain topical
   information and links to current research on Web application security
   (e.g., <xref target="OWASP"/>).
</t>
         <section anchor="establishing.authority" title="Establishing Authority">
            <iref item="authoritative response" primary="true"/>
            <iref item="phishing" primary="true"/>
            <t>
   HTTP relies on the notion of an authoritative response: a
   response that has been determined by (or at the direction of) the origin
   server identified within the target URI to be the most appropriate response
   for that request given the state of the target resource at the time of
   response message origination.
</t>
            <t>
   When a registered name is used in the authority component, the "http" URI
   scheme (<xref target="http.uri"/>) relies on the user's local name
   resolution service to determine where it can find authoritative responses.
   This means that any attack on a user's network host table, cached names,
   or name resolution libraries becomes an avenue for attack on establishing
   authority for "http" URIs. Likewise, the user's choice of server for
   Domain Name Service (DNS), and the hierarchy of servers from which it
   obtains resolution results, could impact the authenticity of address
   mappings; DNS Security Extensions (DNSSEC, <xref target="RFC4033"/>) are
   one way to improve authenticity.
</t>
            <t>
   Furthermore, after an IP address is obtained, establishing authority for
   an "http" URI is vulnerable to attacks on Internet Protocol routing.
</t>
            <t>
   The "https" scheme (<xref target="https.uri"/>) is intended to prevent
   (or at least reveal) many of these potential attacks on establishing
   authority, provided that the negotiated TLS connection is secured and
   the client properly verifies that the communicating server's identity
   matches the target URI's authority component
   (<xref target="https.identify.server"/>). Correctly implementing such verification
   can be difficult (see <xref target="Georgiev"/>).
</t>
            <t>
   Authority for a given origin server can be delegated through protocol
   extensions; for example, <xref target="RFC7838"/>. Likewise, the set of
   servers that a connection is considered authoritative for can be changed
   with a protocol extension like <xref target="RFC8336"/>.
</t>
            <t>
   Providing a response from a non-authoritative source, such as a shared
   proxy cache, is often useful to improve performance and availability, but
   only to the extent that the source can be trusted or the distrusted
   response can be safely used.
</t>
            <t>
   Unfortunately, communicating authority to users can be difficult.
   For example, phishing is an attack on the user's perception
   of authority, where that perception can be misled by presenting similar
   branding in hypertext, possibly aided by userinfo obfuscating the authority
   component (see <xref target="http.uri"/>).
   User agents can reduce the impact of phishing attacks by enabling users to
   easily inspect a target URI prior to making an action, by prominently
   distinguishing (or rejecting) userinfo when present, and by not sending
   stored credentials and cookies when the referring document is from an
   unknown or untrusted source.
</t>
            <t>
  See also <xref target="RFC6454"/> for a formalisation of authority that is
  used by many clients.
</t>
         </section>
         <section anchor="risks.intermediaries" title="Risks of Intermediaries">
            <t>
   By their very nature, HTTP intermediaries are men-in-the-middle and, thus,
   represent an opportunity for man-in-the-middle attacks. Compromise of
   the systems on which the intermediaries run can result in serious security
   and privacy problems. Intermediaries might have access to security-related
   information, personal information about individual users and
   organizations, and proprietary information belonging to users and
   content providers. A compromised intermediary, or an intermediary
   implemented or configured without regard to security and privacy
   considerations, might be used in the commission of a wide range of
   potential attacks.
</t>
            <t>
   Intermediaries that contain a shared cache are especially vulnerable
   to cache poisoning attacks, as described in <xref target="Caching" section="7" relative="#security.considerations"/>.
</t>
            <t>
   Implementers need to consider the privacy and security
   implications of their design and coding decisions, and of the
   configuration options they provide to operators (especially the
   default configuration).
</t>
            <t>
   Users need to be aware that intermediaries are no more trustworthy than
   the people who run them; HTTP itself cannot solve this problem.
</t>
         </section>
         <section anchor="attack.pathname" title="Attacks Based on File and Path Names">
            <t>
   Origin servers frequently make use of their local file system to manage the
   mapping from effective request URI to resource representations.
   Most file systems are not designed to protect against malicious file
   or path names. Therefore, an origin server needs to avoid accessing
   names that have a special significance to the system when mapping the
   request target to files, folders, or directories.
</t>
            <t>
   For example, UNIX, Microsoft Windows, and other operating systems use ".."
   as a path component to indicate a directory level above the current one,
   and they use specially named paths or file names to send data to system devices.
   Similar naming conventions might exist within other types of storage
   systems. Likewise, local storage systems have an annoying tendency to
   prefer user-friendliness over security when handling invalid or unexpected
   characters, recomposition of decomposed characters, and case-normalization
   of case-insensitive names.
</t>
            <t>
   Attacks based on such special names tend to focus on either denial-of-service
   (e.g., telling the server to read from a COM port) or disclosure
   of configuration and source files that are not meant to be served.
</t>
         </section>
         <section anchor="attack.injection" title="Attacks Based on Command, Code, or Query Injection">
            <t>
   Origin servers often use parameters within the URI as a
   means of identifying system services, selecting database entries, or
   choosing a data source. However, data received in a request cannot be
   trusted. An attacker could construct any of the request data elements
   (method, request-target, header fields, or body) to contain data that might
   be misinterpreted as a command, code, or query when passed through a
   command invocation, language interpreter, or database interface.
</t>
            <t>
   For example, SQL injection is a common attack wherein additional query
   language is inserted within some part of the request-target or header
   fields (e.g., <xref target="header.host" format="none">Host</xref>, <xref target="header.referer" format="none">Referer</xref>, etc.).
   If the received data is used directly within a SELECT statement, the
   query language might be interpreted as a database command instead of a
   simple string value. This type of implementation vulnerability is extremely
   common, in spite of being easy to prevent.
</t>
            <t>
   In general, resource implementations ought to avoid use of request data
   in contexts that are processed or interpreted as instructions.  Parameters
   ought to be compared to fixed strings and acted upon as a result of that
   comparison, rather than passed through an interface that is not prepared
   for untrusted data. Received data that isn't based on fixed parameters
   ought to be carefully filtered or encoded to avoid being misinterpreted.
</t>
            <t>
   Similar considerations apply to request data when it is stored and later
   processed, such as within log files, monitoring tools, or when included
   within a data format that allows embedded scripts.
</t>
         </section>
         <section anchor="attack.protocol.element.length" title="Attacks via Protocol Element Length">
            <t>
   Because HTTP uses mostly textual, character-delimited fields, parsers are
   often vulnerable to attacks based on sending very long (or very slow)
   streams of data, particularly where an implementation is expecting a
   protocol element with no predefined length
   (<xref target="parsing-elements"/>).
</t>
            <t>
   To promote interoperability, specific recommendations are made for minimum
   size limits on request-line (<xref target="Messaging" section="3" relative="#request.line"/>)
   and header fields (<xref target="header.fields"/>). These are
   minimum recommendations, chosen to be supportable even by implementations
   with limited resources; it is expected that most implementations will
   choose substantially higher limits.
</t>
            <t>
   A server can reject a message that
   has a request-target that is too long (<xref target="status.414"/>) or a request payload
   that is too large (<xref target="status.413"/>). Additional status codes related to
   capacity limits have been defined by extensions to HTTP
   <xref target="RFC6585"/>.
</t>
            <t>
   Recipients ought to carefully limit the extent to which they process other
   protocol elements, including (but not limited to) request methods, response
   status phrases, header field-names, numeric values, and body chunks.
   Failure to limit such processing can result in buffer overflows, arithmetic
   overflows, or increased vulnerability to denial-of-service attacks.
</t>
         </section>
         <section anchor="personal.information" title="Disclosure of Personal Information">
            <t>
   Clients are often privy to large amounts of personal information,
   including both information provided by the user to interact with resources
   (e.g., the user's name, location, mail address, passwords, encryption
   keys, etc.) and information about the user's browsing activity over
   time (e.g., history, bookmarks, etc.). Implementations need to
   prevent unintentional disclosure of personal information.
</t>
         </section>
         <section anchor="privacy.of.server.log.information" title="Privacy of Server Log Information">
            <t>
   A server is in the position to save personal data about a user's requests
   over time, which might identify their reading patterns or subjects of
   interest.  In particular, log information gathered at an intermediary
   often contains a history of user agent interaction, across a multitude
   of sites, that can be traced to individual users.
</t>
            <t>
   HTTP log information is confidential in nature; its handling is often
   constrained by laws and regulations.  Log information needs to be securely
   stored and appropriate guidelines followed for its analysis.
   Anonymization of personal information within individual entries helps,
   but it is generally not sufficient to prevent real log traces from being
   re-identified based on correlation with other access characteristics.
   As such, access traces that are keyed to a specific client are unsafe to
   publish even if the key is pseudonymous.
</t>
            <t>
   To minimize the risk of theft or accidental publication, log information
   ought to be purged of personally identifiable information, including
   user identifiers, IP addresses, and user-provided query parameters,
   as soon as that information is no longer necessary to support operational
   needs for security, auditing, or fraud control.
</t>
         </section>
         <section anchor="sensitive.information.in.uris" title="Disclosure of Sensitive Information in URIs">
            <t>
   URIs are intended to be shared, not secured, even when they identify secure
   resources. URIs are often shown on displays, added to templates when a page
   is printed, and stored in a variety of unprotected bookmark lists.
   It is therefore unwise to include information within a URI that
   is sensitive, personally identifiable, or a risk to disclose.
</t>
            <t>
   Authors of services ought to avoid GET-based forms for the submission of
   sensitive data because that data will be placed in the request-target. Many
   existing servers, proxies, and user agents log or display the request-target
   in places where it might be visible to third parties. Such services ought
   to use POST-based form submission instead.
</t>
            <t>
   Since the <xref target="header.referer" format="none">Referer</xref> header field tells a target site about the
   context that resulted in a request, it has the potential to reveal
   information about the user's immediate browsing history and any personal
   information that might be found in the referring resource's URI.
   Limitations on the Referer header field are described in <xref target="header.referer"/> to
   address some of its security considerations.
</t>
         </section>
         <section anchor="fragment.disclosure" title="Disclosure of Fragment after Redirects">
            <t>
   Although fragment identifiers used within URI references are not sent
   in requests, implementers ought to be aware that they will be visible to
   the user agent and any extensions or scripts running as a result of the
   response. In particular, when a redirect occurs and the original request's
   fragment identifier is inherited by the new reference in
   <xref target="header.location" format="none">Location</xref> (<xref target="header.location"/>), this might
   have the effect of disclosing one site's fragment to another site.
   If the first site uses personal information in fragments, it ought to
   ensure that redirects to other sites include a (possibly empty) fragment
   component in order to block that inheritance.
</t>
         </section>
         <section anchor="disclosure.product.information" title="Disclosure of Product Information">
            <t>
   The <xref target="header.user-agent" format="none">User-Agent</xref> (<xref target="header.user-agent"/>),
   <xref target="header.via" format="none">Via</xref> (<xref target="header.via"/>), and
   <xref target="header.server" format="none">Server</xref> (<xref target="header.server"/>) header fields often
   reveal information about the respective sender's software systems.
   In theory, this can make it easier for an attacker to exploit known
   security holes; in practice, attackers tend to try all potential holes
   regardless of the apparent software versions being used.
</t>
            <t>
   Proxies that serve as a portal through a network firewall ought to take
   special precautions regarding the transfer of header information that might
   identify hosts behind the firewall. The <xref target="header.via" format="none">Via</xref> header field
   allows intermediaries to replace sensitive machine names with pseudonyms.
</t>
         </section>
         <section anchor="fingerprinting" title="Browser Fingerprinting">
            <t>
   Browser fingerprinting is a set of techniques for identifying a specific
   user agent over time through its unique set of characteristics. These
   characteristics might include information related to its TCP behavior,
   feature capabilities, and scripting environment, though of particular
   interest here is the set of unique characteristics that might be
   communicated via HTTP. Fingerprinting is considered a privacy concern
   because it enables tracking of a user agent's behavior over time without
   the corresponding controls that the user might have over other forms of
   data collection (e.g., cookies). Many general-purpose user agents
   (i.e., Web browsers) have taken steps to reduce their fingerprints.
</t>
            <t>
   There are a number of request header fields that might reveal information
   to servers that is sufficiently unique to enable fingerprinting.
   The <xref target="header.from" format="none">From</xref> header field is the most obvious, though it is
   expected that From will only be sent when self-identification is desired by
   the user. Likewise, Cookie header fields are deliberately designed to
   enable re-identification, so fingerprinting concerns only apply to
   situations where cookies are disabled or restricted by the user agent's
   configuration.
</t>
            <t>
   The <xref target="header.user-agent" format="none">User-Agent</xref> header field might contain enough information
   to uniquely identify a specific device, usually when combined with other
   characteristics, particularly if the user agent sends excessive details
   about the user's system or extensions. However, the source of unique
   information that is least expected by users is
   <xref target="proactive.negotiation" format="none">proactive negotiation</xref> (<xref target="request.conneg"/>),
   including the <xref target="header.accept" format="none">Accept</xref>, <xref target="header.accept-charset" format="none">Accept-Charset</xref>,
   <xref target="header.accept-encoding" format="none">Accept-Encoding</xref>, and <xref target="header.accept-language" format="none">Accept-Language</xref>
   header fields.
</t>
            <t>
   In addition to the fingerprinting concern, detailed use of the
   <xref target="header.accept-language" format="none">Accept-Language</xref> header field can reveal information the
   user might consider to be of a private nature. For example, understanding
   a given language set might be strongly correlated to membership in a
   particular ethnic group.
   An approach that limits such loss of privacy would be for a user agent
   to omit the sending of Accept-Language except for sites that have been
   whitelisted, perhaps via interaction after detecting a <xref target="header.vary" format="none">Vary</xref>
   header field that indicates language negotiation might be useful.
</t>
            <t>
   In environments where proxies are used to enhance privacy, user agents
   ought to be conservative in sending proactive negotiation header fields.
   General-purpose user agents that provide a high degree of header field
   configurability ought to inform users about the loss of privacy that might
   result if too much detail is provided. As an extreme privacy measure,
   proxies could filter the proactive negotiation header fields in relayed
   requests.
</t>
         </section>
         <section anchor="security.validators" title="Validator Retention">
            <t>
   The validators defined by this specification are not intended to ensure
   the validity of a representation, guard against malicious changes, or
   detect man-in-the-middle attacks. At best, they enable more efficient cache
   updates and optimistic concurrent writes when all participants are behaving
   nicely. At worst, the conditions will fail and the client will receive a
   response that is no more harmful than an HTTP exchange without conditional
   requests.
</t>
            <t>
   An entity-tag can be abused in ways that create privacy risks. For example,
   a site might deliberately construct a semantically invalid entity-tag that
   is unique to the user or user agent, send it in a cacheable response with a
   long freshness time, and then read that entity-tag in later conditional
   requests as a means of re-identifying that user or user agent. Such an
   identifying tag would become a persistent identifier for as long as the
   user agent retained the original cache entry. User agents that cache
   representations ought to ensure that the cache is cleared or replaced
   whenever the user performs privacy-maintaining actions, such as clearing
   stored cookies or changing to a private browsing mode.
</t>
         </section>
         <section anchor="overlapping.ranges" title="Denial-of-Service Attacks Using Range">
            <t>
   Unconstrained multiple range requests are susceptible to denial-of-service
   attacks because the effort required to request many overlapping ranges of
   the same data is tiny compared to the time, memory, and bandwidth consumed
   by attempting to serve the requested data in many parts.
   Servers ought to ignore, coalesce, or reject egregious range requests, such
   as requests for more than two overlapping ranges or for many small ranges
   in a single set, particularly when the ranges are requested out of order
   for no apparent reason. Multipart range requests are not designed to
   support random access.
</t>
         </section>
         <section anchor="security.auth" title="Authentication Considerations">
            <t>
   Everything about the topic of HTTP authentication is a security
   consideration, so the list of considerations below is not exhaustive.
   Furthermore, it is limited to security considerations regarding the
   authentication framework, in general, rather than discussing all of the
   potential considerations for specific authentication schemes (which ought
   to be documented in the specifications that define those schemes).
   Various organizations maintain topical information and links to current
   research on Web application security (e.g., <xref target="OWASP"/>),
   including common pitfalls for implementing and using the authentication
   schemes found in practice.
</t>
            <section anchor="confidentiality.of.credentials" title="Confidentiality of Credentials">
               <t>
   The HTTP authentication framework does not define a single mechanism for
   maintaining the confidentiality of credentials; instead, each
   authentication scheme defines how the credentials are encoded prior to
   transmission. While this provides flexibility for the development of future
   authentication schemes, it is inadequate for the protection of existing
   schemes that provide no confidentiality on their own, or that do not
   sufficiently protect against replay attacks. Furthermore, if the server
   expects credentials that are specific to each individual user, the exchange
   of those credentials will have the effect of identifying that user even if
   the content within credentials remains confidential.
</t>
               <t>
   HTTP depends on the security properties of the underlying transport- or
   session-level connection to provide confidential transmission of header
   fields. In other words, if a server limits access to authenticated users
   using this framework, the server needs to ensure that the connection is
   properly secured in accordance with the nature of the authentication
   scheme used. For example, services that depend on individual user
   authentication often require a connection to be secured with TLS
   ("Transport Layer Security", <xref target="RFC8446"/>) prior to exchanging
   any credentials.
</t>
            </section>
            <section anchor="auth.credentials.and.idle.clients" title="Credentials and Idle Clients">
               <t>
   Existing HTTP clients and user agents typically retain authentication
   information indefinitely. HTTP does not provide a mechanism for the
   origin server to direct clients to discard these cached credentials, since
   the protocol has no awareness of how credentials are obtained or managed
   by the user agent. The mechanisms for expiring or revoking credentials can
   be specified as part of an authentication scheme definition.
</t>
               <t>
   Circumstances under which credential caching can interfere with the
   application's security model include but are not limited to:
</t>
               <ul>
                  <li>Clients that have been idle for an extended period, following
       which the server might wish to cause the client to re-prompt the
       user for credentials.</li>
                  <li>Applications that include a session termination indication
       (such as a "logout" or "commit" button on a page) after which
       the server side of the application "knows" that there is no
       further reason for the client to retain the credentials.</li>
               </ul>
               <t>
   User agents that cache credentials are encouraged to provide a readily
   accessible mechanism for discarding cached credentials under user control.
</t>
            </section>
            <section anchor="protection.spaces" title="Protection Spaces">
               <t>
  Authentication schemes that solely rely on the "realm" mechanism for
  establishing a protection space will expose credentials to all resources on
  an origin server. Clients that have successfully made authenticated requests
  with a resource can use the same authentication credentials for other
  resources on the same origin server. This makes it possible for a different
  resource to harvest authentication credentials for other resources.
</t>
               <t>
  This is of particular concern when an origin server hosts resources for multiple
  parties under the same canonical root URI (<xref target="protection.space"/>).
  Possible mitigation strategies include restricting direct access to
  authentication credentials (i.e., not making the content of the
  <xref target="header.authorization" format="none">Authorization</xref> request header field available), and separating protection
  spaces by using a different host name (or port number) for each party.
</t>
            </section>
            <section anchor="security.auth.add.resp" title="Additional Response Header Fields">
               <t>
  Adding information to responses that are sent over an unencrypted
  channel can affect security and privacy. The presence of the
  <xref target="header.authentication-info" format="none">Authentication-Info</xref> and <xref target="header.proxy-authentication-info" format="none">Proxy-Authentication-Info</xref>
  header fields alone indicates that HTTP authentication is in use. Additional
  information could be exposed by the contents of the authentication-scheme
  specific parameters; this will have to be considered in the definitions of these
  schemes.
</t>
            </section>
         </section>
      </section>
      <section anchor="IANA.considerations" title="IANA Considerations">
         <t>
   The change controller for the following registrations is:
   "IETF (iesg@ietf.org) - Internet Engineering Task Force".
</t>
         <section anchor="uri.scheme.registration" title="URI Scheme Registration">
            <t>
   Please update the registry of URI Schemes <xref target="BCP35"/> at
   <eref target="https://www.iana.org/assignments/uri-schemes/"/> with the
   permanent schemes listed in the first table of <xref target="resources"/>.
</t>
         </section>
         <section anchor="method.registration" title="Method Registration">
            <t>
  Please update the "Hypertext Transfer Protocol (HTTP) Method Registry" at
  <eref target="https://www.iana.org/assignments/http-methods"/> with the
  registration procedure of <xref target="method.registry"/> and the method
  names summarized in the table of <xref target="method.properties"/>.
</t>
         </section>
         <section anchor="status.code.registration" title="Status Code Registration">
            <t>
   Please update the "Hypertext Transfer Protocol (HTTP) Status Code Registry"
   at <eref target="https://www.iana.org/assignments/http-status-codes"/> with
   the registration procedure of <xref target="status.code.registry"/> and the
   status code values summarized in the table of
   <xref target="overview.of.status.codes"/>.
</t>
            <t>
   Additionally, please update the following entry in the Hypertext Transfer
   Protocol (HTTP) Status Code Registry:
</t>
            <dl>
               <dt>Value:</dt>
               <dd>418</dd>
               <dt>Description:</dt>
               <dd>(Unused)</dd>
               <dt>Reference</dt>
               <dd>
                  <xref target="status.418"/>
               </dd>
            </dl>
         </section>
         <section anchor="header.field.registration" title="Header Field Registration">
            <t>      
   Please create a new registry as outlined in <xref target="field.name.registry"/>.
</t>
            <t>
   After creating the registry, all entries in the Permanent and Provisional
   Message Header Registries with the protocol 'http' are to be moved to it,
   with the following changes applied:
</t>
            <ol>
               <li>The 'Applicable Protocol' field is to be omitted.</li>
               <li>Entries with a status of 'standard', 'experimental', or
   'informational' are to have a status of 'permanent'.</li>
               <li>Provisional entries without a status are to have a status of
   'provisional'.</li>
               <li>Permanent entries without a status (after confirmation that the
   registration document did not define one) will have a status of
   'provisional'. The Expert(s) can choose to update their status if there is
   evidence that another is more appropriate.</li>
            </ol>
            <t>
   Please annotate the Permanent and Provisional Message Header registries to
   indicate that HTTP header field registrations have moved, with an
   appropriate link.
</t>
            <t>
   After that is complete, please update the new registry with the
   header field names listed in the table of <xref target="field.names"/>.
</t>
            <t>
   
               <iref primary="true" item="Content-MD5 header field"/>
   Finally, please update the "Content-MD5" entry in the new registry to have
   a status of 'obsoleted' with references to 
   <xref target="RFC2616" section="14.15"/> (for the definition
   of the header field) and 
   <xref target="RFC7231" section="B"/> (which removed the field
   definition from the updated specification).
</t>
         </section>
         <section anchor="auth.scheme.registration" title="Authentication Scheme Registration">
            <t>
   Please update the
   "Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry"
   at <eref target="https://www.iana.org/assignments/http-authschemes"/> with
   the registration procedure of <xref target="auth.scheme.registry"/>.
   No authentication schemes are defined in this document.
</t>
         </section>
         <section anchor="content.coding.registration" title="Content Coding Registration">
            <t>
   Please update the "HTTP Content Coding Registry" at
   <eref target="https://www.iana.org/assignments/http-parameters/"/>
   with the registration procedure of <xref target="content.coding.registry"/>
   and the content coding names summarized in the table of
   <xref target="content.codings"/>.
</t>
         </section>
         <section anchor="range.unit.registration" title="Range Unit Registration">
            <t>
   Please update the "HTTP Range Unit Registry" at
   <eref target="https://www.iana.org/assignments/http-parameters/"/>
   with the registration procedure of <xref target="range.unit.registry"/>
   and the range unit names summarized in the table of
   <xref target="range.units"/>.
</t>
         </section>
         <section anchor="media.type.reg" title="Media Type Registration">
            <t>
   Please update the "Media Types" registry at
   <eref target="https://www.iana.org/assignments/media-types"/>
   with the registration information in
   <xref target="multipart.byteranges"/>
   for the media type "multipart/byteranges".
</t>
         </section>
         <section anchor="port.reg" title="Port Registration">
            <t>
   Please update the "Service Name and Transport Protocol Port Number"
   registry at <eref target="https://www.iana.org/assignments/service-names-port-numbers/"/> 
   for the services on ports 80 and 443 that use UDP or TCP to:
</t>
            <ol>
               <li>use this document as "Reference", and</li>
               <li>when currently unspecified, set "Assignee" to "IESG" and "Contact" to
   "IETF_Chair".</li>
            </ol>
         </section>
      </section>
   </middle>
   <back>
      <references>
         <name>References</name>
         <references>
            <name>Normative References</name>
            <reference anchor="Messaging"><!--included from draft-ietf-httpbis-messaging-latest.xml-->
               <front>
                  <title>HTTP/1.1 Messaging</title>
                  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
                     <organization>Adobe</organization>
                     <address>
                        <postal>
                           <street>345 Park Ave</street>
                           <city>San Jose</city>
                           <region>CA</region>
                           <code>95110</code>
                           <country>United States of America</country>
                        </postal>
                        <email>fielding@gbiv.com</email>
                        <uri>https://roy.gbiv.com/</uri>
                     </address>
                  </author>
                  <author fullname="Mark Nottingham" initials="M." role="editor" surname="Nottingham">
                     <organization>Fastly</organization>
                     <address>
                        <email>mnot@mnot.net</email>
                        <uri>https://www.mnot.net/</uri>
                     </address>
                  </author>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <postal>
                           <street>Hafenweg 16</street>
                           <city>Muenster</city>
                           <code>48155</code>
                           <country>Germany</country>
                        </postal>
                        <email>julian.reschke@greenbytes.de</email>
                        <uri>https://greenbytes.de/tech/webdav/</uri>
                     </address>
                  </author>
                  <date year="2020" month="January"/>
               </front>
               <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-messaging-latest"/>
            </reference>
            <reference anchor="Caching"><!--included from draft-ietf-httpbis-cache-latest.xml-->
               <front>
                  <title>HTTP Caching</title>
                  <author fullname="Roy T. Fielding" initials="R." surname="Fielding" role="editor">
                     <organization>Adobe</organization>
                     <address>
                        <postal>
                           <street>345 Park Ave</street>
                           <city>San Jose</city>
                           <region>CA</region>
                           <code>95110</code>
                           <country>United States of America</country>
                        </postal>
                        <email>fielding@gbiv.com</email>
                        <uri>https://roy.gbiv.com/</uri>
                     </address>
                  </author>
                  <author fullname="Mark Nottingham" initials="M." surname="Nottingham" role="editor">
                     <organization>Fastly</organization>
                     <address>
                        <email>mnot@mnot.net</email>
                        <uri>https://www.mnot.net/</uri>
                     </address>
                  </author>
                  <author fullname="Julian F. Reschke" initials="J. F." surname="Reschke" role="editor">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <postal>
                           <street>Hafenweg 16</street>
                           <city>Muenster</city>
                           <code>48155</code>
                           <country>Germany</country>
                        </postal>
                        <email>julian.reschke@greenbytes.de</email>
                        <uri>https://greenbytes.de/tech/webdav/</uri>
                     </address>
                  </author>
                  <date year="2020" month="January"/>
               </front>
               <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-cache-latest"/>
            </reference>
            <reference anchor="RFC2045" target="https://www.rfc-editor.org/info/rfc2045">
               <front>
                  <title abbrev="Internet Message Bodies">Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
                  <author initials="N." surname="Freed" fullname="Ned Freed">
                     <organization>Innosoft International, Inc.</organization>
                     <address>
                        <email>ned@innosoft.com</email>
                     </address>
                  </author>
                  <author initials="N.S." surname="Borenstein" fullname="Nathaniel S. Borenstein">
                     <organization>First Virtual Holdings</organization>
                     <address>
                        <email>nsb@nsb.fv.com</email>
                     </address>
                  </author>
                  <date month="November" year="1996"/>
               </front>
               <seriesInfo name="RFC" value="2045"/>
               <seriesInfo name="DOI" value="10.17487/RFC2045"/>
            </reference>
            <reference anchor="RFC2046" target="https://www.rfc-editor.org/info/rfc2046">
               <front>
                  <title abbrev="Media Types">Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</title>
                  <author initials="N." surname="Freed" fullname="Ned Freed">
                     <organization>Innosoft International, Inc.</organization>
                     <address>
                        <email>ned@innosoft.com</email>
                     </address>
                  </author>
                  <author initials="N." surname="Borenstein" fullname="Nathaniel S. Borenstein">
                     <organization>First Virtual Holdings</organization>
                     <address>
                        <email>nsb@nsb.fv.com</email>
                     </address>
                  </author>
                  <date month="November" year="1996"/>
               </front>
               <seriesInfo name="RFC" value="2046"/>
               <seriesInfo name="DOI" value="10.17487/RFC2046"/>
            </reference>
            <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
               <front>
                  <title>Key words for use in RFCs to Indicate Requirement Levels</title>
                  <author initials="S." surname="Bradner" fullname="Scott Bradner">
                     <organization>Harvard University</organization>
                     <address>
                        <email>sob@harvard.edu</email>
                     </address>
                  </author>
                  <date month="March" year="1997"/>
               </front>
               <seriesInfo name="BCP" value="14"/>
               <seriesInfo name="RFC" value="2119"/>
               <seriesInfo name="DOI" value="10.17487/RFC2119"/>
            </reference>
            <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
               <front>
                  <title abbrev="URI Generic Syntax">Uniform Resource Identifier (URI): Generic Syntax</title>
                  <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
                     <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
                     <address>
                        <email>timbl@w3.org</email>
                        <uri>http://www.w3.org/People/Berners-Lee/</uri>
                     </address>
                  </author>
                  <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
                     <organization abbrev="Day Software">Day Software</organization>
                     <address>
                        <email>fielding@gbiv.com</email>
                        <uri>http://roy.gbiv.com/</uri>
                     </address>
                  </author>
                  <author initials="L." surname="Masinter" fullname="Larry Masinter">
                     <organization>Adobe</organization>
                     <address>
                        <email>LMM@acm.org</email>
                        <uri>http://larry.masinter.net/</uri>
                     </address>
                  </author>
                  <date month="January" year="2005"/>
               </front>
               <seriesInfo name="STD" value="66"/>
               <seriesInfo name="RFC" value="3986"/>
               <seriesInfo name="DOI" value="10.17487/RFC3986"/>
            </reference>
            <reference anchor="RFC0793" target="https://www.rfc-editor.org/info/rfc793">
               <front>
                  <title>Transmission Control Protocol</title>
                  <author initials="J." surname="Postel" fullname="Jon Postel">
                     <organization>University of Southern California (USC)/Information Sciences Institute</organization>
                  </author>
                  <date year="1981" month="September"/>
               </front>
               <seriesInfo name="STD" value="7"/>
               <seriesInfo name="RFC" value="793"/>
               <seriesInfo name="DOI" value="10.17487/RFC0793"/>
            </reference>
            <reference anchor="RFC4647" target="https://www.rfc-editor.org/info/rfc4647">
               <front>
                  <title>Matching of Language Tags</title>
                  <author initials="A." surname="Phillips" fullname="Addison Phillips" role="editor">
                     <organization>Yahoo! Inc.</organization>
                     <address>
                        <email>addison@inter-locale.com</email>
                     </address>
                  </author>
                  <author initials="M." surname="Davis" fullname="Mark Davis" role="editor">
                     <organization>Google</organization>
                     <address>
                        <email>mark.davis@macchiato.com</email>
                     </address>
                  </author>
                  <date year="2006" month="September"/>
               </front>
               <seriesInfo name="BCP" value="47"/>
               <seriesInfo name="RFC" value="4647"/>
               <seriesInfo name="DOI" value="10.17487/RFC4647"/>
            </reference>
            <reference anchor="RFC4648" target="https://www.rfc-editor.org/info/rfc4648">
               <front>
                  <title>The Base16, Base32, and Base64 Data Encodings</title>
                  <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
                  <date year="2006" month="October"/>
               </front>
               <seriesInfo name="RFC" value="4648"/>
               <seriesInfo name="DOI" value="10.17487/RFC4648"/>
            </reference>
            <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234">
               <front>
                  <title abbrev="ABNF for Syntax Specifications">Augmented BNF for Syntax Specifications: ABNF</title>
                  <author initials="D." surname="Crocker" fullname="Dave Crocker" role="editor">
                     <organization>Brandenburg InternetWorking</organization>
                     <address>
                        <email>dcrocker@bbiw.net</email>
                     </address>
                  </author>
                  <author initials="P." surname="Overell" fullname="Paul Overell">
                     <organization>THUS plc.</organization>
                     <address>
                        <email>paul.overell@thus.net</email>
                     </address>
                  </author>
                  <date month="January" year="2008"/>
               </front>
               <seriesInfo name="STD" value="68"/>
               <seriesInfo name="RFC" value="5234"/>
               <seriesInfo name="DOI" value="10.17487/RFC5234"/>
            </reference>
            <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280">
               <front>
                  <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
                  <author initials="D." surname="Cooper" fullname="D. Cooper"/>
                  <author initials="S." surname="Santesson" fullname="S. Santesson"/>
                  <author initials="S." surname="Farrell" fullname="S. Farrell"/>
                  <author initials="S." surname="Boeyen" fullname="S. Boeyen"/>
                  <author initials="R." surname="Housley" fullname="R. Housley"/>
                  <author initials="W." surname="Polk" fullname="W. Polk"/>
                  <date year="2008" month="May"/>
               </front>
               <seriesInfo name="RFC" value="5280"/>
               <seriesInfo name="DOI" value="10.17487/RFC5280"/>
            </reference>
            <reference anchor="RFC5646" target="https://www.rfc-editor.org/info/rfc5646">
               <front>
                  <title>Tags for Identifying Languages</title>
                  <author initials="A." surname="Phillips" fullname="Addison Phillips" role="editor">
                     <organization>Lab126</organization>
                     <address>
                        <email>addison@inter-locale.com</email>
                     </address>
                  </author>
                  <author initials="M." surname="Davis" fullname="Mark Davis" role="editor">
                     <organization>Google</organization>
                     <address>
                        <email>mark.davis@google.com</email>
                     </address>
                  </author>
                  <date month="September" year="2009"/>
               </front>
               <seriesInfo name="BCP" value="47"/>
               <seriesInfo name="RFC" value="5646"/>
               <seriesInfo name="DOI" value="10.17487/RFC5646"/>
            </reference>
            <reference anchor="RFC6365" target="https://www.rfc-editor.org/info/rfc6365">
               <front>
                  <title>Terminology Used in Internationalization in the IETF</title>
                  <author initials="P." surname="Hoffman" fullname="P. Hoffman"/>
                  <author initials="J." surname="Klensin" fullname="J. Klensin"/>
                  <date year="2011" month="September"/>
               </front>
               <seriesInfo name="BCP" value="166"/>
               <seriesInfo name="RFC" value="6365"/>
               <seriesInfo name="DOI" value="10.17487/RFC6365"/>
            </reference>
            <reference anchor="RFC7405" target="https://www.rfc-editor.org/info/rfc7405">
               <front>
                  <title>Case-Sensitive String Support in ABNF</title>
                  <author initials="P." surname="Kyzivat" fullname="Dave Kyzivat">
                     <address>
                        <email>pkyzivat@alum.mit.edu</email>
                     </address>
                  </author>
                  <date month="December" year="2014"/>
               </front>
               <seriesInfo name="RFC" value="7405"/>
               <seriesInfo name="DOI" value="10.17487/RFC7405"/>
            </reference>
            <reference anchor="USASCII">
               <front>
                  <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
                  <author>
                     <organization>American National Standards Institute</organization>
                  </author>
                  <date year="1986"/>
               </front>
               <seriesInfo name="ANSI" value="X3.4"/>
            </reference>
            <reference anchor="RFC1950" target="https://www.rfc-editor.org/info/rfc1950">
               <front>
                  <title>ZLIB Compressed Data Format Specification version 3.3</title>
                  <author initials="L.P." surname="Deutsch" fullname="L. Peter Deutsch">
                     <organization>Aladdin Enterprises</organization>
                     <address>
                        <email>ghost@aladdin.com</email>
                     </address>
                  </author>
                  <author initials="J-L." surname="Gailly" fullname="Jean-Loup Gailly"/>
                  <date month="May" year="1996"/>
               </front>
               <seriesInfo name="RFC" value="1950"/>
               <seriesInfo name="DOI" value="10.17487/RFC1950"/>
            </reference>
            <reference anchor="RFC1951" target="https://www.rfc-editor.org/info/rfc1951">
               <front>
                  <title>DEFLATE Compressed Data Format Specification version 1.3</title>
                  <author initials="P." surname="Deutsch" fullname="L. Peter Deutsch">
                     <organization>Aladdin Enterprises</organization>
                     <address>
                        <email>ghost@aladdin.com</email>
                     </address>
                  </author>
                  <date month="May" year="1996"/>
               </front>
               <seriesInfo name="RFC" value="1951"/>
               <seriesInfo name="DOI" value="10.17487/RFC1951"/>
            </reference>
            <reference anchor="RFC1952" target="https://www.rfc-editor.org/info/rfc1952">
               <front>
                  <title>GZIP file format specification version 4.3</title>
                  <author initials="P." surname="Deutsch" fullname="L. Peter Deutsch">
                     <organization>Aladdin Enterprises</organization>
                     <address>
                        <email>ghost@aladdin.com</email>
                     </address>
                  </author>
                  <author initials="J-L." surname="Gailly" fullname="Jean-Loup Gailly">
                     <address>
                        <email>gzip@prep.ai.mit.edu</email>
                     </address>
                  </author>
                  <author initials="M." surname="Adler" fullname="Mark Adler">
                     <address>
                        <email>madler@alumni.caltech.edu</email>
                     </address>
                  </author>
                  <author initials="L.P." surname="Deutsch" fullname="L. Peter Deutsch">
                     <address>
                        <email>ghost@aladdin.com</email>
                     </address>
                  </author>
                  <author initials="G." surname="Randers-Pehrson" fullname="Glenn Randers-Pehrson">
                     <address>
                        <email>randeg@alumni.rpi.edu</email>
                     </address>
                  </author>
                  <date month="May" year="1996"/>
               </front>
               <seriesInfo name="RFC" value="1952"/>
               <seriesInfo name="DOI" value="10.17487/RFC1952"/>
            </reference>
            <reference anchor="Welch" target="https://ieeexplore.ieee.org/document/1659158/">
               <front>
                  <title>A Technique for High-Performance Data Compression</title>
                  <author initials="T. A." surname="Welch" fullname="Terry A. Welch"/>
                  <date month="June" year="1984"/>
               </front>
               <seriesInfo name="IEEE Computer" value="17(6)"/>
               <seriesInfo name="DOI" value="10.1109/MC.1984.1659158"/>
            </reference>
         </references>
         <references>
            <name>Informative References</name>
            <reference anchor="Err1912" target="https://www.rfc-editor.org/errata/eid1912" quote-title="false">
               <front>
                  <title>Erratum ID 1912, RFC 2978</title>
                  <author>
                     <organization>RFC Errata</organization>
                  </author>
                  <date/>
               </front>
            </reference>
            <reference anchor="Err5433" target="https://www.rfc-editor.org/errata/eid5433" quote-title="false">
               <front>
                  <title>Erratum ID 5433, RFC 2978</title>
                  <author>
                     <organization>RFC Errata</organization>
                  </author>
                  <date/>
               </front>
            </reference>
            <reference anchor="Georgiev" target="http://doi.acm.org/10.1145/2382196.2382204">
               <front>
                  <title>The Most Dangerous Code in the World: Validating SSL Certificates in Non-browser Software</title>
                  <author initials="M." surname="Georgiev" fullname="Martin Georgiev"/>
                  <author initials="S." surname="Iyengar" fullname="Subodh Iyengar"/>
                  <author initials="S." surname="Jana" fullname="Suman Jana"/>
                  <author initials="R." surname="Anubhai" fullname="Rishita Anubhai"/>
                  <author initials="D." surname="Boneh" fullname="Dan Boneh"/>
                  <author initials="V." surname="Shmatikov" fullname="Vitaly Shmatikov"/>
                  <date year="2012" month="October"/>
               </front><!--Converted from rfc2629.xslt refcontent extension-->
               <seriesInfo name="In" value="Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS '12), pp. 38-49"/>
            </reference>
            <reference anchor="ISO-8859-1">
               <front>
                  <title>
     Information technology -- 8-bit single-byte coded graphic character sets -- Part 1: Latin alphabet No. 1
    </title>
                  <author>
                     <organization>International Organization for Standardization</organization>
                  </author>
                  <date year="1998"/>
               </front>
               <seriesInfo name="ISO/IEC" value="8859-1:1998"/>
            </reference>
            <reference anchor="Kri2001" target="http://arxiv.org/abs/cs.SE/0105018">
               <front>
                  <title>HTTP Cookies: Standards, Privacy, and Politics</title>
                  <author initials="D." surname="Kristol" fullname="David M. Kristol"/>
                  <date year="2001" month="November"/>
               </front>
               <seriesInfo name="ACM Transactions on Internet Technology" value="1(2)"/>
            </reference>
            <reference anchor="Sniffing" target="https://mimesniff.spec.whatwg.org">
               <front>
                  <title>MIME Sniffing</title>
                  <author>
                     <organization>WHATWG</organization>
                  </author>
                  <date/>
               </front>
            </reference>
            <reference anchor="REST" target="https://roy.gbiv.com/pubs/dissertation/top.htm">
               <front>
                  <title>Architectural Styles and the Design of Network-based Software Architectures</title>
                  <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding"/>
                  <date month="September" year="2000"/>
               </front><!--Converted from rfc2629.xslt refcontent extension-->
               <seriesInfo name="Doctoral" value="Dissertation, University of California, Irvine"/>
            </reference>
            <reference anchor="RFC1919" target="https://www.rfc-editor.org/info/rfc1919">
               <front>
                  <title>Classical versus Transparent IP Proxies</title>
                  <author initials="M." surname="Chatel" fullname="Marc Chatel">
                     <address>
                        <email>mchatel@pax.eunet.ch</email>
                     </address>
                  </author>
                  <date year="1996" month="March"/>
               </front>
               <seriesInfo name="RFC" value="1919"/>
               <seriesInfo name="DOI" value="10.17487/RFC1919"/>
            </reference>
            <reference anchor="RFC1945" target="https://www.rfc-editor.org/info/rfc1945">
               <front>
                  <title abbrev="HTTP/1.0">Hypertext Transfer Protocol -- HTTP/1.0</title>
                  <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
                     <organization>MIT, Laboratory for Computer Science</organization>
                     <address>
                        <email>timbl@w3.org</email>
                     </address>
                  </author>
                  <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
                     <organization>University of California, Irvine, Department of Information and Computer Science</organization>
                     <address>
                        <email>fielding@ics.uci.edu</email>
                     </address>
                  </author>
                  <author initials="H.F." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
                     <organization>W3 Consortium, MIT Laboratory for Computer Science</organization>
                     <address>
                        <email>frystyk@w3.org</email>
                     </address>
                  </author>
                  <date month="May" year="1996"/>
               </front>
               <seriesInfo name="RFC" value="1945"/>
               <seriesInfo name="DOI" value="10.17487/RFC1945"/>
            </reference>
            <reference anchor="RFC2047" target="https://www.rfc-editor.org/info/rfc2047">
               <front>
                  <title abbrev="Message Header Extensions">MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non-ASCII Text</title>
                  <author initials="K." surname="Moore" fullname="Keith Moore">
                     <organization>University of Tennessee</organization>
                     <address>
                        <email>moore@cs.utk.edu</email>
                     </address>
                  </author>
                  <date month="November" year="1996"/>
               </front>
               <seriesInfo name="RFC" value="2047"/>
               <seriesInfo name="DOI" value="10.17487/RFC2047"/>
            </reference>
            <reference anchor="RFC2068" target="https://www.rfc-editor.org/info/rfc2068">
               <front>
                  <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
                  <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
                     <organization>University of California, Irvine, Department of Information and Computer Science</organization>
                     <address>
                        <email>fielding@ics.uci.edu</email>
                     </address>
                  </author>
                  <author initials="J." surname="Gettys" fullname="Jim Gettys">
                     <organization>MIT Laboratory for Computer Science</organization>
                     <address>
                        <email>jg@w3.org</email>
                     </address>
                  </author>
                  <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
                     <organization>Digital Equipment Corporation, Western Research Laboratory</organization>
                     <address>
                        <email>mogul@wrl.dec.com</email>
                     </address>
                  </author>
                  <author initials="H." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
                     <organization>MIT Laboratory for Computer Science</organization>
                     <address>
                        <email>frystyk@w3.org</email>
                     </address>
                  </author>
                  <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
                     <organization>MIT Laboratory for Computer Science</organization>
                     <address>
                        <email>timbl@w3.org</email>
                     </address>
                  </author>
                  <date month="January" year="1997"/>
               </front>
               <seriesInfo name="RFC" value="2068"/>
               <seriesInfo name="DOI" value="10.17487/RFC2068"/>
            </reference>
            <reference anchor="RFC2145" target="https://www.rfc-editor.org/info/rfc2145">
               <front>
                  <title abbrev="HTTP Version Numbers">Use and Interpretation of HTTP Version Numbers</title>
                  <author initials="J.C." surname="Mogul" fullname="Jeffrey C. Mogul">
                     <organization>Western Research Laboratory</organization>
                     <address>
                        <email>mogul@wrl.dec.com</email>
                     </address>
                  </author>
                  <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
                     <organization>Department of Information and Computer Science</organization>
                     <address>
                        <email>fielding@ics.uci.edu</email>
                     </address>
                  </author>
                  <author initials="J." surname="Gettys" fullname="Jim Gettys">
                     <organization>MIT Laboratory for Computer Science</organization>
                     <address>
                        <email>jg@w3.org</email>
                     </address>
                  </author>
                  <author initials="H.F." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
                     <organization>W3 Consortium</organization>
                     <address>
                        <email>frystyk@w3.org</email>
                     </address>
                  </author>
                  <date month="May" year="1997"/>
               </front>
               <seriesInfo name="RFC" value="2145"/>
               <seriesInfo name="DOI" value="10.17487/RFC2145"/>
            </reference>
            <reference anchor="RFC2295" target="https://www.rfc-editor.org/info/rfc2295">
               <front>
                  <title abbrev="HTTP Content Negotiation">Transparent Content Negotiation in HTTP</title>
                  <author initials="K." surname="Holtman" fullname="Koen Holtman">
                     <organization>Technische Universiteit Eindhoven</organization>
                     <address>
                        <email>koen@win.tue.nl</email>
                     </address>
                  </author>
                  <author initials="A.H." surname="Mutz" fullname="Andrew H. Mutz">
                     <organization>Hewlett-Packard Company</organization>
                     <address>
                        <email>mutz@hpl.hp.com</email>
                     </address>
                  </author>
                  <date year="1998" month="March"/>
               </front>
               <seriesInfo name="RFC" value="2295"/>
               <seriesInfo name="DOI" value="10.17487/RFC2295"/>
            </reference>
            <reference anchor="RFC2324" target="https://www.rfc-editor.org/info/rfc2324">
               <front>
                  <title>Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)</title>
                  <author initials="L." surname="Masinter" fullname="L. Masinter"/>
                  <date year="1998" month="April" day="1"/>
               </front>
               <seriesInfo name="RFC" value="2324"/>
               <seriesInfo name="DOI" value="10.17487/RFC2324"/>
            </reference>
            <reference anchor="RFC2557" target="https://www.rfc-editor.org/info/rfc2557">
               <front>
                  <title abbrev="MIME Encapsulation of Aggregate Documents">MIME Encapsulation of Aggregate Documents, such as HTML (MHTML)</title>
                  <author initials="F." surname="Palme" fullname="Jacob Palme">
                     <organization>Stockholm University and KTH</organization>
                     <address>
                        <email>jpalme@dsv.su.se</email>
                     </address>
                  </author>
                  <author initials="A." surname="Hopmann" fullname="Alex Hopmann">
                     <organization>Microsoft Corporation</organization>
                     <address>
                        <email>alexhop@microsoft.com</email>
                     </address>
                  </author>
                  <author initials="N." surname="Shelness" fullname="Nick Shelness">
                     <organization>Lotus Development Corporation</organization>
                     <address>
                        <email>Shelness@lotus.com</email>
                     </address>
                  </author>
                  <author initials="E." surname="Stefferud" fullname="Einar Stefferud">
                     <address>
                        <email>stef@nma.com</email>
                     </address>
                  </author>
                  <date year="1999" month="March"/>
               </front>
               <seriesInfo name="RFC" value="2557"/>
               <seriesInfo name="DOI" value="10.17487/RFC2557"/>
            </reference>
            <reference anchor="RFC2616" target="https://www.rfc-editor.org/info/rfc2616">
               <front>
                  <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
                  <author initials="R." surname="Fielding" fullname="R. Fielding">
                     <organization>University of California, Irvine</organization>
                     <address>
                        <email>fielding@ics.uci.edu</email>
                     </address>
                  </author>
                  <author initials="J." surname="Gettys" fullname="J. Gettys">
                     <organization>W3C</organization>
                     <address>
                        <email>jg@w3.org</email>
                     </address>
                  </author>
                  <author initials="J." surname="Mogul" fullname="J. Mogul">
                     <organization>Compaq Computer Corporation</organization>
                     <address>
                        <email>mogul@wrl.dec.com</email>
                     </address>
                  </author>
                  <author initials="H." surname="Frystyk" fullname="H. Frystyk">
                     <organization>MIT Laboratory for Computer Science</organization>
                     <address>
                        <email>frystyk@w3.org</email>
                     </address>
                  </author>
                  <author initials="L." surname="Masinter" fullname="L. Masinter">
                     <organization>Xerox Corporation</organization>
                     <address>
                        <email>masinter@parc.xerox.com</email>
                     </address>
                  </author>
                  <author initials="P." surname="Leach" fullname="P. Leach">
                     <organization>Microsoft Corporation</organization>
                     <address>
                        <email>paulle@microsoft.com</email>
                     </address>
                  </author>
                  <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
                     <organization>W3C</organization>
                     <address>
                        <email>timbl@w3.org</email>
                     </address>
                  </author>
                  <date month="June" year="1999"/>
               </front>
               <seriesInfo name="RFC" value="2616"/>
               <seriesInfo name="DOI" value="10.17487/RFC2616"/>
            </reference>
            <reference anchor="RFC2617" target="https://www.rfc-editor.org/info/rfc2617">
               <front>
                  <title abbrev="HTTP Authentication">HTTP Authentication: Basic and Digest Access Authentication</title>
                  <author initials="J." surname="Franks" fullname="John Franks">
                     <organization>Northwestern University, Department of Mathematics</organization>
                     <address>
                        <email>john@math.nwu.edu</email>
                     </address>
                  </author>
                  <author initials="P.M." surname="Hallam-Baker" fullname="Phillip M. Hallam-Baker">
                     <organization>Verisign Inc.</organization>
                     <address>
                        <email>pbaker@verisign.com</email>
                     </address>
                  </author>
                  <author initials="J.L." surname="Hostetler" fullname="Jeffery L. Hostetler">
                     <organization>AbiSource, Inc.</organization>
                     <address>
                        <email>jeff@AbiSource.com</email>
                     </address>
                  </author>
                  <author initials="S.D." surname="Lawrence" fullname="Scott D. Lawrence">
                     <organization>Agranat Systems, Inc.</organization>
                     <address>
                        <email>lawrence@agranat.com</email>
                     </address>
                  </author>
                  <author initials="P.J." surname="Leach" fullname="Paul J. Leach">
                     <organization>Microsoft Corporation</organization>
                     <address>
                        <email>paulle@microsoft.com</email>
                     </address>
                  </author>
                  <author initials="A." surname="Luotonen" fullname="Ari Luotonen">
                     <organization>Netscape Communications Corporation</organization>
                  </author>
                  <author initials="L." surname="Stewart" fullname="Lawrence C. Stewart">
                     <organization>Open Market, Inc.</organization>
                     <address>
                        <email>stewart@OpenMarket.com</email>
                     </address>
                  </author>
                  <date month="June" year="1999"/>
               </front>
               <seriesInfo name="RFC" value="2617"/>
               <seriesInfo name="DOI" value="10.17487/RFC2617"/>
            </reference>
            <reference anchor="RFC2774" target="https://www.rfc-editor.org/info/rfc2774">
               <front>
                  <title>An HTTP Extension Framework</title>
                  <author initials="H." surname="Frystyk" fullname="H. Frystyk">
                     <address>
                        <email>frystyk@w3.org</email>
                     </address>
                  </author>
                  <author initials="P." surname="Leach" fullname="Paul J. Leach">
                     <address>
                        <email>paulle@microsoft.com</email>
                     </address>
                  </author>
                  <author initials="S." surname="Lawrence" fullname="Scott Lawrence">
                     <address>
                        <email>lawrence@agranat.com</email>
                     </address>
                  </author>
                  <date year="2000" month="February"/>
               </front>
               <seriesInfo name="RFC" value="2774"/>
               <seriesInfo name="DOI" value="10.17487/RFC2774"/>
            </reference>
            <reference anchor="RFC2818" target="https://www.rfc-editor.org/info/rfc2818">
               <front>
                  <title>HTTP Over TLS</title>
                  <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
                     <organization>RTFM, Inc.</organization>
                     <address>
                        <email>ekr@rtfm.com</email>
                     </address>
                  </author>
                  <date year="2000" month="May"/>
               </front>
               <seriesInfo name="RFC" value="2818"/>
               <seriesInfo name="DOI" value="10.17487/RFC2818"/>
            </reference>
            <reference anchor="RFC2978" target="https://www.rfc-editor.org/info/rfc2978">
               <front>
                  <title>IANA Charset Registration Procedures</title>
                  <author initials="N." surname="Freed" fullname="N. Freed"/>
                  <author initials="J." surname="Postel" fullname="J. Postel"/>
                  <date year="2000" month="October"/>
               </front>
               <seriesInfo name="BCP" value="19"/>
               <seriesInfo name="RFC" value="2978"/>
               <seriesInfo name="DOI" value="10.17487/RFC2978"/>
            </reference>
            <reference anchor="RFC3040" target="https://www.rfc-editor.org/info/rfc3040">
               <front>
                  <title>Internet Web Replication and Caching Taxonomy</title>
                  <author initials="I." surname="Cooper" fullname="I. Cooper">
                     <organization>Equinix, Inc.</organization>
                  </author>
                  <author initials="I." surname="Melve" fullname="I. Melve">
                     <organization>UNINETT</organization>
                  </author>
                  <author initials="G." surname="Tomlinson" fullname="G. Tomlinson">
                     <organization>CacheFlow Inc.</organization>
                  </author>
                  <date year="2001" month="January"/>
               </front>
               <seriesInfo name="RFC" value="3040"/>
               <seriesInfo name="DOI" value="10.17487/RFC3040"/>
            </reference>
            <reference anchor="RFC4033" target="https://www.rfc-editor.org/info/rfc4033">
               <front>
                  <title>DNS Security Introduction and Requirements</title>
                  <author initials="R." surname="Arends" fullname="R. Arends"/>
                  <author initials="R." surname="Austein" fullname="R. Austein"/>
                  <author initials="M." surname="Larson" fullname="M. Larson"/>
                  <author initials="D." surname="Massey" fullname="D. Massey"/>
                  <author initials="S." surname="Rose" fullname="S. Rose"/>
                  <date year="2005" month="March"/>
               </front>
               <seriesInfo name="RFC" value="4033"/>
               <seriesInfo name="DOI" value="10.17487/RFC4033"/>
            </reference>
            <reference anchor="RFC4559" target="https://www.rfc-editor.org/info/rfc4559">
               <front>
                  <title>SPNEGO-based Kerberos and NTLM HTTP Authentication in Microsoft Windows</title>
                  <author initials="K." surname="Jaganathan" fullname="K. Jaganathan"/>
                  <author initials="L." surname="Zhu" fullname="L. Zhu"/>
                  <author initials="J." surname="Brezak" fullname="J. Brezak"/>
                  <date year="2006" month="June"/>
               </front>
               <seriesInfo name="RFC" value="4559"/>
               <seriesInfo name="DOI" value="10.17487/RFC4559"/>
            </reference>
            <reference anchor="RFC4918" target="https://www.rfc-editor.org/info/rfc4918">
               <front>
                  <title>HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)</title>
                  <author initials="L.M." surname="Dusseault" fullname="Lisa Dusseault" role="editor">
                     <organization abbrev="CommerceNet">CommerceNet</organization>
                     <address>
                        <email>ldusseault@commerce.net</email>
                     </address>
                  </author>
                  <date month="June" year="2007"/>
               </front>
               <seriesInfo name="RFC" value="4918"/>
               <seriesInfo name="DOI" value="10.17487/RFC4918"/>
            </reference>
            <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
               <front>
                  <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
                  <author initials="E." surname="Rescorla" fullname="E. Rescorla">
                     <organization/>
                  </author>
                  <date year="2018" month="August"/>
               </front>
               <seriesInfo name="RFC" value="8446"/>
               <seriesInfo name="DOI" value="10.17487/RFC8446"/>
            </reference>
            <reference anchor="RFC5905" target="https://www.rfc-editor.org/info/rfc5905">
               <front>
                  <title>Network Time Protocol Version 4: Protocol and Algorithms Specification</title>
                  <author initials="D." surname="Mills" fullname="David L. Mills"/>
                  <author initials="J." surname="Martin" fullname="Jim Martin" role="editor"/>
                  <author initials="J." surname="Burbank" fullname="Jack Burbank"/>
                  <author initials="W." surname="Kasch" fullname="William Kasch"/>
                  <date year="2010" month="June"/>
               </front>
               <seriesInfo name="RFC" value="5905"/>
               <seriesInfo name="DOI" value="10.17487/RFC5905"/>
            </reference>
            <reference anchor="RFC6454" target="https://www.rfc-editor.org/info/rfc6454">
               <front>
                  <title>The Web Origin Concept</title>
                  <author initials="A." surname="Barth" fullname="A. Barth"/>
                  <date year="2011" month="December"/>
               </front>
               <seriesInfo name="RFC" value="6454"/>
               <seriesInfo name="DOI" value="10.17487/RFC6454"/>
            </reference>
            <reference anchor="RFC7230" target="https://www.rfc-editor.org/info/rfc7230">
               <front>
                  <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
                  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
                     <organization>Adobe</organization>
                     <address>
                        <email>fielding@gbiv.com</email>
                     </address>
                  </author>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <email>julian.reschke@greenbytes.de</email>
                     </address>
                  </author>
                  <date month="June" year="2014"/>
               </front>
               <seriesInfo name="RFC" value="7230"/>
               <seriesInfo name="DOI" value="10.17487/RFC7230"/>
            </reference>
            <reference anchor="RFC7231" target="https://www.rfc-editor.org/info/rfc7231">
               <front>
                  <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
                  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
                     <organization>Adobe</organization>
                     <address>
                        <email>fielding@gbiv.com</email>
                     </address>
                  </author>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <email>julian.reschke@greenbytes.de</email>
                     </address>
                  </author>
                  <date month="June" year="2014"/>
               </front>
               <seriesInfo name="RFC" value="7231"/>
               <seriesInfo name="DOI" value="10.17487/RFC7231"/>
            </reference>
            <reference anchor="RFC7232" target="https://www.rfc-editor.org/info/rfc7232">
               <front>
                  <title>Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</title>
                  <author fullname="Roy T. Fielding" initials="R." role="editor" surname="Fielding">
                     <organization>Adobe</organization>
                     <address>
                        <email>fielding@gbiv.com</email>
                     </address>
                  </author>
                  <author fullname="Julian F. Reschke" initials="J. F." role="editor" surname="Reschke">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <email>julian.reschke@greenbytes.de</email>
                     </address>
                  </author>
                  <date month="June" year="2014"/>
               </front>
               <seriesInfo name="RFC" value="7232"/>
               <seriesInfo name="DOI" value="10.17487/RFC7232"/>
            </reference>
            <reference anchor="RFC7233" target="https://www.rfc-editor.org/info/rfc7233">
               <front>
                  <title>Hypertext Transfer Protocol (HTTP): Range Requests</title>
                  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
                     <organization>Adobe</organization>
                     <address>
                        <email>fielding@gbiv.com</email>
                     </address>
                  </author>
                  <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
                     <organization abbrev="W3C">World Wide Web Consortium</organization>
                     <address>
                        <email>ylafon@w3.org</email>
                     </address>
                  </author>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <email>julian.reschke@greenbytes.de</email>
                     </address>
                  </author>
                  <date month="June" year="2014"/>
               </front>
               <seriesInfo name="RFC" value="7233"/>
               <seriesInfo name="DOI" value="10.17487/RFC7233"/>
            </reference>
            <reference anchor="RFC7235" target="https://www.rfc-editor.org/info/rfc7235">
               <front>
                  <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
                  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
                     <organization>Adobe</organization>
                     <address>
                        <email>fielding@gbiv.com</email>
                     </address>
                  </author>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <email>julian.reschke@greenbytes.de</email>
                     </address>
                  </author>
                  <date month="June" year="2014"/>
               </front>
               <seriesInfo name="RFC" value="7235"/>
               <seriesInfo name="DOI" value="10.17487/RFC7235"/>
            </reference>
            <reference anchor="RFC7578" target="https://www.rfc-editor.org/info/rfc7578">
               <front>
                  <title>Returning Values from Forms: multipart/form-data</title>
                  <author initials="L." surname="Masinter" fullname="Larry Masinter"/>
                  <date year="2015" month="July"/>
               </front>
               <seriesInfo name="RFC" value="7578"/>
               <seriesInfo name="DOI" value="10.17487/RFC7578"/>
            </reference>
            <reference anchor="RFC7615" target="https://www.rfc-editor.org/info/rfc7615">
               <front>
                  <title>HTTP Authentication-Info and Proxy-Authentication-Info Response Header Fields</title>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <email>julian.reschke@greenbytes.de</email>
                     </address>
                  </author>
                  <date year="2015" month="September"/>
               </front>
               <seriesInfo name="RFC" value="7615"/>
               <seriesInfo name="DOI" value="10.17487/RFC7615"/>
            </reference>
            <reference anchor="RFC7838" target="https://www.rfc-editor.org/info/rfc7838">
               <front>
                  <title>HTTP Alternative Services</title>
                  <author initials="M." surname="Nottingham" fullname="M. Nottingham"/>
                  <author initials="P." surname="McManus" fullname="P. McManus"/>
                  <author initials="J." surname="Reschke" fullname="J. Reschke"/>
                  <date year="2016" month="April"/>
               </front>
               <seriesInfo name="RFC" value="7838"/>
               <seriesInfo name="DOI" value="10.17487/RFC7838"/>
            </reference>
            <reference anchor="RFC8336" target="https://www.rfc-editor.org/info/rfc8336">
               <front>
                  <title>The ORIGIN HTTP/2 Frame</title>
                  <author initials="M." surname="Nottingham" fullname="M. Nottingham"/>
                  <author initials="E." surname="Nygren" fullname="E. Nygren"/>
                  <date year="2018" month="March"/>
               </front>
               <seriesInfo name="RFC" value="8336"/>
               <seriesInfo name="DOI" value="10.17487/RFC8336"/>
            </reference>
            <reference anchor="BCP13" target="https://www.rfc-editor.org/info/bcp13">
               <front>
                  <title>Media Type Specifications and Registration Procedures</title>
                  <author initials="N." surname="Freed" fullname="Ned Freed">
                     <organization>Oracle</organization>
                     <address>
                        <email>ned+ietf@mrochek.com</email>
                     </address>
                  </author>
                  <author initials="J." surname="Klensin" fullname="John C. Klensin">
                     <address>
                        <email>john+ietf@jck.com</email>
                     </address>
                  </author>
                  <author initials="T." surname="Hansen" fullname="Tony Hansen">
                     <organization>AT&amp;T Laboratories</organization>
                     <address>
                        <email>tony+mtsuffix@maillennium.att.com</email>
                     </address>
                  </author>
                  <date year="2013" month="January"/>
               </front>
               <seriesInfo name="BCP" value="13"/>
               <seriesInfo name="RFC" value="6838"/>
            </reference>
            <reference anchor="BCP35" target="https://www.rfc-editor.org/info/bcp35">
               <front>
                  <title>Guidelines and Registration Procedures for URI Schemes</title>
                  <author initials="D." surname="Thaler" fullname="Dave Thaler" role="editor"/>
                  <author initials="T." surname="Hansen" fullname="Tony Hansen"/>
                  <author initials="T." surname="Hardie" fullname="Ted Hardie"/>
                  <date year="2015" month="June"/>
               </front>
               <seriesInfo name="BCP" value="35"/>
               <seriesInfo name="RFC" value="7595"/>
            </reference>
            <reference anchor="BCP90" target="https://www.rfc-editor.org/info/bcp90">
               <front>
                  <title>Registration Procedures for Message Header Fields</title>
                  <author initials="G." surname="Klyne" fullname="G. Klyne">
                     <organization>Nine by Nine</organization>
                     <address>
                        <email>GK-IETF@ninebynine.org</email>
                     </address>
                  </author>
                  <author initials="M." surname="Nottingham" fullname="M. Nottingham">
                     <organization>BEA Systems</organization>
                     <address>
                        <email>mnot@pobox.com</email>
                     </address>
                  </author>
                  <author initials="J." surname="Mogul" fullname="J. Mogul">
                     <organization>HP Labs</organization>
                     <address>
                        <email>JeffMogul@acm.org</email>
                     </address>
                  </author>
                  <date year="2004" month="September"/>
               </front>
               <seriesInfo name="BCP" value="90"/>
               <seriesInfo name="RFC" value="3864"/>
            </reference>
            <reference anchor="BCP178" target="https://www.rfc-editor.org/info/bcp178">
               <front>
                  <title>Deprecating the "X-" Prefix and Similar Constructs in Application Protocols</title>
                  <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre"/>
                  <author initials="D." surname="Crocker" fullname="Dave Crocker"/>
                  <author initials="M." surname="Nottingham" fullname="Mark Nottingham"/>
                  <date year="2012" month="June"/>
               </front>
               <seriesInfo name="BCP" value="178"/>
               <seriesInfo name="RFC" value="6648"/>
            </reference>
            <reference anchor="RFC5322" target="https://www.rfc-editor.org/info/rfc5322">
               <front>
                  <title>Internet Message Format</title>
                  <author initials="P." surname="Resnick" fullname="P. Resnick">
                     <organization>Qualcomm Incorporated</organization>
                  </author>
                  <date year="2008" month="October"/>
               </front>
               <seriesInfo name="RFC" value="5322"/>
               <seriesInfo name="DOI" value="10.17487/RFC5322"/>
            </reference>
            <reference anchor="RFC5789" target="https://www.rfc-editor.org/info/rfc5789">
               <front>
                  <title>PATCH Method for HTTP</title>
                  <author initials="L." surname="Dusseault" fullname="L. Dusseault">
                     <organization>Linden Lab</organization>
                  </author>
                  <author initials="J." surname="Snell" fullname="J. Snell"/>
                  <date year="2010" month="March"/>
               </front>
               <seriesInfo name="RFC" value="5789"/>
               <seriesInfo name="DOI" value="10.17487/RFC5789"/>
            </reference>
            <reference anchor="RFC6265" target="https://www.rfc-editor.org/info/rfc6265">
               <front>
                  <title>HTTP State Management Mechanism</title>
                  <author initials="A." surname="Barth" fullname="Adam Barth">
                     <organization abbrev="U.C. Berkeley">
        University of California, Berkeley
      </organization>
                     <address>
                        <email>abarth@eecs.berkeley.edu</email>
                     </address>
                  </author>
                  <date year="2011" month="April"/>
               </front>
               <seriesInfo name="RFC" value="6265"/>
               <seriesInfo name="DOI" value="10.17487/RFC6265"/>
            </reference>
            <reference anchor="RFC6585" target="https://www.rfc-editor.org/info/rfc6585">
               <front>
                  <title>Additional HTTP Status Codes</title>
                  <author initials="M." surname="Nottingham" fullname="M. Nottingham">
                     <organization>Rackspace</organization>
                  </author>
                  <author initials="R." surname="Fielding" fullname="R. Fielding">
                     <organization>Adobe</organization>
                  </author>
                  <date year="2012" month="April"/>
               </front>
               <seriesInfo name="RFC" value="6585"/>
               <seriesInfo name="DOI" value="10.17487/RFC6585"/>
            </reference>
            <reference anchor="RFC7538" target="https://www.rfc-editor.org/info/rfc7538">
               <front>
                  <title>The Hypertext Transfer Protocol Status Code 308 (Permanent Redirect)</title>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke"/>
                  <date month="April" year="2015"/>
               </front>
               <seriesInfo name="RFC" value="7538"/>
               <seriesInfo name="DOI" value="10.17487/RFC7538"/>
            </reference>
            <reference anchor="RFC7616" target="https://www.rfc-editor.org/info/rfc7616">
               <front>
                  <title>HTTP Digest Access Authentication</title>
                  <author initials="R." surname="Shekh-Yusef" fullname="R. Shekh-Yusef" role="editor">
                     <organization>Avaya</organization>
                  </author>
                  <author initials="D." surname="Ahrens" fullname="D. Ahrens">
                     <organization/>
                  </author>
                  <author initials="S." surname="Bremer" fullname="S. Bremer">
                     <organization>Netzkonform</organization>
                  </author>
                  <date year="2015" month="September"/>
               </front>
               <seriesInfo name="RFC" value="7616"/>
               <seriesInfo name="DOI" value="10.17487/RFC7616"/>
            </reference>
            <reference anchor="RFC7617" target="https://www.rfc-editor.org/info/rfc7617">
               <front>
                  <title>The 'Basic' HTTP Authentication Scheme</title>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
                     <organization abbrev="greenbytes">greenbytes GmbH</organization>
                     <address>
                        <email>julian.reschke@greenbytes.de</email>
                     </address>
                  </author>
                  <date year="2015" month="September"/>
               </front>
               <seriesInfo name="RFC" value="7617"/>
               <seriesInfo name="DOI" value="10.17487/RFC7617"/>
            </reference>
            <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
               <front>
                  <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
                  <author initials="M." surname="Cotton" fullname="M. Cotton"/>
                  <author initials="B." surname="Leiba" fullname="B. Leiba"/>
                  <author initials="T." surname="Narten" fullname="T. Narten"/>
                  <date year="2017" month="June"/>
               </front>
               <seriesInfo name="BCP" value="26"/>
               <seriesInfo name="RFC" value="8126"/>
               <seriesInfo name="DOI" value="10.17487/RFC8126"/>
            </reference>
            <reference anchor="RFC8187" target="https://www.rfc-editor.org/info/rfc8187">
               <front>
                  <title>Indicating Character Encoding and Language for HTTP Header Field Parameters</title>
                  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke"/>
                  <date month="September" year="2017"/>
               </front>
               <seriesInfo name="RFC" value="8187"/>
               <seriesInfo name="DOI" value="10.17487/RFC8187"/>
            </reference>
            <reference anchor="RFC8246" target="https://www.rfc-editor.org/info/rfc8246">
               <front>
                  <title>HTTP Immutable Responses</title>
                  <author initials="P." surname="McManus" fullname="P. McManus"/>
                  <date year="2017" month="September"/>
               </front>
               <seriesInfo name="RFC" value="8246"/>
               <seriesInfo name="DOI" value="10.17487/RFC8246"/>
            </reference>
            <reference anchor="RFC8288" target="https://www.rfc-editor.org/info/rfc8288">
               <front>
                  <title>Web Linking</title>
                  <author initials="M." surname="Nottingham" fullname="M. Nottingham"/>
                  <date year="2017" month="October"/>
               </front>
               <seriesInfo name="RFC" value="8288"/>
               <seriesInfo name="DOI" value="10.17487/RFC8288"/>
            </reference>
            <reference anchor="OWASP" target="https://www.owasp.org/">
               <front>
                  <title abbrev="OWASP">A Guide to Building Secure Web Applications and Web Services</title>
                  <author role="editor" initials="A." surname="van der Stock" fullname="Andrew van der Stock"/>
                  <date month="July" day="27" year="2005"/>
               </front>
               <seriesInfo name="The Open Web Application Security Project (OWASP)" value="2.0.1"/>
            </reference>
         </references>
      </references>
      <section anchor="collected.abnf" title="Collected ABNF">
         <t>In the collected ABNF below, list rules are expanded as per <xref target="abnf.extension"/>.</t>
         <sourcecode type="abnf" name="draft-ietf-httpbis-semantics-latest.parsed-abnf"><![CDATA[Accept = [ ( "," / ( media-range [ accept-params ] ) ) *( OWS "," [
 OWS ( media-range [ accept-params ] ) ] ) ]
Accept-Charset = *( "," OWS ) ( ( charset / "*" ) [ weight ] ) *( OWS
 "," [ OWS ( ( charset / "*" ) [ weight ] ) ] )
Accept-Encoding = [ ( "," / ( codings [ weight ] ) ) *( OWS "," [ OWS
 ( codings [ weight ] ) ] ) ]
Accept-Language = *( "," OWS ) ( language-range [ weight ] ) *( OWS
 "," [ OWS ( language-range [ weight ] ) ] )
Accept-Ranges = acceptable-ranges
Allow = [ method ] *( OWS "," OWS [ method ] )
Authentication-Info = [ auth-param ] *( OWS "," OWS [ auth-param ] )
Authorization = credentials

BWS = OWS

Content-Encoding = [ content-coding ] *( OWS "," OWS [ content-coding
 ] )
Content-Language = [ language-tag ] *( OWS "," OWS [ language-tag ]
 )
Content-Length = 1*DIGIT
Content-Location = absolute-URI / partial-URI
Content-Range = range-unit SP ( range-resp / unsatisfied-range )
Content-Type = media-type

Date = HTTP-date

ETag = entity-tag
Expect = "100-continue"

From = mailbox

GMT = %x47.4D.54 ; GMT

HTTP-date = IMF-fixdate / obs-date
Host = uri-host [ ":" port ]

IMF-fixdate = day-name "," SP date1 SP time-of-day SP GMT
If-Match = "*" / ( [ entity-tag ] *( OWS "," OWS [ entity-tag ] ) )
If-Modified-Since = HTTP-date
If-None-Match = "*" / ( [ entity-tag ] *( OWS "," OWS [ entity-tag ]
 ) )
If-Range = entity-tag / HTTP-date
If-Unmodified-Since = HTTP-date

Last-Modified = HTTP-date
Location = URI-reference

Max-Forwards = 1*DIGIT

OWS = *( SP / HTAB )

Proxy-Authenticate = [ challenge ] *( OWS "," OWS [ challenge ] )
Proxy-Authentication-Info = [ auth-param ] *( OWS "," OWS [
 auth-param ] )
Proxy-Authorization = credentials

RWS = 1*( SP / HTAB )
Range = ranges-specifier
Referer = absolute-URI / partial-URI
Retry-After = HTTP-date / delay-seconds

Server = product *( RWS ( product / comment ) )

Trailer = [ field-name ] *( OWS "," OWS [ field-name ] )

URI-reference = <URI-reference, see [RFC3986], Section 4.1>
User-Agent = product *( RWS ( product / comment ) )

Vary = "*" / ( [ field-name ] *( OWS "," OWS [ field-name ] ) )
Via = *( "," OWS ) ( received-protocol RWS received-by [ RWS comment
 ] ) *( OWS "," [ OWS ( received-protocol RWS received-by [ RWS
 comment ] ) ] )

WWW-Authenticate = [ challenge ] *( OWS "," OWS [ challenge ] )

absolute-URI = <absolute-URI, see [RFC3986], Section 4.3>
absolute-path = 1*( "/" segment )
accept-ext = OWS ";" OWS token [ "=" ( token / quoted-string ) ]
accept-params = weight *accept-ext
acceptable-ranges = ( [ range-unit ] *( OWS "," OWS [ range-unit ] )
 ) / "none"
asctime-date = day-name SP date3 SP time-of-day SP year
auth-param = token BWS "=" BWS ( token / quoted-string )
auth-scheme = token
authority = <authority, see [RFC3986], Section 3.2>

challenge = auth-scheme [ 1*SP ( token68 / ( [ auth-param ] *( OWS
 "," OWS [ auth-param ] ) ) ) ]
charset = token
codings = content-coding / "identity" / "*"
comment = "(" *( ctext / quoted-pair / comment ) ")"
complete-length = 1*DIGIT
content-coding = token
credentials = auth-scheme [ 1*SP ( token68 / ( [ auth-param ] *( OWS
 "," OWS [ auth-param ] ) ) ) ]
ctext = HTAB / SP / %x21-27 ; '!'-'''
 / %x2A-5B ; '*'-'['
 / %x5D-7E ; ']'-'~'
 / obs-text

date1 = day SP month SP year
date2 = day "-" month "-" 2DIGIT
date3 = month SP ( 2DIGIT / ( SP DIGIT ) )
day = 2DIGIT
day-name = %x4D.6F.6E ; Mon
 / %x54.75.65 ; Tue
 / %x57.65.64 ; Wed
 / %x54.68.75 ; Thu
 / %x46.72.69 ; Fri
 / %x53.61.74 ; Sat
 / %x53.75.6E ; Sun
day-name-l = %x4D.6F.6E.64.61.79 ; Monday
 / %x54.75.65.73.64.61.79 ; Tuesday
 / %x57.65.64.6E.65.73.64.61.79 ; Wednesday
 / %x54.68.75.72.73.64.61.79 ; Thursday
 / %x46.72.69.64.61.79 ; Friday
 / %x53.61.74.75.72.64.61.79 ; Saturday
 / %x53.75.6E.64.61.79 ; Sunday
delay-seconds = 1*DIGIT

entity-tag = [ weak ] opaque-tag
etagc = "!" / %x23-7E ; '#'-'~'
 / obs-text

field-content = field-vchar [ 1*( SP / HTAB / field-vchar )
 field-vchar ]
field-name = token
field-value = *( field-content / obs-fold )
field-vchar = VCHAR / obs-text
first-pos = 1*DIGIT

hour = 2DIGIT
http-URI = "http://" authority path-abempty [ "?" query ]
https-URI = "https://" authority path-abempty [ "?" query ]

incl-range = first-pos "-" last-pos
int-range = first-pos "-" [ last-pos ]

language-range = <language-range, see [RFC4647], Section 2.1>
language-tag = <Language-Tag, see [RFC5646], Section 2.1>
last-pos = 1*DIGIT

mailbox = <mailbox, see [RFC5322], Section 3.4>
media-range = ( "*/*" / ( type "/*" ) / ( type "/" subtype ) ) *( OWS
 ";" OWS parameter )
media-type = type "/" subtype *( OWS ";" OWS parameter )
method = token
minute = 2DIGIT
month = %x4A.61.6E ; Jan
 / %x46.65.62 ; Feb
 / %x4D.61.72 ; Mar
 / %x41.70.72 ; Apr
 / %x4D.61.79 ; May
 / %x4A.75.6E ; Jun
 / %x4A.75.6C ; Jul
 / %x41.75.67 ; Aug
 / %x53.65.70 ; Sep
 / %x4F.63.74 ; Oct
 / %x4E.6F.76 ; Nov
 / %x44.65.63 ; Dec

obs-date = rfc850-date / asctime-date
obs-fold = <obs-fold, see [Messaging], Section 5.2>
obs-text = %x80-FF
opaque-tag = DQUOTE *etagc DQUOTE
other-range = 1*( %x21-2B ; '!'-'+'
 / %x2D-7E ; '-'-'~'
 )

parameter = parameter-name "=" parameter-value
parameter-name = token
parameter-value = ( token / quoted-string )
partial-URI = relative-part [ "?" query ]
path-abempty = <path-abempty, see [RFC3986], Section 3.3>
port = <port, see [RFC3986], Section 3.2.3>
product = token [ "/" product-version ]
product-version = token
protocol-name = <protocol-name, see [Messaging], Section 9.8>
protocol-version = <protocol-version, see [Messaging], Section 9.8>
pseudonym = token

qdtext = HTAB / SP / "!" / %x23-5B ; '#'-'['
 / %x5D-7E ; ']'-'~'
 / obs-text
query = <query, see [RFC3986], Section 3.4>
quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
qvalue = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] )

range-resp = incl-range "/" ( complete-length / "*" )
range-set = [ range-spec ] *( OWS "," OWS [ range-spec ] )
range-spec = int-range / suffix-range / other-range
range-unit = token
ranges-specifier = range-unit "=" range-set
received-by = ( uri-host [ ":" port ] ) / pseudonym
received-protocol = [ protocol-name "/" ] protocol-version
relative-part = <relative-part, see [RFC3986], Section 4.2>
request-target = <request-target, see [Messaging], Section 3.2>
rfc850-date = day-name-l "," SP date2 SP time-of-day SP GMT

second = 2DIGIT
segment = <segment, see [RFC3986], Section 3.3>
subtype = token
suffix-length = 1*DIGIT
suffix-range = "-" suffix-length

tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." /
 "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
time-of-day = hour ":" minute ":" second
token = 1*tchar
token68 = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" )
 *"="
type = token

unsatisfied-range = "*/" complete-length
uri-host = <host, see [RFC3986], Section 3.2.2>

weak = %x57.2F ; W/
weight = OWS ";" OWS "q=" qvalue

year = 4DIGIT
]]></sourcecode>
      </section>
      <section anchor="changes.from.rfc.7230" title="Changes from RFC 7230">
         <t>
   The sections introducing HTTP's design goals, history, architecture,
   conformance criteria, protocol versioning, URIs, message routing, and
   header fields have been moved here (without substantive change).
</t>
         <t>
   Trailer field semantics now transcend the specifics of chunked encoding.
   Use of trailer fields has been further limited to only allow generation
   as a trailer field when the sender knows the field defines that usage and
   to only allow merging into the header section if the recipient knows the
   corresponding field definition permits and defines how to merge. In all
   other cases, implementations are encouraged to either store the trailer
   fields separately or discard them instead of merging
   (<xref target="trailers.limitations"/>).
</t>
         <t>
   Added status code 308 (previously defined in <xref target="RFC7538"/>)
   so that it's defined closer to status codes 301, 302, and 307
   (<xref target="status.308"/>).
</t>
         <t>
   Added status code 422 (previously defined in
   <xref target="RFC4918" section="11.2"/>) because of its general
   applicability (<xref target="status.422"/>).
</t>
      </section>
      <section anchor="changes.from.rfc.2818" title="Changes from RFC 2818">
         <t>
   None yet.
</t>
      </section>
      <section anchor="changes.from.rfc.7231" title="Changes from RFC 7231">
         <t>
  Restrictions on client retries have been loosened, to reflect implementation
  behavior.
  (<xref target="idempotent.methods"/>)
</t>
         <t>
  Removed a superfluous requirement about setting <xref target="header.content-length" format="none">Content-Length</xref>
  from the description of the OPTIONS method.
  (<xref target="OPTIONS"/>)
</t>
         <t>
  Minimum URI lengths to be supported by implementations are now recommended.
  (<xref target="resources"/>)
</t>
         <t>
  Clarified that request bodies on GET are not interoperable.
  (<xref target="GET"/>)
</t>
      </section>
      <section anchor="changes.from.rfc.7232" title="Changes from RFC 7232">
         <t>
   None yet.
</t>
      </section>
      <section anchor="changes.from.rfc.7233" title="Changes from RFC 7233">
         <t>
   Refactored the range-unit and ranges-specifier grammars to simplify
   and reduce artificial distinctions between bytes and other
   (extension) range units, removing the overlapping grammar of
   other-range-unit by defining range units generically as a token and
   placing extensions within the scope of a range-spec (other-range).
   This disambiguates the role of list syntax (commas) in all range sets,
   including extension range units, for indicating a range-set of more than
   one range. Moving the extension grammar into range specifiers also allows
   protocol specific to byte ranges to be specified separately.
</t>
      </section>
      <section anchor="changes.from.rfc.7235" title="Changes from RFC 7235">
         <t>
   None yet.
</t>
      </section>
      <section anchor="changes.from.rfc.7538" title="Changes from RFC 7538">
         <t>
   None yet.
</t>
      </section>
      <section anchor="changes.from.rfc.7615" title="Changes from RFC 7615">
         <t>
   None yet.
</t>
      </section>
      <section anchor="change.log" title="Change Log">
         <t>This section is to be removed before publishing as an RFC.</t>
         <section anchor="changes.since.publication.as.rfc" title="Between RFC723x and draft 00">
            <t>
  The changes were purely editorial:
</t>
            <ul>
               <li>Change boilerplate and abstract to indicate the "draft" status, and update references to ancestor specifications.</li>
               <li>Remove version "1.1" from document title, indicating that this specification applies to all HTTP versions.</li>
               <li>Adjust historical notes.</li>
               <li>Update links to sibling specifications.</li>
               <li>Replace sections listing changes from RFC 2616 by new empty sections referring to RFC 723x.</li>
               <li>Remove acknowledgements specific to RFC 723x.</li>
               <li>Move "Acknowledgements" to the very end and make them unnumbered.</li>
            </ul>
         </section>
         <section anchor="changes.since.00" title="Since draft-ietf-httpbis-semantics-00">
            <t>
  The changes in this draft are editorial, with respect to HTTP as a whole,
  to merge core HTTP semantics into this document:
</t>
            <ul>
               <li>Merged introduction, architecture, conformance, and ABNF extensions from
      <xref target="RFC7230" format="none">RFC 7230 (Messaging)</xref>.</li>
               <li>Rearranged architecture to extract conformance, http(s) schemes, and
      protocol versioning into a separate major section.</li>
               <li>Moved discussion of MIME differences to <xref target="Messaging"/> since
      that is primarily concerned with transforming 1.1 messages.</li>
               <li>Merged entire content of <xref target="RFC7232" format="none">RFC 7232 (Conditional Requests)</xref>.</li>
               <li>Merged entire content of <xref target="RFC7233" format="none">RFC 7233 (Range Requests)</xref>.</li>
               <li>Merged entire content of <xref target="RFC7235" format="none">RFC 7235 (Auth Framework)</xref>.</li>
               <li>Moved all extensibility tips, registration procedures, and registry
      tables from the IANA considerations to normative sections, reducing the
      IANA considerations to just instructions that will be removed prior to
      publication as an RFC.</li>
            </ul>
         </section>
         <section anchor="changes.since.01" title="Since draft-ietf-httpbis-semantics-01">
            <ul>
               <li>Improve [Welch] citation (<eref target="https://github.com/httpwg/http-core/issues/63"/>)</li>
               <li>Remove HTTP/1.1-ism about Range Requests (<eref target="https://github.com/httpwg/http-core/issues/71"/>)</li>
               <li>Cite RFC 8126 instead of RFC 5226 (<eref target="https://github.com/httpwg/http-core/issues/75"/>)</li>
               <li>Cite RFC 7538 instead of RFC 7238 (<eref target="https://github.com/httpwg/http-core/issues/76"/>)</li>
               <li>Cite RFC 8288 instead of RFC 5988 (<eref target="https://github.com/httpwg/http-core/issues/77"/>)</li>
               <li>Cite RFC 8187 instead of RFC 5987 (<eref target="https://github.com/httpwg/http-core/issues/78"/>)</li>
               <li>Cite RFC 7578 instead of RFC 2388 (<eref target="https://github.com/httpwg/http-core/issues/79"/>)</li>
               <li>Cite RFC 7595 instead of RFC 4395 (<eref target="https://github.com/httpwg/http-core/issues/80"/>)</li>
               <li>improve ABNF readability for qdtext (<eref target="https://github.com/httpwg/http-core/issues/81"/>, <eref target="https://www.rfc-editor.org/errata/eid4891"/>)</li>
               <li>Clarify "resource" vs "representation" in definition of status code 416 (<eref target="https://github.com/httpwg/http-core/issues/83"/>, <eref target="https://www.rfc-editor.org/errata/eid4664"/>)</li>
               <li>Resolved erratum 4072, no change needed here (<eref target="https://github.com/httpwg/http-core/issues/84"/>, <eref target="https://www.rfc-editor.org/errata/eid4072"/>)</li>
               <li>Clarify DELETE status code suggestions (<eref target="https://github.com/httpwg/http-core/issues/85"/>, <eref target="https://www.rfc-editor.org/errata/eid4436"/>)</li>
               <li>In <xref target="header.content-range"/>, fix ABNF for "other-range-resp" to use VCHAR instead of CHAR (<eref target="https://github.com/httpwg/http-core/issues/86"/>, <eref target="https://www.rfc-editor.org/errata/eid4707"/>)</li>
               <li>Resolved erratum 5162, no change needed here (<eref target="https://github.com/httpwg/http-core/issues/89"/>, <eref target="https://www.rfc-editor.org/errata/eid5162"/>)</li>
               <li>Replace "response code" with "response status code" and "status-code" (the ABNF production name from the HTTP/1.1 message format) by "status code" (<eref target="https://github.com/httpwg/http-core/issues/94"/>, <eref target="https://www.rfc-editor.org/errata/eid4050"/>)</li>
               <li>Added a missing word in <xref target="status.3xx"/> (<eref target="https://github.com/httpwg/http-core/issues/98"/>, <eref target="https://www.rfc-editor.org/errata/eid4452"/>)</li>
               <li>In <xref target="abnf.extension"/>, fixed an example that had trailing whitespace where it shouldn't (<eref target="https://github.com/httpwg/http-core/issues/104"/>, <eref target="https://www.rfc-editor.org/errata/eid4169"/>)</li>
               <li>In <xref target="status.206"/>, remove words that were potentially misleading with respect to the relation to the requested ranges (<eref target="https://github.com/httpwg/http-core/issues/102"/>, <eref target="https://www.rfc-editor.org/errata/eid4358"/>)</li>
            </ul>
         </section>
         <section anchor="changes.since.02" title="Since draft-ietf-httpbis-semantics-02">
            <ul>
               <li>Included (Proxy-)Auth-Info header field definition from RFC 7615 (<eref target="https://github.com/httpwg/http-core/issues/9"/>)</li>
               <li>In <xref target="POST"/>, clarify POST caching (<eref target="https://github.com/httpwg/http-core/issues/17"/>)</li>
               <li>Add <xref target="status.418"/> to reserve the 418 status code (<eref target="https://github.com/httpwg/http-core/issues/43"/>)</li>
               <li>In <xref target="operation"/> and <xref target="header.expect"/>, clarified when a response can be sent (<eref target="https://github.com/httpwg/http-core/issues/82"/>)</li>
               <li>In <xref target="charset"/>, explain the difference between the "token" production, the RFC 2978 ABNF for charset names, and the actual registration practice (<eref target="https://github.com/httpwg/http-core/issues/100"/>, <eref target="https://www.rfc-editor.org/errata/eid4689"/>)</li>
               <li>In <xref target="resources"/>, removed the fragment component in the URI scheme definitions as per <xref target="RFC3986" section="4.3"/>,
  furthermore moved fragment discussion into a separate section
  (<eref target="https://github.com/httpwg/http-core/issues/103"/>, <eref target="https://www.rfc-editor.org/errata/eid4251"/>, <eref target="https://www.rfc-editor.org/errata/eid4252"/>)</li>
               <li>In <xref target="protocol.version"/>, add language about minor HTTP version number defaulting (<eref target="https://github.com/httpwg/http-core/issues/115"/>)</li>
               <li>Added <xref target="status.422"/> for status code 422, previously defined in <xref target="RFC4918" section="11.2"/> (<eref target="https://github.com/httpwg/http-core/issues/123"/>)</li>
               <li>In <xref target="status.416"/>, fixed prose about byte range comparison (<eref target="https://github.com/httpwg/http-core/issues/135"/>,  <eref target="https://www.rfc-editor.org/errata/eid5474"/>)</li>
               <li>In <xref target="operation"/>, explain that request/response correlation is version specific (<eref target="https://github.com/httpwg/http-core/issues/145"/>)</li>
            </ul>
         </section>
         <section anchor="changes.since.03" title="Since draft-ietf-httpbis-semantics-03">
            <ul>
               <li>In <xref target="status.308"/>, include status code 308 from RFC 7538 (<eref target="https://github.com/httpwg/http-core/issues/3"/>)</li>
               <li>In <xref target="media.type"/>, clarify that the charset parameter value is case-insensitive due to the definition in RFC 2046 (<eref target="https://github.com/httpwg/http-core/issues/13"/>)</li>
               <li>Define a separate registry for HTTP header field names (<eref target="https://github.com/httpwg/http-core/issues/42"/>)</li>
               <li>In <xref target="request.conneg"/>, refactor and clarify description of wildcard ("*") handling (<eref target="https://github.com/httpwg/http-core/issues/46"/>)</li>
               <li>Deprecate Accept-Charset (<eref target="https://github.com/httpwg/http-core/issues/61"/>)</li>
               <li>In <xref target="evaluation"/>, mention Cache-Control: immutable (<eref target="https://github.com/httpwg/http-core/issues/69"/>)</li>
               <li>In <xref target="field.order"/>, clarify when header field combination is allowed (<eref target="https://github.com/httpwg/http-core/issues/74"/>)</li>
               <li>In <xref target="header.field.registration"/>, instruct IANA to mark Content-MD5 as obsolete (<eref target="https://github.com/httpwg/http-core/issues/93"/>)</li>
               <li>Use RFC 7405 ABNF notation for case-sensitive string constants (<eref target="https://github.com/httpwg/http-core/issues/133"/>)</li>
               <li>Rework <xref target="operation"/> to be more version-independent (<eref target="https://github.com/httpwg/http-core/issues/142"/>)</li>
               <li>In <xref target="DELETE"/>, clarify that DELETE needs to be successful to invalidate cache (<eref target="https://github.com/httpwg/http-core/issues/167"/>, <eref target="https://www.rfc-editor.org/errata/eid5541"/>)</li>
            </ul>
         </section>
         <section anchor="changes.since.04" title="Since draft-ietf-httpbis-semantics-04">
            <ul>
               <li>In <xref target="field.values"/>, fix field-content ABNF (<eref target="https://github.com/httpwg/http-core/issues/19"/>, <eref target="https://www.rfc-editor.org/errata/eid4189"/>)</li>
               <li>Move <xref target="parameter"/> into its own section (<eref target="https://github.com/httpwg/http-core/issues/45"/>)</li>
               <li>In <xref target="header.content-type"/>, reference MIME Sniffing (<eref target="https://github.com/httpwg/http-core/issues/51"/>)</li>
               <li>In <xref target="abnf.extension"/>, simplify the #rule mapping for recipients (<eref target="https://github.com/httpwg/http-core/issues/164"/>, <eref target="https://www.rfc-editor.org/errata/eid5257"/>)</li>
               <li>In <xref target="OPTIONS"/>, remove misleading text about "extension" of HTTP is needed to define method payloads (<eref target="https://github.com/httpwg/http-core/issues/204"/>)</li>
               <li>Fix editorial issue in <xref target="representations"/> (<eref target="https://github.com/httpwg/http-core/issues/223"/>)</li>
               <li>In <xref target="status.422"/>, rephrase language not to use "entity" anymore, and also avoid lowercase "may" (<eref target="https://github.com/httpwg/http-core/issues/224"/>)</li>
               <li>Move discussion of retries from <xref target="Messaging"/> into <xref target="idempotent.methods"/> (<eref target="https://github.com/httpwg/http-core/issues/230"/>)</li>
            </ul>
         </section>
         <section anchor="changes.since.05" title="Since draft-ietf-httpbis-semantics-05">
            <ul>
               <li>Moved transport-independent part of the description of trailers into <xref target="trailer.fields"/> (<eref target="https://github.com/httpwg/http-core/issues/16"/>)</li>
               <li>Loosen requirements on retries based upon implementation behavior (<eref target="https://github.com/httpwg/http-core/issues/27"/>)</li>
               <li>In <xref target="port.reg"/>, update IANA port registry for TCP/UDP on ports 80 and 443 (<eref target="https://github.com/httpwg/http-core/issues/36"/>)</li>
               <li>In <xref target="considerations.for.new.header.fields"/>, revise guidelines for new header field names (<eref target="https://github.com/httpwg/http-core/issues/47"/>)</li>
               <li>In <xref target="cacheable.methods"/>, remove concept of "cacheable methods" in favor of prose (<eref target="https://github.com/httpwg/http-core/issues/54"/>, <eref target="https://www.rfc-editor.org/errata/eid5300"/>)</li>
               <li>In <xref target="establishing.authority"/>, mention that the concept of authority can be modified by protocol extensions (<eref target="https://github.com/httpwg/http-core/issues/143"/>)</li>
               <li>Create new subsection on payload body in <xref target="payload.body"/>, taken from portions of message body (<eref target="https://github.com/httpwg/http-core/issues/159"/>)</li>
               <li>Moved definition of "Whitespace" into new container "Generic Syntax" (<xref target="generic.syntax"/>) (<eref target="https://github.com/httpwg/http-core/issues/162"/>)</li>
               <li>In <xref target="resources"/>, recommend minimum URI size support for implementations (<eref target="https://github.com/httpwg/http-core/issues/169"/>)</li>
               <li>In <xref target="range.units"/>, refactored the range-unit and ranges-specifier grammars (<eref target="https://github.com/httpwg/http-core/issues/196"/>, <eref target="https://www.rfc-editor.org/errata/eid5620"/>)</li>
               <li>In <xref target="GET"/>, caution against a request body more strongly (<eref target="https://github.com/httpwg/http-core/issues/202"/>)</li>
               <li>Reorganized text in <xref target="considerations.for.new.header.fields"/> (<eref target="https://github.com/httpwg/http-core/issues/214"/>)</li>
               <li>In <xref target="status.403"/>, replace "authorize" with "fulfill" (<eref target="https://github.com/httpwg/http-core/issues/218"/>)</li>
               <li>In <xref target="OPTIONS"/>, removed a misleading statement about Content-Length (<eref target="https://github.com/httpwg/http-core/issues/235"/>, <eref target="https://www.rfc-editor.org/errata/eid5806"/>)</li>
               <li>In <xref target="establishing.authority"/>, add text from RFC 2818 (<eref target="https://github.com/httpwg/http-core/issues/236"/>)</li>
               <li>Changed "cacheable by default" to "heuristically cacheable" throughout (<eref target="https://github.com/httpwg/http-core/issues/242"/>)</li>
            </ul>
         </section>
         <section anchor="changes.since.06" title="Since draft-ietf-httpbis-semantics-06">
            <ul>
               <li>None yet.</li>
            </ul>
         </section>
      </section>
      <section anchor="acks" numbered="false" title="Acknowledgments">
         <t>
   This edition of the HTTP specification builds on the many contributions that went into
   <xref target="RFC1945" format="none">RFC 1945</xref>,
   <xref target="RFC2068" format="none">RFC 2068</xref>,
   <xref target="RFC2145" format="none">RFC 2145</xref>,
   <xref target="RFC2616" format="none">RFC 2616</xref>, and
   <xref target="RFC2818" format="none">RFC 2818</xref>, including
   substantial contributions made by the previous authors, editors, and
   Working Group Chairs: Tim Berners-Lee, Ari Luotonen, Roy T. Fielding,
   Henrik Frystyk Nielsen, Jim Gettys, Jeffrey C. Mogul, Larry Masinter,
   Paul J. Leach, Eric Rescorla, and Yves Lafon.
</t>
         <t>
   See <xref target="RFC7230" section="10"/> for further
   acknowledgements from prior revisions.
</t>
         <t>
   In addition, this document has reincorporated the HTTP Authentication
   Framework, previously defined in
   RFC 7235 and
   RFC 2617.
   We thank John Franks, Phillip M. Hallam-Baker, Jeffery L. Hostetler,
   Scott D. Lawrence, Paul J. Leach, Ari Luotonen, and Lawrence C. Stewart
   for their work on that specification.
   See <xref target="RFC2617" section="6"/>
   for further acknowledgements.
</t>
         <t>
  
            <cref anchor="newacks">New acks to be added here.</cref>

         </t>
      </section>
   </back>
</rfc>