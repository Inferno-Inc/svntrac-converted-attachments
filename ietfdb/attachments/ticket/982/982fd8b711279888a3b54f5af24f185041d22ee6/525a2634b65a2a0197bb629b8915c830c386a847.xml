<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc='yes' ?><!-- add table of contents -->
<?rfc editing='yes' ?><!-- add paragraph numbering -->
<?rfc symrefs='yes' ?><!-- use references like [ABC] instead of [1] -->
<?rfc sortrefs='no'?><!-- sort the references alphabetically -->
<?rfc linkmailto='no'?>
<?rfc compact='yes'?>
<?rfc comments='yes'?><!-- print crefs -->
<?rfc inline='yes'?>
<?rfc-ext parse-xml-in-artwork='yes' ?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<rfc ipr='trust200902'
  docName='draft-hansen-rfc-use-of-pdf-00' category='info' >
  <front>
    <title abbrev='PDF for RFCs'>PDF for an RFC Series Output Document Format</title>
    <author initials='T.' surname='Hansen' fullname='Tony Hansen' role='editor'>
      <organization>AT&amp;T Laboratories</organization>
      <address>
        <postal>
          <street>200 Laurel Ave. South</street>
          <city>Middletown</city>
          <region>NJ</region>
          <code>07748</code>
          <country>USA</country>
        </postal>
        <email>tony+rfc2pdf@maillennium.att.com</email>
      </address>
    </author>
    <author initials='M.' surname='Hardy'>
    </author>
    <date />
    <area>RFC Design Team</area>
    <keyword>Requests for Comment</keyword>
    <abstract>
      <t>
	This document focuses on the requirements for the PDF rendering of RFCs in the RFC Series, as outlined in RFC 6989.
      </t>
    </abstract>
  </front>
  <middle>
    <section title='Introduction'>
      <t>
	The RFC Series is evolving, as outlined in 
	<xref target='RFC6949'/>. Future documents will use an archival format of XML with renderings in various formats, including PDF. 
	
      </t>
      <t>
	This document focuses on the requirements for PDF, including the 
	mappings of tags from XML to PDF, and makes a case for the use of
	TBD as the PDF format of choice for the PDF publication format.
      </t>
      <t> PDF has a wide range of capabilities and altternatives;  not all PDFs are "equal", originating or produced from from scanned page images, various capabilities for Unicode, embedded fonts, scripting and so forth. Just saying "PDF" doesn't tell enough; it's necessary to define a profile and conversion rules.
      </t>
    </section>
    <section title='History of PDF with RFCs and Internet Drafts'>
      <section title='RFCs'>
	<t>
	  The RFC series has for a long time accepted Postscript renderings of RFCs, either in addition to or instead of the text
	  renderings of those same RFCs.
	  These have usually been produced when there was a complicated figure or mathematics within the document.
	  For example, consider the figures and mathematics found in RFCs 1119 and RFC 1142, and compare the figures found in the
	  text version of RFC 3550 with those in the Postscript version.
	  The RFC editor has provided a PDF rendering of RFCs. Frequently, this has been a print of the text file that does not take advantage of any of the broader PDF functionality, although, if there was a Postscript version of the RFC, the RFC editor would use that to generate a PDF instead.
	</t>
	
      </section>
      <section title='Internet Drafts'>
	<t>
	  In addition to PDFs generated and published by the RFC editor, the IETF tools community has also long supported PDF for Internet Drafts.
	  Most RFCs start with Internet Drafts, edited by individual authors. Authors will use a variety of tools; it is expected that renderings available for RFCs should also be available for Internet Drafts.
	</t>
	<t>
	  The Internet drafts submission tool at https://datatracker.ietf.org/submit/ accepts PDF and Postscript files in addition to the (required) text submission and (currently optional) XML.
	  If a PDF wasn't submitted for a particular version of an Internet Draft, the tools would generate one from the Postscript, HTML, or text.
	</t>
      </section>
    </section>
    <section title='Tooling'>
      <t>This section will talk about tools for creating, manipulating, transforming PDF files, including those currently in use by the RFC editor and Internet drafts, as well as outlining available PDF tools for various processes.</t>
      <t>during either phase: generation.</t>
      <t>during I-D phase: xml2rfc, of course for authors. Copy from PDF files? Review and comment. Digital Signature tools. Comparing two PDF files (versions).

During RFC publishing, xml2rdf. Editing of PDF to correct layout errors. Nits checking, checking conformance with PDF/a and PDF/ua.</t>
    </section>
    <section title='Requirements and Options for PDF RFCs'>
      <t>This section lays out the requirements for PDFs produced by the RFC editor for RFCs. There are requirements are both visible and internal structure.</t>
      <section title='"Visible" requirements'>
	<t>
	  PDF supports rich visible layout of fixed-sized pages. For a consistent 'look' of RFC and good style, the RFCs produced by the RFC editor should have a clear, easy to read style. They should print well on the widest range of printers, and look good on displays of varying resolution. 
	  While it is possible to generate PDF directly from the XML, there is some advantage to having the PDF files look just like the text or HTML versions of the document.
	  <list style='numbers'>
	    <t>could look like the text version of the document, or</t>
	    <t>could look like the text version of the document but with pictures rendered as pictures instead of using their ASCII-art equivalent, or</t>
	    <t>could look like the HTML version.</t>
	  </list>
	  Numbers 1 and 2 are what are currently produced by the RFC Editor on their web site.
	</t>
	<t>
	  Recommendation: Now that we are officially support HTML as an output format, it is recommended that the PDF version be based on the HTML version.
	</t>
      </section>
      <section title="Typeface choices">
	<!-- embedding the font or not is 'invisible'. The choice
	of the typeface and size is visible -->
	<t>
	  A PDF may refer to a font by name, or it may use an embedded font.
When a font is not embedded, a PDF viewer will attempt to locate a locally installed font of the same name.  If it can not find an exact match, it will find a "close match".  If a close match is not available, it will fallback to something.
For an archival format, it is likely that an embedded font would be preferred.
	  </t>
	<t>
	  In addition, since the HTML version of the document is being visually replicated,
	  the font(s) chose should have both variable width and constant width components,
	  as well as bold and italic representations.
	</t>
	<t>
Few fonts have glyphs for the entire repertoire of Unicode characters; for this purpose, the PDF generation tool may need a set of fonts and a way of choosing them.
	</t>
	<t>
	  Recommendation: ... TBD ...
	</t>
      </section>
      <section title='Hyperlinks'>
	<t>
	  PDF supports hyperlinks both to sections of the same document and to other documents.</t>
	  <t>Recommendation: All hyperlinks available in the HTML rendition of the RFC should also be visible and active in the PDF produced.</t>
      </section>
    </section>
    <section title='"Invisible" aspect'>
      <t>
	There are many things going on under the cover
	What is usable in an RFC rendered as PDF?
	Where can we improve on the past?
	Where must we improve?
	What must be supported in PDF?
	These all turn into requirements for the conversion tools that are used to generate the PDF rendering of the visible representation.
      </t>
      <t>
	The areas we'll discuss are oriented around:
	<list style='numbered'>
	  <t>Text Structure</t>
	  <t>Unicode support</t>
	  <t>Metadata</t>
	  <t>Document Structure</t>
	  <t>Tagged PDF</t>
	  <t>Extractable Sections</t>
	  <t>Document Signatures</t>
	</list>
      </t>
      <section title='Text Structure'>
	<t>
	  The contents of a PDF file can be represented in many ways.
	  The PDF file could be generated:
	  <list style='bullet'>
	    <t>as an image of the visual representation, such as a picture of the word 'IETF'</t>
	    <t>placing individual characters in position on the page, such as saying "put an 'F' here", then "put an 'T' before it",
	      then "put an 'E' before that", then "put an 'I' before that" to render the word 'IETF'
	    </t>
	    <t>placing words in position on the page, such as keeping the word 'IETF' would be kept together,
	      and</t>
	    <t>using higher-level constructs for sets of words,
	      such as keeping the sentence 'The Internet Engineering Task Force (IETF) supports the Internet.' together as a sentence.</t>
	  </list>
	  All of these end up with the same visual representation of the output.
	  However, each level has trade offs for auxiliary usage of the format.
	  For example, when using an annotation tool to review a PDF file, it is harder to place a comment
	  on a location within an image compared to attaching a comment to a given word.
	  Attaching a comment to a set of words (such as a bracketed set of words) is easier when using higher-level constructs.
	  Another example where higher-level constructs are needed are for accessibility purposes.
	</t>
	<t>
	  Requirement: the tools that are chosen must use the higher-level constructs for text structure.
	</t>
      </section>

      <section title='Unicode Support'>
	<t>
	  Unicode is being fully supported, so the RFC PDF format must similarly have full support for Unicode.
	  While Unicode is not required by PDF, certain PDF profiles require its support.
	</t>
	<t>
	  Requirement: PDF files generated must have the full text, exactly as it appears in the original XML for text, or within SVG for images.
	  (What about text in image illustrations?)
	</t>
      </section>
      <section title='Metadata Support'>
	<t>
	  Metadata encodes information about the document authors, the document series, date created, etc. using
	  the RDF Dublin core (and other elements).
	  Having this metadata within the PDF file allows it to be extracted by the rendering tools.
	  It can also include additional information such as pointers to where the document can be found on the RFC Editor web site.
	</t>
	<t>PDF supports embedded metadata using XMP. </t>
	<t>
	  Recommendation: The PDFs generated should have all of the metadata from the XML version embedded directly as XMP metadata, including the author and date information, 
	  set the document series, and a URL for where the document can be retrieved.
	</t>
      </section>
      <section title='Document Structure Support'>
	<t>
	  The section structure of an RFC can be mapped into the PDF elements for the document structure.
	  This will allow the bookmark feature of PDF readers to be used to quickly access sections of the document.
	</t>
	<t>
	  Requirement: The section structure of an RFC must be mapped into the PDF elements for the document structure.
	  This would include section headings for the boilerplate sections such as the Abstract, Status of the Document,
	  Table of Contents, and Author Addresses.
	</t>
      </section>

      <section title='Tagged PDF'>
	<t>
	  ... say more about the use of alternative texts for images,
	  tagging text spans and giving them an ID,
	  and
	  providing replacement texts for symbols and images
	  <vspace/>...<vspace/>
	  hyperlinks within the document,
	  hyperlinks to external locations,
	  <vspace/>...<vspace/>
	  where should hyperlinks to RFCs point? to the info page for the RFC? to the PDF version of the RFC?
	  <vspace/>...<vspace/>
	  similar questions on references to internet drafts
	</t>
      </section>
      <section title='Embedded Files'>
	<section title='Extractable Code Segments and Artwork'>
	  <t>
	    It has been suggested that the source input for code segments (e.g., ABNF, C code, MIBs) be extractable from the PDF.
	    This capability might be supported through other mechanisms from the XML source files, but could also be supported within the PDF.
	    PDF/A-2 (based on PDF release 1.7) allows for the embedding of some file formats, while PDF/A-3 adds support for arbitrary files to be embedded.
	  </t>
	</section>
	<section title='Extractable XML source'>
	  <t>
	    Another suggestion that has been made is that the XML input file itself could be embedded within the PDF.
	    This would make the PDF file totally self-referential.
	  </t>
	</section>
      </section>
      <section title='Document Signatures'>
	<t>
	  PDF has supported file signatures since PDF 1.2.
	  It has been suggested that the PDF files be signed by the RFC Editor on creation.
	  This would allow the signatures to be authenticated.
	</t>
	<t>
	  Recommendation: The RFC PDF documents created by the RFC Editor should be digitally signed.
	</t>
	<t>
	  Recommendation: Internet drafts do not need to be digitally signed.
	</t>
      </section>
    </section>
    <section title='Picking a PDF Profile'>
      <t>There are profiles of PDF for specific purposes: PDF/UA and PDFA3 etc.
      </t>
      <t>Recommendation: use PDF/UA and also PDF/A3.
      </t>
    </section>
  </middle>
  <back>
    <!-- references title='Normative References'>
    </references -->
    <references title='Informative References'>
      <?rfc include='reference.RFC.3778' ?>
      <?rfc include='reference.RFC.6949' ?>
    </references>
      <section title='A Synopsis of PDF Format History'>
	<t>
	  <xref target='RFC3778'/> contains some history of PDF.
	  This is a capsule view, plus additional information on events that have occurred since the publication of <xref target='RFC3778'/>.
	</t>
	<t>
	  The Portable Document Format (PDF) family of document formats was invented by Adobe Systems in the early 1990s.
	  At the time, it was a proprietary format that underwent a variety of revisions that matched the release of different versions of
	  the Adobe Acrobat products.
	  For example, Acrobat 1 supported PDF version 1.0, Acrobat 2 supported PDF version 1.1, Acrobat 5 supported PDF version 1.4, etc.
	  <eref target='http://www.adobe.com/devnet/pdf/pdf_reference_archive.html'/>
	</t>
	<t>
	  Each release (and extension level) introduced new features.
	  For example, (1.0) character, word and image rendering, externally-referenced or embedded fonts, (1.1) passwords, encryption,
	  device-independent color, (1.2) interactive forms, unicode, signatures, compression, (1.3) web semantic capture, embedded files,
	  Adobe javascript, (1.4) metadata streams, tagged PDF, (1.5) controllable hiding of sections, slideshows, (1.6) 3D artwork,
	  OpenType font embedding, linking into embedded files, and (1.7) video and audio support.
	  After release 1.7, additional Extension Levels have been introduced.
	  Each release also provided enhancements to the previous support.
	  For example, encryption was introduced in 1.1, but AES encryption wasn't supported until 1.7 extension level 3.
	  A PDF reader for PDF 1.1 is not able to read and display a PDF 1.7 file, but a PDF reader for PDF 1.7 can also handle all
	  previous versions of PDF.
	  The wikipedia page at  <eref target='http://en.wikipedia.org/wiki/PDF'/> has a nice summary table going into further details.
	</t>
	<t>
	  Certain profiles or subsets of PDF have been standardized.
	  PDF/X (X for Exchange), PDF/A (A for Archive), PDF/E (E for Engineering), PDF/VT (VT for Variables and Transactions), and PDF/UA
	  (UA for Universal Access) all have ISO standards associated with them.
	  Of particular potential interest to the RFC community are PDF/A and PDF/UA.
	</t>
	<section title='PDF/A'>
	  <t>
	    PDF/A in turn has nuances, as there have been a couple updates to it and conformance levels within each version.
	    PDF/A-1 was based on PDF release 1.4.
	    PDF/A-2 was based on PDF release 1.7, and PDF/A-3 adds embedded arbitrary files.
	    PDF/A is considered a profile because it mandates that certain optional features be used.
	    At a high level, the conformance levels are B (basic), U (mandatory unicode mapping [not in PDF/A-1]) and A (accessible).
	    The requirements for conformance level A are that: the document structure must be represented within the PDF (e.g., section
	    headings, table cells, paragraph divisions), tagged PDF is used (e.g.,  element anchors) and that language tags be used where
	    appropriate.
	    When referring to PDF/A, you would refer to the version and conformance level.
	    So PDF/A-1A would be the profile for the Accessible conformance level of version 1 of PDF/A, which was based on PDF 1.4.
	  </t>
	</section>
	<section title='PDF/UA'>
	  <t>
	    The PDF/UA (Universal Access) profile is orthogonal to the other profiles, specifying user accessibility requirements.
	    It places some restrictions on the other profiles, such as requiring the use of higher-level constructs for the textual representation
	    and adds additional requirements for programatic access (think automatic readers for the blind).
	  </t>
	</section>
	<section title='Additional Reading'>
	  <t>
	    <eref target='http://www.pdflib.com/fileadmin/pdflib/pdf/whitepaper/Whitepaper-Technical-Introduction-to-PDFA.pdf'/>
	    <eref target='http://www.pdfa.org/wp-content/uploads/2011/08/tn0003_metadata_in_pdfa-1_2008-03-128.pdf'/>
	    <eref target='http://www.pdfa.org/wp-content/uploads/2011/08/PDFA-in-a-Nutshell_1b.pdf'/>
	    <eref target='http://www.pdfa.org/2011/08/pdfa-%E2%80%93-a-look-at-the-technical-side/'/>
	    <eref target='http://pdf.editme.com/pdfa'/>
	  </t>
	</section>
      </section>
  </back>
</rfc>
